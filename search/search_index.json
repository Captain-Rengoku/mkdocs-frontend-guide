{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-my-frontend-guide","title":"Welcome to My Frontend Guide (  )","text":"<p>This guide will walk you through everything you need to know to build modern, scalable, and type-safe web applications using React, TypeScript, and Next.js.</p> <p></p>"},{"location":"#what-youll-learn","title":"\ud83d\udcd8 What You\u2019ll Learn","text":"<p>You'll explore:</p> <ul> <li>\u2705 Core React principles, history, and why it\u2019s the UI library of choice.</li> <li>\ud83e\uddf1 How to build reusable components with JSX, props, state, and hooks.</li> <li>\ud83d\udd04 The Virtual DOM and how React efficiently handles UI updates.</li> <li>\u2699\ufe0f Modern features like React Fiber, Concurrent Rendering, and Suspense.</li> <li>\ud83e\udde0 TypeScript fundamentals and how it improves developer productivity.</li> <li>\u2705 Typing React props, context, hooks, and reducers using TypeScript.</li> <li>\ud83e\udde9 Combining React with TypeScript for scalable, bug-resistant code.</li> <li>\ud83d\ude80 Building full-stack React apps with Next.js.</li> <li>\ud83e\udded Mastering Next.js features: file-based routing, SSR, SSG, ISR, and Server Components.</li> <li>\ud83d\uddc3\ufe0f Using API routes, database integration, and deploying with Vercel.</li> <li>\ud83d\udd01 Comparing React to other frameworks (Vue, Angular, Svelte).</li> </ul>"},{"location":"#react-the-ui-library","title":"React: The UI Library","text":"<p>React is a powerful JavaScript library for building user interfaces, focusing on component-based architecture and a declarative approach.</p> <p>In this section, you\u2019ll learn:</p> <ul> <li>What React is and how it differs from other frameworks.</li> <li>Creating components with JSX.</li> <li>Using state and props to manage dynamic data.</li> <li>The power of hooks: <code>useState</code>, <code>useEffect</code>, <code>useContext</code>, and more.</li> <li>One-way data flow and how it simplifies app logic.</li> <li>The Virtual DOM and performance benefits.</li> </ul>"},{"location":"#typescript-static-typing-for-javascript","title":"TypeScript: Static Typing for JavaScript","text":"<p>TypeScript adds type safety to JavaScript, helping you catch errors early and refactor confidently.</p> <p>You\u2019ll learn:</p> <ul> <li>TypeScript syntax: types, interfaces, enums, and generics.</li> <li>Type checking functions, arrays, objects, and more.</li> <li>Writing reusable, type-safe utilities and components.</li> <li>Working with external libraries and <code>@types</code>.</li> <li>Using <code>tsconfig.json</code> to customize your build settings.</li> <li>Setting up React + TypeScript projects.</li> <li>Typing props, state, refs, and context.</li> <li>Strongly typing <code>useReducer</code> and custom hooks.</li> <li>Handling form validation and API calls with TypeScript.</li> <li>Creating scalable patterns with reusable types.</li> </ul>"},{"location":"#nextjs-the-react-framework","title":"Next.js: The React Framework","text":"<p>Next.js builds on React by adding routing, data fetching, API routes, and full-stack capabilities\u2014all with great defaults and performance.</p> <p>With Next.js, you\u2019ll learn:</p> <ul> <li>App routing: pages vs App Router, dynamic and nested routes.</li> <li>Static Generation (SSG), Server-Side Rendering (SSR), and Incremental Static Regeneration (ISR).</li> <li>Server Components and client hydration in the new App directory.</li> <li>Creating API routes and integrating databases (e.g., Prisma).</li> <li>Authentication with NextAuth.js and using middleware.</li> <li>Optimizing and deploying to Vercel.</li> </ul> <p>Whether you're just starting out or leveling up, this guide gives you a solid foundation for building high-performance front-end applications.</p>"},{"location":"#get-in-touch","title":"\ud83d\udcec Get in touch","text":"<ul> <li>Email: souravkumardash183@gmail.com</li> <li>Portfolio: My Portfolio</li> <li>LinkedIn: S.Kumar</li> <li>GitHub: Captain-Rengoku</li> </ul>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tag:mkdocs","title":"MKDocs","text":"<ul> <li>            \ud83d\udc4b Welcome to My MkDocs Site          </li> </ul>"},{"location":"Github%20Repositories/React%20Learning%20Journey/","title":"Github Repositories","text":""},{"location":"Github%20Repositories/React%20Learning%20Journey/#react-learning-journey","title":"React Learning Journey","text":"<p>This repository Board tracks my React learning path and each repository focuses on a different concept in React.</p>"},{"location":"Github%20Repositories/React%20Learning%20Journey/#repository-board","title":"\ud83d\uddc2 Repository Board","text":"Topic Lesson Repo Link Status react-hooks repo \u2705 Done react-router repo \u2705 Done data-fetching axios repo \u2705 Done react-query repo \u2705 Done react-query-two repo \u23f3 In Progress state-management context-api repo \u2705 Done redux repo \u2705 Done redux-invoice-generator repo \u2705 Done redux-shoppingcart repo \u2705 Done"},{"location":"Github%20Repositories/React%20Learning%20Journey/#structure","title":"\ud83d\udccc Structure","text":"<p>Learning are grouped into sections:  </p> <ul> <li>Hooks \u2192 useState, useEffect, useReducer, etc.</li> <li>Routing \u2192 React Router, navigation patterns, etc.</li> <li>Data Fetching and Caching \u2192 Axios, JSON Server, React Query, etc.</li> <li>State Management \u2192 Context API, Redux, Zustand, etc.</li> </ul>"},{"location":"Github%20Repositories/React%20Learning%20Journey/#goal","title":"\ud83c\udfaf Goal","text":"<p>The goal of this journey is to:  </p> <ul> <li>Track learning progress in an organized way</li> <li>Practice React fundamentals through projects  </li> <li>Build a portfolio of React apps that demonstrate different concepts  </li> </ul> <p>\u2728 Follow along as I keep adding projects and leveling up my React skills!</p>"},{"location":"blog/","title":"Welcome to My Blog","text":""},{"location":"blog/#welcome-to-my-blog","title":"Welcome to My Blog","text":"<p>Hi there! \ud83d\udc4b Welcome to my collection of blog posts. Here, I share my thoughts, tutorials, experiments, and anything else that sparks my interest. Whether you're here to learn something new or just explore, I hope you find something valuable.</p>"},{"location":"blog/#these-are-my-blog-posts-feel-free-to-explore","title":"These are my blog posts \u2014 feel free to explore","text":""},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/","title":"\ud83d\udc4b Welcome to My MkDocs Site","text":"","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#welcome-to-my-mkdocs-site","title":"\ud83d\udc4b Welcome to My MkDocs Site","text":"<p>Fast, simple, and beautiful documentation \u2014 powered by MkDocs + Material.</p>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#hero-image","title":"\ud83d\uddbc\ufe0f Hero Image","text":"","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#light-and-dark-mode-images","title":"\ud83c\udf17 Light and Dark Mode Images","text":"","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#image-with-caption","title":"\ud83d\udcdd Image with Caption","text":"<p>A simple caption for the image, using Material for MkDocs syntax.</p>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#features","title":"\ud83d\udca1 Features","text":"<ul> <li>\u2705 Built using MkDocs</li> <li>\ud83c\udfa8 Styled with Material for MkDocs</li> <li>\ud83c\udf13 Dark mode &amp; light mode support</li> <li>\ud83d\udcc4 Markdown-based content</li> <li>\ud83d\uddbc Responsive image rendering</li> <li>\ud83e\udde0 Tooltips and references</li> </ul>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#tooltip-examples","title":"\ud83d\udd17 Tooltip Examples","text":"<ul> <li> <p>Hover over me</p> </li> <li> <p>Reference style link</p> </li> </ul>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#image-gallery","title":"\ud83d\uddbc\ufe0f Image Gallery","text":"<ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> <li></li> <li></li> <li></li> <li></li> </ul>","tags":["MKDocs"]},{"location":"blog/2025/07/18/-welcome-to-my-mkdocs-site/#stay-connected","title":"\ud83d\udcec Stay Connected","text":"<ul> <li>\ud83d\udce7 Email: [your@email.com]</li> <li>\ud83d\udc19 GitHub: yourusername</li> <li>\ud83c\udf10 Website: yourwebsite.com</li> </ul> <p>_Made with \u2764\ufe0f using MkDocs and Material for MkDocs</p>","tags":["MKDocs"]},{"location":"react/1.Introduction%20to%20React/","title":"1.Introduction to React","text":""},{"location":"react/1.Introduction%20to%20React/#introduction-to-react","title":"Introduction to React","text":""},{"location":"react/1.Introduction%20to%20React/#1-what-is-react","title":"1. What is React?","text":"<p>React is a JavaScript library used for building user interfaces, particularly single-page applications (SPAs) where a fast, interactive, and dynamic user experience is required. Developed and maintained by Meta (formerly Facebook), React allows developers to create reusable UI components and efficiently update the DOM using a virtual DOM.</p>"},{"location":"react/1.Introduction%20to%20React/#history-and-evolution-of-react","title":"History and Evolution of React","text":"<p>React was created by Jordan Walke, a software engineer at Facebook, in 2011. It was first used in Facebook\u2019s News Feed and later in Instagram. The library was officially open-sourced in 2013, allowing developers worldwide to use and contribute to it.</p> <p>Key Milestones in React\u2019s Evolution:</p> <ul> <li>2013: React is open-sourced at JSConf US.</li> <li>2015: React Native is released, enabling React development for mobile apps.</li> <li>2016: Introduction of React Fiber, improving rendering performance.</li> <li>2017: React 16 is launched, bringing features like error boundaries and portals.</li> <li>2018: Introduction of React Hooks, enabling state management in functional components.</li> <li>2020: React 17 introduces gradual upgrades for better backward compatibility.</li> <li>2022-Present: React continues to evolve with improved Concurrent Rendering, React Server Components(RSC), and Suspense.</li> </ul> <p>Concurrent Rendering in React: Concurrent Rendering is a React feature that allows the UI to remain responsive by rendering updates asynchronously. Instead of blocking the main thread, React can pause, prioritize, or abandon rendering tasks based on user interactions and system workload.</p> <p>Traditional React rendering is synchronous, meaning that once a render starts, it cannot be interrupted. If a heavy computation or large UI update happens, it can cause lag or freeze the UI.</p> <p>Concurrent rendering solves this by:</p> <ul> <li>\u2705 Interrupting non-urgent renders when a high-priority update (like user input) occurs.</li> <li>\u2705 Scheduling renders based on priority to enhance responsiveness.</li> <li>\u2705 Avoiding UI freezes by spreading rendering work over multiple frames.</li> </ul> <p>React Server Components (RSC) Explained: React Server Components (RSC) are a new feature that allows React components to be rendered on the server instead of the client. This helps reduce the JavaScript bundle size and improves performance by delivering pre-rendered HTML from the server to the browser.</p> <p>What is Suspense? Suspense is a React feature that lets components \"wait\" for some asynchronous operation (like data fetching) before rendering. It helps manage loading states efficiently and improves the user experience by displaying fallback UI while waiting for data.</p>"},{"location":"react/1.Introduction%20to%20React/#core-philosophy-of-react","title":"Core Philosophy of React","text":"<p>React is built around a few key principles that make it powerful and efficient:</p> <ul> <li>Declarative UI: React components describe what the UI should look like, and React efficiently updates the DOM to match this description.</li> </ul> <pre><code>function Greeting() {\n  return &lt;h1&gt;Hello, World!&lt;/h1&gt;;\n}\n</code></pre> <ul> <li>Component-Based Architecture: React applications are made up of independent, reusable components that manage their own state and behavior.</li> </ul> <pre><code>function Button() {\n  return &lt;button&gt;Click me&lt;/button&gt;;\n}\n</code></pre> <ul> <li>Virtual DOM for Performance: Instead of updating the real DOM directly, React uses a Virtual DOM to minimize performance bottlenecks.</li> </ul> <p>When a change occurs, React compares the Virtual DOM with the previous version and updates only the necessary parts.</p> <ul> <li>Unidirectional Data Flow: React follows a top-down (one-way) data flow, making it easier to track and manage state changes.</li> </ul> <p>Data is passed via props from parent to child components.</p> <ul> <li>React Hooks for State Management: With Hooks (introduced in React 16.8), functional components can handle state and lifecycle methods.</li> </ul> <pre><code>import { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/1.Introduction%20to%20React/#open-source-community-and-contributions","title":"Open-Source Community and Contributions","text":"<p>React has a thriving open-source ecosystem, with active contributors from Facebook, individual developers, and large companies.</p> <p>Key Contributions and Community Initiatives:</p> <ul> <li> <p>React Repository on GitHub: One of the most starred repositories on GitHub.</p> </li> <li> <p>React DevTools: A browser extension for debugging React applications.</p> </li> <li> <p>Third-Party Libraries: Popular libraries like Redux, React Router, and Next.js enhance React\u2019s capabilities.</p> </li> <li> <p>Conferences &amp; Meetups: Events like React Conf bring the global developer community together.</p> </li> <li> <p>Meta\u2019s Role: Facebook (Meta) maintains React and regularly releases updates, ensuring long-term support.</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#2-features-and-benefits-of-react","title":"2. Features and Benefits of React","text":"<p>React is a powerful JavaScript library that offers several key features, making it an excellent choice for building modern web applications. Below are some of the core features and benefits of React:</p>"},{"location":"react/1.Introduction%20to%20React/#declarative-ui","title":"Declarative UI","text":"<p>React uses a declarative programming approach, meaning developers describe what the UI should look like, and React efficiently updates the DOM to match that state.</p> <p>Benefits:</p> <ul> <li>Simplifies UI development by focusing on \"what\" should happen rather than \"how.\"</li> <li>Improves readability and maintainability of code.</li> <li>Automatic updates when state changes, reducing manual DOM manipulations.</li> </ul> <pre><code>function Greeting() {\n  return &lt;h1&gt;Hello, World!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"react/1.Introduction%20to%20React/#component-based-architecture","title":"Component-Based Architecture","text":"<p>React applications are built using reusable and independent components. Each component manages its own logic and can be composed to build complex UIs.</p> <p>Benefits:</p> <ul> <li>Encourages reusability, reducing redundant code.</li> <li>Enhances maintainability by keeping UI elements modular.</li> <li>Allows for easier debugging and testing.</li> </ul> <pre><code>function Button() {\n  return &lt;button&gt;Click me&lt;/button&gt;;\n}\n</code></pre> <p>Components like &lt; Button /&gt; can be reused throughout the application.</p>"},{"location":"react/1.Introduction%20to%20React/#unidirectional-data-flow","title":"Unidirectional Data Flow","text":"<p>React enforces a one-way data flow, meaning data is passed from parent to child components via props. This ensures a predictable state management system.</p> <p>Benefits:</p> <ul> <li>Easier to track changes and debug issues.</li> <li>Improves application stability and predictability.</li> <li>Simplifies state management when combined with tools like Redux or Context API.</li> </ul> <pre><code>function WelcomeMessage(props) {\n  return &lt;h2&gt;Welcome, {props.name}!&lt;/h2&gt;;\n}\n\nfunction App() {\n  return &lt;WelcomeMessage name=\"Alice\" /&gt;;\n}\n</code></pre> <p>Here, name is passed as a prop from the App component to WelcomeMessage.</p>"},{"location":"react/1.Introduction%20to%20React/#react-fiber-architecture","title":"React Fiber Architecture","text":"<p>React Fiber (introduced in React 16) is a reimplementation of React\u2019s core reconciliation algorithm. It improves rendering performance and responsiveness.</p> <p>Benefits:</p> <ul> <li>Asynchronous rendering for smoother UI updates.</li> <li>Better concurrency handling, enabling features like Suspense and Concurrent Mode.</li> <li>Improved performance for large applications by breaking rendering into smaller units.</li> </ul> <p>Example of Fiber\u2019s Benefits: Supports time slicing, which prioritizes important UI updates over less urgent ones.</p> <p>Enables Suspense for data fetching, allowing parts of the UI to load progressively.</p>"},{"location":"react/1.Introduction%20to%20React/#jsx-for-templating","title":"JSX for Templating","text":"<p>JSX (JavaScript XML) is a syntax extension for JavaScript that allows developers to write UI templates directly within JavaScript code.</p> <p>Benefits:</p> <ul> <li>Makes UI development more intuitive and readable.</li> <li>Allows JavaScript expressions within HTML-like syntax.</li> <li>Enables compile-time optimization, improving performance.</li> </ul> <pre><code>function UserInfo({ name }) {\n  return &lt;p&gt;Hello, {name}!&lt;/p&gt;;\n}\n</code></pre> <p>JSX allows embedding JavaScript ({name}) within HTML-like syntax.</p>"},{"location":"react/1.Introduction%20to%20React/#3-react-vs-other-javascript-frameworks","title":"3. React vs Other JavaScript Frameworks","text":"<p>React is one of the most popular JavaScript libraries, but it is often compared with other frameworks like Angular, Vue, and Svelte. Below is a detailed comparison to help understand how React stands against these alternatives.</p>"},{"location":"react/1.Introduction%20to%20React/#comparison-react-angular-vue-svelte","title":"Comparison: React, Angular, Vue, Svelte","text":"<ul> <li>React: A UI-focused library by Meta with a Virtual DOM for fast rendering. Great for SPAs and mobile apps.</li> <li>Angular: A full-fledged framework by Google with built-in features. Best for large enterprise apps.</li> <li>Vue: A progressive framework with an easy learning curve and two-way data binding. Good for small to medium projects.</li> <li>Svelte: A compiler-based framework with no Virtual DOM, offering the best performance but a smaller ecosystem.</li> </ul>"},{"location":"react/1.Introduction%20to%20React/#4-pros-and-cons-of-react-vs-others","title":"4. Pros and Cons of React vs Others","text":""},{"location":"react/1.Introduction%20to%20React/#react","title":"React","text":"<p>\u2705 Large ecosystem, reusable components, Virtual DOM for speed, React Native for mobile. \u274c JSX has a learning curve, requires additional libraries for routing and state management.  </p>"},{"location":"react/1.Introduction%20to%20React/#angular","title":"Angular","text":"<p>\u2705 Full framework, TypeScript support, scalable. \u274c Steeper learning curve, larger bundle size.  </p>"},{"location":"react/1.Introduction%20to%20React/#vuejs","title":"Vue.js","text":"<p>\u2705 Simple syntax, lightweight, two-way data binding. \u274c Smaller ecosystem, less corporate backing.  </p>"},{"location":"react/1.Introduction%20to%20React/#svelte","title":"Svelte","text":"<p>\u2705 No Virtual DOM, fast performance, small bundle size. \u274c Smaller community, fewer third-party libraries.  </p>"},{"location":"react/1.Introduction%20to%20React/#when-to-choose-react-over-others","title":"When to Choose React Over Others?","text":"<ul> <li>Use React for SPAs, scalable applications, and strong community support.  </li> <li>Choose Angular for large enterprise apps.  </li> <li>Use Vue for small to medium projects with a simple structure.  </li> <li>Opt for Svelte when performance and small bundle size are top priorities.  </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#5-understanding-virtual-dom-vs-real-dom","title":"5. Understanding Virtual DOM vs Real DOM","text":"<p>The Document Object Model (DOM) is a programming interface that represents the structure of a web page as a tree of objects. JavaScript can manipulate the DOM to update content dynamically. However, direct manipulation of the Real DOM is slow and inefficient, which is where the Virtual DOM (VDOM) comes into play.</p>"},{"location":"react/1.Introduction%20to%20React/#how-virtual-dom-works","title":"How Virtual DOM Works","text":"<ul> <li> <p>The Virtual DOM is an in-memory representation of the Real DOM. Instead of modifying the Real DOM directly, React first updates the Virtual DOM, then determines the minimal changes needed and applies those changes efficiently to the Real DOM.</p> </li> <li> <p>When the state of a component changes, React creates a new Virtual DOM tree.</p> </li> <li> <p>React then compares this new tree with the previous Virtual DOM tree using the diffing algorithm.</p> </li> <li> <p>After identifying the changes, React updates only the necessary parts of the Real DOM, minimizing performance costs.</p> </li> <li> <p>Different component types are assumed to generate substantially different trees. React will not attempt to diff them, but rather replace the old tree completely.</p> </li> <li> <p>Diffing of lists is performed using keys. Keys should be \"stable, predictable, and unique.\"</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#the-key-points-are","title":"The key points are","text":"<ul> <li>When building a user interface (UI), not every change needs to happen right away.</li> <li> <p>If we try to update everything instantly, it can make the app slow and laggy, especially during animations.</p> </li> <li> <p><code>Think of it like this:</code> Animations need to run very smoothly \u2014 like 60 times per second \u2014 so they should happen quickly.</p> </li> <li> <p>But other things \u2014 like loading some data or updating a list \u2014 can wait a bit longer.</p> </li> </ul> <p>There are two ways to handle this:</p> <ol> <li> <p>Push-based (you control everything):</p> <ul> <li>You (the programmer) decide when and how things should update.</li> <li>It's more work and easy to make mistakes that slow things down.</li> </ul> </li> <li> <p>Pull-based (React's way):</p> <ul> <li>React looks at all the changes and decides which ones are most important.</li> <li>It chooses what to do first and can even pause or delay some updates.</li> <li>This helps keep the app fast and smooth, especially during animations.</li> </ul> </li> </ol>"},{"location":"react/1.Introduction%20to%20React/#performance-benefits","title":"Performance Benefits","text":"<p>Minimized Repaints and Reflows (colors and sizes changes)</p> <ul> <li>Direct Real DOM updates cause multiple repaints and reflows, leading to poor performance. Virtual DOM minimizes these updates by batching changes.</li> </ul> <p>Efficient Updates via Reconciliation</p> <ul> <li>Instead of updating the entire Real DOM, React selectively updates only the changed elements.</li> </ul> <p>Asynchronous Batch Updates</p> <ul> <li>React batches multiple state updates and processes them efficiently to avoid unnecessary re-renders.</li> </ul>"},{"location":"react/1.Introduction%20to%20React/#diffing-algorithm-in-react","title":"Diffing Algorithm in React","text":"<p>The diffing algorithm, also known as Reconciliation, is used to determine the difference between the new Virtual DOM and the previous one. Key aspects of this algorithm include:</p> <ul> <li>Element Type Comparison</li> </ul> <p>If elements are of different types (e.g., &lt; div&gt; \u2192 &lt; span&gt;), React destroys the old element and creates a new one.</p> <ul> <li>Reordering Optimization with Keys</li> </ul> <p>React uses keys (unique identifiers) to track elements efficiently in lists, preventing unnecessary re-renders.</p> <ul> <li>Component Tree Optimization</li> </ul> <p>React recursively compares subtrees and updates only the necessary branches.</p>"},{"location":"react/1.Introduction%20to%20React/#6-react-ecosystem-overview","title":"6. React Ecosystem Overview","text":"<p>React is a powerful JavaScript library for building interactive user interfaces. The React ecosystem includes various frameworks, libraries, and tools that enhance development efficiency and flexibility.</p>"},{"location":"react/1.Introduction%20to%20React/#core-technologies-in-the-react-ecosystem","title":"Core Technologies in the React Ecosystem","text":"<ul> <li> <p>React A JavaScript library for building UI components with a declarative approach. Uses a Virtual DOM to optimize rendering. Based on component-based architecture.</p> </li> <li> <p>ReactDOM Provides the necessary APIs to render React components in the browser. Bridges the gap between React and the Real DOM. Handles event delegation and component mounting/unmounting.</p> </li> <li> <p>React Native Enables React development for mobile applications (iOS &amp; Android). Uses native components instead of web-based elements. Bridges JavaScript code with native APIs.</p> </li> <li> <p>Next.js A React framework that enables server-side rendering (SSR), static site generation (SSG), and hybrid rendering. Enhances SEO and performance. Includes API routes, file-based routing, and built-in optimizations.</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#key-libraries-and-tools-in-the-react-ecosystem","title":"Key Libraries and Tools in the React Ecosystem","text":"<ul> <li> <p>State Management Redux \u2013 A centralized state management library based on the Flux architecture. Recoil \u2013 Simplifies state management with atom-based state sharing. Zustand \u2013 A lightweight alternative to Redux with minimal boilerplate.</p> </li> <li> <p>Routing React Router \u2013 Enables client-side routing for React applications with dynamic URLs.</p> </li> <li> <p>UI Component Libraries Material UI \u2013 A popular component library based on Google\u2019s Material Design. Chakra UI \u2013 A customizable and accessible UI library. Ant Design \u2013 A UI library with enterprise-level components.</p> </li> <li> <p>Other Tools React Query \u2013 Manages data fetching, caching, and synchronization. Storybook \u2013 A tool for building and testing UI components in isolation. Jest &amp; React Testing Library \u2013 Used for unit and integration testing.</p> </li> </ul>"},{"location":"react/1.Introduction%20to%20React/#server-components-vs-client-components","title":"Server Components vs Client Components","text":"<ul> <li>React introduced Server Components to improve performance by reducing JavaScript bundle sizes.</li> </ul> <p>Server Components</p> <ul> <li>Rendered on the server and sent as static HTML to the client.</li> <li>Do not include client-side JavaScript, reducing the bundle size.</li> <li>Ideal for fetching data before sending content to the client.</li> </ul> <p>Client Components</p> <ul> <li>Rendered entirely in the browser.</li> <li>Necessary for interactive elements (e.g., buttons, forms).</li> <li>Can use hooks like useState and useEffect.</li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/","title":"10.5.Redux Toolkit","text":""},{"location":"react/10.5.Redux%20Toolkit/#redux-toolkit-state-management","title":"Redux Toolkit (State Management)","text":"<ul> <li>1\ufe0f\u20e3 Introduction to RTK</li> </ul> Concept Description What is RTK? Official, opinionated Redux library to simplify store setup and state logic. Why RTK? Reduces boilerplate, handles async logic, integrates DevTools &amp; middleware. <ul> <li>2\ufe0f\u20e3 Store Setup</li> </ul> Concept Description <code>configureStore</code> Creates the Redux store with preconfigured settings. <code>combineReducers</code> Combines multiple slices (used if needed). <code>Provider</code> Component Makes the store accessible to React components. <ul> <li>3\ufe0f\u20e3 Slices: State + Actions + Reducers</li> </ul> Concept Description <code>createSlice</code> Auto-generates actions and reducers from slice definition. <code>name</code> Name of the slice (used in action types). <code>initialState</code> Initial state of the slice. <code>reducers</code> Synchronous state mutation logic. <code>actions</code> Auto-generated action creators from reducer keys. <ul> <li>4\ufe0f\u20e3 Accessing State and Dispatching Actions</li> </ul> Concept Description <code>useSelector</code> Read data from the Redux store. <code>useDispatch</code> Dispatch actions from components. Selectors Pure functions to select parts of the state. <ul> <li>5\ufe0f\u20e3 Async Logic with <code>createAsyncThunk</code></li> </ul> Concept Description <code>createAsyncThunk</code> Handles async logic and auto-generates action types. <code>pending</code> Triggered when the request starts. <code>fulfilled</code> Triggered when the request succeeds. <code>rejected</code> Triggered when the request fails. <code>extraReducers</code> Used to handle these action states inside the slice. <ul> <li>6\ufe0f\u20e3 RTK Query (Built-In Data Fetching)</li> </ul> Concept Description <code>createApi</code> Defines endpoints for fetching/mutating server data. Auto Cache Automatically caches and invalidates queries. Auto Hooks Generates hooks like <code>useGetPostsQuery</code>. Realtime Updates Uses polling or WebSockets with <code>refetchOnMountOrArgChange</code>. <ul> <li>7\ufe0f\u20e3 Entity Adapter</li> </ul> Concept Description <code>createEntityAdapter</code> Manages normalized state with built-in CRUD helpers and selectors. <code>setAll</code>, <code>addOne</code> Immutable helper functions to manage entity collections. <code>getSelectors</code> Returns optimized selectors like <code>selectById</code>, <code>selectAll</code>. Normalized State Improves performance and simplifies updates. <ul> <li>8\ufe0f\u20e3 Middleware (Built-In and Custom)</li> </ul> Middleware Purpose Redux Thunk Enables <code>createAsyncThunk</code> for async logic. Included by default in RTK. Listener Middleware React to specific actions outside reducers (side effects). RTK Query Middleware Manages caching, invalidation, polling, and subscriptions. <ul> <li>9\ufe0f\u20e3 Best Practices</li> </ul> Practice Why Co-locate logic per feature Maintainable, modular structure. Keep state normalized Easier updates and caching. Keep slices focused Smaller, maintainable reducer logic. Use RTK Query for async data Handles caching and status automatically. <ul> <li>\ud83d\udd1f Common RTK Techniques</li> </ul> Technique Description Selectors + useSelector Extract state efficiently with memoization. useDispatch + Thunks Trigger async or complex actions from components. Component-level loading/error Show UI feedback based on request status. Error Handling via matchers Centralize error handling in <code>extraReducers</code>."},{"location":"react/10.5.Redux%20Toolkit/#1-introduction-to-redux","title":"1\ufe0f\u20e3 Introduction to Redux","text":"<p>\ud83d\udd39 What is Redux? Redux is a predictable state container for JavaScript apps, often used with React to manage application-level state.</p> <p>\ud83d\udd39 Why Use Redux? Redux helps manage complex state logic and enables easier debugging, testing, and scaling in large apps.</p>"},{"location":"react/10.5.Redux%20Toolkit/#improvements-in-rtk-over-redux","title":"\u2705 Improvements in RTK Over Redux","text":"<ul> <li>\ud83e\uddf1 Less Boilerplate: <code>createSlice()</code> handles action types, creators, and reducers together.</li> <li>\u2699\ufe0f configureStore(): Simplifies store setup with good defaults.</li> <li>\ud83e\udde0 Immer Integration: Allows mutation-like code while keeping state immutable.</li> <li>\ud83d\ude80 Built-in Async Support: <code>createAsyncThunk()</code> handles API calls elegantly.</li> <li>\ud83e\uddea RTK Query: Powerful built-in solution for data fetching and caching.</li> <li>\ud83e\uddf0 DevTools Ready: Comes with Redux DevTools and middleware out-of-the-box.</li> <li>\ud83d\udd10 Strong Typing: Native TypeScript support with clear types.</li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#redux-principles","title":"\ud83d\udd39 Redux Principles","text":"<ul> <li>Single Source of Truth: The state of your whole application is stored in an object tree within a single store.</li> <li>Single Source of Truth (SSOT) means all your application\u2019s state is stored in one centralized place, typically in a global store like Redux.</li> <li>Instead of spreading state across multiple components, everything is managed from this single source.</li> <li>State is Read-Only: The only way to change the state is to emit an action.</li> <li>Changes are Made with Pure Functions: Reducers are pure functions that take the previous state and action and return the next state.</li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#comparing-redux-with-context-api","title":"\ud83d\udd39 Comparing Redux with Context API","text":"Feature Context API Redux Purpose Sharing simple global state Managing complex state Performance Re-renders all consumers Fine-grained updates DevTools No built-in tools Time-travel, logging, inspection Middleware Support No Yes (Thunk, Saga, etc.) Boilerplate Less More <p>Redux Flow Normal </p> <p><code>onClick() --&gt; hnaldeClick() --&gt; Action Dispatch --&gt; Store --&gt; Reducer --&gt; Logic Execute --&gt; Store --&gt; State Update --&gt; UI Update</code></p> <p>Redux Flow with API calls </p> <ul> <li>go to RTK website first -- https://redux-toolkit.js.org/</li> <li>go to Store SetUp -- https://redux-toolkit.js.org/api/configureStore</li> <li> <p>go to Reducers and Actions -- https://redux-toolkit.js.org/api/createReducer</p> </li> <li> <p>redux RTK install -- <code>npm install @reduxjs/toolkit</code></p> </li> <li>react bindings install -- <code>npm install react-redux</code></li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#redux-toolkit-basic-setup-in-react","title":"\ud83d\udee0\ufe0f Redux Toolkit Basic Setup in React","text":"<p>Redux Toolkit (RTK) simplifies Redux development by reducing boilerplate and including useful utilities like <code>createSlice</code>, <code>configureStore</code>, and <code>createAsyncThunk</code>.</p>"},{"location":"react/10.5.Redux%20Toolkit/#folder-structure-react","title":"\ud83d\udcc1 Folder Structure (React)","text":"<pre><code>src/\n\u251c\u2500\u2500 app/\n\u2502    \u2514\u2500\u2500 store.js             # Configures and exports the Redux store with all slice reducers.\n\u2502\n\u251c\u2500\u2500 features/\n\u2502 \u2514\u2500\u2500 todo/\n\u2502 |    \u251c\u2500\u2500 todoSlice.js       # Defines todo state, actions, and reducers using createSlice.\n\u2502 |    \u251c\u2500\u2500 todoAPI.js         # Handles API calls. (if using RTK Query or other async logic).\n\u2502 |    \u251c\u2500\u2500 todoSelectors.js   # Provides reusable selectors. (if you have complex selectors)\n\u2502 |    \u2514\u2500\u2500 todoActions.js     # Action creators (Optional if needed separately)\n\u2502 |\n\u2502 \u2514\u2500\u2500 user/\n\u2502      \u251c\u2500\u2500 userSlice.js       # Defines user state, login/logout actions, and reducers.\n\u2502      \u251c\u2500\u2500 userAPI.js         # Handles API calls. (if using RTK Query or other async logic)\n\u2502      \u251c\u2500\u2500 userSelectors.js   # Provides reusable selectors. (if you have complex selectors)\n\u2502      \u2514\u2500\u2500 userActions.js     # Action creators (Optional if needed separately)\n\u2502\n\u251c\u2500\u2500 App.jsx      # Root React component that renders the main app layout.\n\u2514\u2500\u2500 main.jsx     # Application entry point that renders &lt;App /&gt; and wraps it in &lt;Provider&gt;.\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#1-install-redux-toolkit-and-react-redux","title":"1\ufe0f\u20e3 Install Redux Toolkit and React-Redux","text":"<pre><code>npm install @reduxjs/toolkit react-redux\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#2-create-a-slice","title":"2\ufe0f\u20e3 Create a Slice","text":"<pre><code>//\ud83d\udcc4 src/features/counter/counterSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  value: 0,\n};\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) =&gt; {\n      state.value += 1;\n    },\n    decrement: (state) =&gt; {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) =&gt; {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\nexport default counterSlice.reducer;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#3-configure-the-store","title":"3\ufe0f\u20e3 Configure the Store","text":"<pre><code>//\ud83d\udcc4 src/app/store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#4-provide-the-store-to-react-globally","title":"4\ufe0f\u20e3 Provide the Store to React Globally","text":"<pre><code>// \ud83d\udcc4 src/main.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;Provider store={store}&gt;\n      &lt;App /&gt;\n    &lt;/Provider&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#5-use-redux-state-and-actions-in-components","title":"5\ufe0f\u20e3 Use Redux State and Actions in Components","text":"<pre><code>//\ud83d\udcc4 src/features/counter/Counter.jsx\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement, incrementByAmount } from './counterSlice';\n\nfunction Counter() {\n  const count = useSelector((state) =&gt; state.counter.value);\n  const dispatch = useDispatch();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; dispatch(increment())}&gt;+1&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(decrement())}&gt;-1&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(incrementByAmount(5))}&gt;+5&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#6-use-the-component","title":"6\ufe0f\u20e3 Use the Component","text":"<pre><code>//\ud83d\udcc4 src/App.jsx\nimport React from 'react';\nimport Counter from './features/counter/Counter';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Redux Toolkit Example&lt;/h1&gt;\n      &lt;Counter /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#redux-toolkit-react-typescript-setup","title":"\ud83e\udde9 Redux Toolkit + React + TypeScript Setup","text":"<p>Using Redux Toolkit with TypeScript gives you full type safety and better developer experience when managing state.</p>"},{"location":"react/10.5.Redux%20Toolkit/#folder-structure-react-typescript","title":"\ud83d\udcc1 Folder Structure React TypeScript","text":"<pre><code>src/\n\u251c\u2500\u2500 app/\n\u2502 \u2514\u2500\u2500 store.ts\n\u2502\n\u251c\u2500\u2500 features/\n\u2502 \u2514\u2500\u2500 counter/\n\u2502 \u251c\u2500\u2500 counterSlice.ts\n\u2502 \u2514\u2500\u2500 Counter.tsx\n\u2502\n\u251c\u2500\u2500 App.tsx\n\u2514\u2500\u2500 main.tsx\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#1-install-redux-toolkit-react-redux-and-types","title":"1\ufe0f\u20e3 Install Redux Toolkit, React-Redux and types","text":"<pre><code>npm install @reduxjs/toolkit react-redux\nnpm install --save-dev @types/react-redux\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#2-create-a-slice-with-types","title":"2\ufe0f\u20e3 Create a Slice with Types","text":"<pre><code>//\ud83d\udcc4 src/features/counter/counterSlice.ts\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) =&gt; {\n      state.value += 1;\n    },\n    decrement: (state) =&gt; {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction&lt;number&gt;) =&gt; {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\nexport default counterSlice.reducer;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#3-configure-the-store-with-types","title":"3\ufe0f\u20e3 Configure the Store with Types","text":"<pre><code>//\ud83d\udcc4 src/app/store.ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\n// Infer RootState and AppDispatch types from the store\nexport type RootState = ReturnType&lt;typeof store.getState&gt;;\nexport type AppDispatch = typeof store.dispatch;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#4-setup-typed-hooks","title":"4\ufe0f\u20e3 Setup Typed Hooks","text":"<pre><code>// \ud83d\udcc4 src/app/hooks.ts\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch: () =&gt; AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook&lt;RootState&gt; = useSelector;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#5-provide-the-store-globally","title":"5\ufe0f\u20e3 Provide the Store Globally","text":"<pre><code>//\ud83d\udcc4 src/main.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;Provider store={store}&gt;\n      &lt;App /&gt;\n    &lt;/Provider&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#6-use-redux-in-a-component-with-typescript","title":"6\ufe0f\u20e3 Use Redux in a Component with TypeScript","text":"<pre><code>//\ud83d\udcc4 src/features/counter/Counter.tsx\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { increment, decrement, incrementByAmount } from './counterSlice';\n\nconst Counter: React.FC = () =&gt; {\n  const count = useAppSelector((state) =&gt; state.counter.value);\n  const dispatch = useAppDispatch();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; dispatch(increment())}&gt;+1&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(decrement())}&gt;-1&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(incrementByAmount(5))}&gt;+5&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre> <ul> <li>import it to App.tsx</li> </ul> <pre><code>//\ud83d\udcc4 src/App.tsx\nimport React from 'react';\nimport Counter from './features/counter/Counter';\n\nconst App: React.FC = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Redux Toolkit + TypeScript&lt;/h1&gt;\n      &lt;Counter /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#5-async-logic-with-createasyncthunk","title":"5\ufe0f\u20e3 Async Logic with <code>createAsyncThunk</code>","text":""},{"location":"react/10.5.Redux%20Toolkit/#latest-recommended-rtk-folder-structure-and-process","title":"\u2705 Latest &amp; Recommended RTK Folder Structure and Process","text":"<pre><code>src/\n\u251c\u2500\u2500 app/\n\u2502    \u2514\u2500\u2500 store.js\n\u251c\u2500\u2500 features/\n\u2502    \u2514\u2500\u2500 users/\n\u2502         \u251c\u2500\u2500 usersSlice.js        # Slice + async thunk inside\n\u2502         \u251c\u2500\u2500 usersAPI.js          # API calls (optional if small, else inline in thunk)\n\u2502         \u251c\u2500\u2500 usersSelectors.js    # Selectors (optional if small, can be inside slice)\n\u2502         \u2514\u2500\u2500 index.js             # (Optional) re-export everything from here\n\u251c\u2500\u2500 components/\n\u2502    \u2514\u2500\u2500 UsersList.jsx\n\u2514\u2500\u2500 main.jsx\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#first-define-the-api","title":"First Define the API","text":"<pre><code>// src/features/users/usersAPI.js\nexport const fetchUsersAPI = async () =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  if (!res.ok) throw new Error(\"Failed to fetch the users\");\n  return await res.json();\n};\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#createasyncthunk-what-is-it","title":"createAsyncThunk \u2013 What is it?","text":"<ul> <li>createAsyncThunk is a helper from RTK that simplifies handling asynchronous operations like API requests.</li> <li>It automatically generates action types and handles pending, fulfilled, and rejected states.</li> <li>returns a function instead of an action.</li> </ul> <p>\u2705 Benefits of createAsyncThunk</p> <ul> <li>\ud83d\udce6 Bundles async flow into one utility</li> <li>\u2705 Auto-generates action types</li> <li>\ud83d\udcd8 Clean and readable logic</li> <li>\ud83d\udd12 Strong typing support (with TypeScript)</li> </ul> <p>\ud83d\udd04 Behind the Scenes It generates 3 actions:</p> <ul> <li>users/fetchPosts/pending</li> <li>users/fetchPosts/fulfilled</li> <li>users/fetchPosts/rejected</li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#use-createasyncthunk-and-handle-extra-reducers-via-extrareducers-in-usersslicejs","title":"Use <code>createAsyncThunk</code> and handle extra reducers via <code>extraReducers</code> in usersSlice.js","text":"<p>\ud83e\udde9 Using in extraReducers</p> <pre><code>//src/features/users/usersSlice.js\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchUsersAPI } from \"./usersAPI\";\n\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () =&gt; {\n  return await fetchUsersAPI();\n});\n\nconst usersSlice = createSlice({\n  name: \"usersmodern\",\n  initialState: {\n    list: [],\n    status: \"idle\",\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) =&gt; {\n    builder\n      .addCase(fetchUsers.pending, (state) =&gt; {\n        state.status = \"loading\";\n      })\n      .addCase(fetchUsers.fulfilled, (state, action) =&gt; {\n        state.status = \"succeeded\";\n        state.list = action.payload;\n      })\n      .addCase(fetchUsers.rejected, (state, action) =&gt; {\n        state.status = \"failed\";\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default usersSlice.reducer;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#export-the-selectors-to-access-the-state-easely","title":"Export the selectors to access the state easely","text":"<pre><code>//src/features/users/usersSelectors.js\nexport const selectAllUsers = (state) =&gt; state.usersmodern.list;\nexport const selectUsersStatus = (state) =&gt; state.usersmodern.status;\nexport const selectUsersError = (state) =&gt; state.usersmodern.error;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#add-it-to-the-store","title":"Add it to the Store","text":"<pre><code>//src/app/store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport usersReducer from '../features/users/usersSlice';\n\nexport const store = configureStore({\n  reducer: {\n    users: usersReducer,\n  },\n});\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#use-in-component","title":"Use in Component","text":"<pre><code>//src/components/UsersList.jsx\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUsers } from \"../features/users/usersSlice\";\nimport {\n  selectAllUsers,\n  selectUsersStatus,\n  selectUsersError,\n} from \"../features/users/usersSelectors\";\n\nexport default function UsersList() {\n  const dispatch = useDispatch();\n  const users = useSelector(selectAllUsers);\n  const status = useSelector(selectUsersStatus);\n  const error = useSelector(selectUsersError);\n\n  useEffect(() =&gt; {\n    if (status === \"idle\") {\n      dispatch(fetchUsers());\n    }\n  }, [status, dispatch]);\n\n  return (\n    &lt;div className=\"p-6\"&gt;\n      &lt;h2 className=\"text-2xl font-bold mb-4\"&gt;Users List&lt;/h2&gt;\n\n      {status === \"loading\" &amp;&amp; &lt;p className=\"text-blue-500\"&gt;Loading...&lt;/p&gt;}\n      {status === \"failed\" &amp;&amp; (\n        &lt;p className=\"text-red-500\"&gt;Error: {error}&lt;/p&gt;\n      )}\n      {status === \"succeeded\" &amp;&amp; (\n        &lt;div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n          {users.map((user) =&gt; (\n            &lt;div\n              key={user.id}\n              className=\"p-4 bg-green-100 shadow rounded-lg border\"\n            &gt;\n              &lt;h3 className=\"text-black text-lg font-semibold\"&gt;{user.name}&lt;/h3&gt;\n              &lt;p className=\"text-gray-600\"&gt;{user.email}&lt;/p&gt;\n              &lt;p className=\"text-sm text-gray-500\"&gt;{user.company.name}&lt;/p&gt;\n            &lt;/div&gt;\n          ))}\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#latest-minimal-rtk-structure-and-process","title":"\u2705 Latest &amp; Minimal RTK Structure and Process","text":"<pre><code>src/\n \u251c\u2500\u2500 app/\n \u2502    \u2514\u2500\u2500 store.js\n \u251c\u2500\u2500 features/\n \u2502    \u2514\u2500\u2500 users/\n \u2502         \u2514\u2500\u2500 usersSlice.js        # Slice + async thunk + initial state\n \u251c\u2500\u2500 components/\n \u2502    \u2514\u2500\u2500 UsersList.jsx\n \u251c\u2500\u2500 App.jsx\n \u2514\u2500\u2500 main.jsx\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#first-define-the-usersslicejs","title":"First Define the usersSlice.js","text":"<pre><code>//src/features/users/usersSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchUsers = createAsyncThunk(\n  'users/fetchUsers',\n  async () =&gt; {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\n    if (!res.ok) throw new Error('Failed to fetch users');\n    return res.json();\n  }\n);\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    data: [],\n    loading: false,\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) =&gt; {\n    builder\n      .addCase(fetchUsers.pending, (state) =&gt; {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchUsers.fulfilled, (state, action) =&gt; {\n        state.loading = false;\n        state.data = action.payload;\n      })\n      .addCase(fetchUsers.rejected, (state, action) =&gt; {\n        state.loading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default usersSlice.reducer;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#add-it-in-store","title":"Add it in store","text":"<pre><code>//src/app/store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport usersReducer from '../features/users/usersSlice';\n\nexport const store = configureStore({\n  reducer: {\n    users: usersReducer,\n  },\n});\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#create-the-component","title":"Create the Component","text":"<pre><code>//src/components/UsersList.jsx\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchUsers } from '../features/users/usersSlice';\n\nexport default function UsersList() {\n  const dispatch = useDispatch();\n  const { data, loading, error } = useSelector((state) =&gt; state.users);\n\n  useEffect(() =&gt; {\n    dispatch(fetchUsers());\n  }, [dispatch]);\n\n  if (loading) return &lt;p className=\"text-blue-500\"&gt;Loading...&lt;/p&gt;;\n  if (error) return &lt;p className=\"text-red-500\"&gt;{error}&lt;/p&gt;;\n\n  return (\n    &lt;div className=\"p-4 grid grid-cols-1 gap-4\"&gt;\n      {data.map((user) =&gt; (\n        &lt;div key={user.id} className=\"p-4 border rounded-lg shadow hover:shadow-lg transition\"&gt;\n          &lt;h2 className=\"font-bold text-lg\"&gt;{user.name}&lt;/h2&gt;\n          &lt;p className=\"text-gray-600\"&gt;{user.email}&lt;/p&gt;\n          &lt;p className=\"text-gray-500 text-sm\"&gt;{user.company.name}&lt;/p&gt;\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#6-rtk-query-built-in-data-fetching","title":"6\ufe0f\u20e3 RTK Query (Built-In Data Fetching)","text":"<ul> <li>Install JSON Server and axios for learning here only</li> <li> <p><code>npm i axios</code> and <code>npm i json-server</code></p> </li> <li> <p>Then go to -- https://www.npmjs.com/package/json-server</p> </li> <li>To learn the commands of json-server</li> <li>To run the server <code>npx json-server db.json</code></li> <li> <p>Run <code>json-server --help</code> for a list of options</p> </li> <li> <p>Now run the server using <code>npx json-server db.json</code></p> </li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#create-a-service-file-in-services","title":"create a service file in services","text":"<pre><code>//src/services/localJsonServerUserApi.js\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const localJsonServerUserApi = createApi({\n    // reducerPath is the string name to represent our API, whenever we want to get the data from it.\n    reducerPath: 'api',\n    // baseQuery is the initial base URL to the API we are using\n    baseQuery: fetchBaseQuery({\n        baseUrl: \"http://localhost:3000/\"\n    }),\n\n    // Cache the data for 20 sec\n    // keepUnusedDataFor: 20,\n\n    endpoints: (builder) =&gt; ({\n        // Query and fetch the users\n        // getUsers: builder.query({query: (id) =&gt; `users/${id}`}),\n        getUsers: builder.query({ query: () =&gt; \"users\" }),\n        // for specific query cache\n        // getUsers: builder.query({query: () =&gt; \"users\", keepUnusedDataFor: 5}),\n\n        // Add an user and Update the users\n        AddUser: builder.mutation({\n            query: (newUser) =&gt; ({\n                url: \"users\",\n                method: \"POST\",\n                body: newUser,\n            })\n        }),\n    })\n})\n\n// you must write -- use + 'Query Name' + Query\n// you must write -- use + 'Mutation Name' + Mutation\nexport const { useGetUsersQuery, useAddUserMutation } = localJsonServerUserApi;\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#add-it-to-store","title":"Add it to store","text":"<pre><code>// src/app/store.js\nimport {configureStore} from '@reduxjs/toolkit'\n// imports for redux query\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { localJsonServerUserApi } from '../services/localJsonServerUserApi'\n\n// Create the Store\nexport const store = configureStore({\n    reducer: {\n        // For APIs using Redux Query\n        // For API using JSONServer\n        [localJsonServerUserApi.reducerPath]: localJsonServerUserApi.reducer,\n    },\n    // middleware\n    // it enables caching, automatic refetching, and request lifecycle handling.\n    // Without it, your queries and mutations won\u2019t work properly even if the reducers are set up.\n    middleware: (getDefaultMiddleware) =&gt;\n        getDefaultMiddleware()\n            // middleware for APIs using Redux Query for localhost json server\n            .concat(localJsonServerUserApi.middleware)\n});\n\n// setupListeners\nsetupListeners(store.dispatch);\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#use-in-any-component","title":"use in any component","text":"<pre><code>// src/components/JsonServerUserWithReduxQuery.jsx\nimport { useState } from 'react'\nimport { useAddUserMutation, useGetUsersQuery } from '../services/localJsonServerUserApi'\n\nconst JsonSeverUserWithReactQuery = () =&gt; {\n    const [formData, setFormData] = useState({name: '', email: ''});\n    const [addUser] = useAddUserMutation();\n    // to refetch the users at some specific time use refetch \n    const { data: users, isLoading, error, refetch } = useGetUsersQuery()\n    if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;\n    if (error) return &lt;div&gt;There was an error :( : {error.message}&lt;/div&gt;\n\n    const handleChange = (e) =&gt; {\n        e.preventDefault();\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value,\n            [e.target.email]: e.target.email,\n        })\n    }\n\n    const handleSubmit = async (e) =&gt; {\n        e.preventDefault();\n        if (!formData.name || !formData.email) return;\n        await addUser(formData);\n        // to refetch the users data after you create a post use refetch()\n        refetch();\n        setFormData({name: '', email: ''})\n    }\n\n    return (\n        &lt;div className='text-white'&gt;\n            &lt;h2 className='text-2xl text-indigo-400'&gt;\n                To use this component first run the JSON Server in another terminal &lt;br /&gt;\n                use this command -- &lt;span className='text-blue-500'&gt;npx json-server db.json&lt;/span&gt; &lt;br /&gt;\n                Then open localhost 3000 to see changes\n            &lt;/h2&gt;\n            &lt;h2 className='text-2xl my-6'&gt; User Form&lt;/h2&gt;\n            &lt;form \n                className='flex flex-col gap-4 bg-gray-700 p-4 m-8 w-fit \n                items-center mx-auto rounded-lg'\n                onSubmit={handleSubmit}\n            &gt;\n                &lt;input\n                    name='name'\n                    className='p-2 bg-zinc-900 rounded-lg'\n                    type=\"text\"\n                    placeholder='Enter your name'\n                    value={formData.name}\n                    // onChange={(e) =&gt; setFormData({...formData, name: e.target.value})}\n                    onChange={handleChange} // better for dynamic keys\n                    /&gt;\n                &lt;input\n                    name='email'\n                    className='p-2 bg-zinc-900 rounded-lg'\n                    type=\"email\"\n                    placeholder='Enter your email'\n                    value={formData.email}\n                    // onChange={(e) =&gt; setFormData({...formData, email: e.target.value})}\n                    onChange={handleChange} // better for dynamic keys\n                /&gt;\n                &lt;button type='submit'&gt;Log In&lt;/button&gt;\n            &lt;/form&gt;\n            &lt;h2 className='text-2xl my-6'&gt; User List&lt;/h2&gt;\n            &lt;ul className='list-decimal text-start space-y-2'&gt;\n                {users.map(user =&gt; (\n                    &lt;li key={user.id} className='p-2 bg-gray-700 rounded'&gt;\n                        {user.name} - {user.email}\n                    &lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default JsonSeverUserWithReactQuery\n</code></pre>"},{"location":"react/10.5.Redux%20Toolkit/#difference-between-redux-thunk-and-redux-query","title":"Difference between Redux Thunk and Redux Query","text":"Feature Redux Thunk RTK Query Purpose General-purpose middleware for async logic in Redux (e.g., API calls, delayed actions, conditional dispatch). Specialized data fetching &amp; caching tool built into Redux Toolkit. Boilerplate More boilerplate \u2014 you manually write actions, reducers, and async logic. Minimal boilerplate \u2014 just define API endpoints, and hooks are auto-generated. Caching No caching out of the box (you must implement manually). Built-in caching, deduplication, and automatic background refetching. Data Management You manage state manually in reducers. Automatically stores API data in Redux state and updates UI. Flexibility Can handle any kind of async work, not just fetching. Optimized for CRUD-style API calls; not ideal for unrelated async logic. Setup Complexity More manual wiring needed. Faster setup for API-driven apps. When to Use If your async work is not mainly API fetching, or if you want full control over Redux flow. If your app\u2019s main async work is API calls and you want caching + auto updates."},{"location":"react/10.5.Redux%20Toolkit/#summary","title":"Summary","text":"<ul> <li> <p>Redux Thunk is a general-purpose async middleware \u2014 you can use it for any asynchronous logic, not just API calls.</p> </li> <li> <p>RTK Query is specialized for API fetching and caching \u2014 it\u2019s built into Redux Toolkit and is much faster to set up for data fetching.</p> </li> <li> <p>If your async logic = mostly API fetching \u2192 RTK Query can replace Thunk.</p> </li> <li> <p>If your async logic = more than just API calls \u2192 You might still need Thunk alongside RTK Query.</p> </li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#7-entity-adapter","title":"7\ufe0f\u20e3 Entity Adapter","text":""},{"location":"react/10.5.Redux%20Toolkit/#what-is-an-entity-adapter","title":"\ud83d\udccc What is an Entity Adapter?","text":"<ul> <li>An Entity Adapter in Redux Toolkit is a utility from @reduxjs/toolkit that helps you manage collections of items in normalized form.</li> <li>For small to medium apps with RTK Query handling data fetching: 2/10 (rarely needed)</li> <li>For large apps with complex caching, relational data, or offline editing: 8/10 (very useful)</li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#8-middleware-built-in-and-custom","title":"8\ufe0f\u20e3 Middleware (Built-In and Custom)","text":""},{"location":"react/10.5.Redux%20Toolkit/#what-is-redux-middleware","title":"What is Redux Middleware?","text":"<ul> <li>Middleware in Redux is like a checkpoint between dispatching an action and the reducer updating the state.</li> <li> <p>It can intercept, log, modify, delay, or even stop actions before they reach the reducers.</p> </li> <li> <p><code>dispatch(action) \u2192 [middleware pipeline] \u2192 reducer \u2192 store update</code></p> </li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#why-middleware-exists","title":"Why Middleware Exists","text":"<ul> <li>Without middleware, Redux only supports synchronous actions. Middleware enables:</li> <li>Async actions (e.g., API calls with Redux Thunk, RTK Query)</li> <li>Logging &amp; debugging (e.g., redux-logger)</li> <li>1\ufe0f\u20e3 redux-thunk<ul> <li><code>Purpose</code> \u2192 Allows dispatching asynchronous actions (functions) instead of plain objects.</li> <li><code>Usage</code> \u2192 Fetching data from an API before updating the store.</li> <li><code>Why Popular?</code> \u2192 Simple, built-in with RTK, works for most async needs.</li> </ul> </li> <li>2\ufe0f\u20e3 redux-logger (alternatively we simply use redux DevTools)<ul> <li><code>Purpose</code> \u2192 Logs actions and state changes in the console for debugging.</li> <li><code>Usage</code> \u2192 Easy to see what actions are dispatched and how state changes.</li> <li><code>Why Popular?</code> \u2192 Great for development debugging.</li> </ul> </li> <li>3\ufe0f\u20e3 RTK Query middleware<ul> <li><code>Purpose</code> \u2192 Handles caching, data fetching, and invalidation automatically.</li> <li><code>Usage</code> \u2192 Added when using createApi in Redux Toolkit Query.</li> <li><code>Why Popular?</code> \u2192 Reduces boilerplate for async API calls.</li> </ul> </li> <li>4\ufe0f\u20e3 Custom middleware<ul> <li><code>Purpose</code> \u2192 Intercept or modify actions before they reach reducers.</li> <li><code>Usage</code> \u2192 Analytics tracking, logging to a file, API error handling.</li> </ul> </li> </ul>"},{"location":"react/10.5.Redux%20Toolkit/#9-best-practices","title":"9\ufe0f\u20e3 Best Practices","text":"<ul> <li> <p>Co-locate logic per feature </p> <ul> <li>Keep slice, components, styles, and tests for a feature in the same folder.  </li> <li>Makes finding and updating code easier.</li> </ul> </li> <li> <p>Keep state normalized </p> <ul> <li>Store data by IDs instead of nesting objects deeply.  </li> <li>Improves update performance and makes lookups faster.</li> </ul> </li> <li> <p>Example of normalized state </p> </li> </ul> <pre><code>users: { 1: { id: 1, name: \"Alice\" } }\nposts: { 101: { id: 101, text: \"Hi\", userId: 1 } }\n</code></pre> <ul> <li> <p>Keep slices focused</p> <ul> <li>One slice should handle one specific domain (users, products, orders).</li> <li>Prevents giant, hard-to-maintain files.</li> </ul> </li> <li> <p>Use RTK Query for async data</p> <ul> <li>Handles loading, error, caching, and re-fetching automatically.</li> <li>Reduces boilerplate and keeps slices clean.</li> </ul> </li> </ul> <p>Result       - Your Redux code will be organized, maintainable, fast, and less buggy.</p>"},{"location":"react/10.5.Redux%20Toolkit/#common-rtk-techniques","title":"\ud83d\udd1f Common RTK Techniques","text":"<ol> <li> <p>Selectors + useSelector    Use selectors to read state from Redux.    Combine with <code>useSelector</code> to subscribe components only to what they need, improving performance.</p> </li> <li> <p>useDispatch + Thunks    Use <code>useDispatch</code> to send actions, and thunks for async logic (like API calls).    Keeps components clean by moving side effects into thunks.</p> </li> <li> <p>Component-level loading/error    Show loading spinners or error messages based on request status in state.    Improves user experience with clear feedback.</p> </li> <li> <p>Error Handling via matchers    Use <code>addMatcher</code> in <code>extraReducers</code> to handle errors from multiple thunks in one place.    Reduces repetitive error-handling code.</p> </li> </ol>"},{"location":"react/10.6.Zustand/","title":"10.6.Zustand","text":""},{"location":"react/10.6.Zustand/#zustand-state-management","title":"Zustand (State Management)","text":""},{"location":"react/10.6.Zustand/#1-introduction-core-concepts","title":"1. Introduction &amp; Core Concepts","text":""},{"location":"react/10.6.Zustand/#what-is-zustand","title":"What is Zustand?","text":"<ul> <li>Zustand is a tiny, unopinionated state-management library for React (and React Native) that exposes a simple hook-based API.</li> <li>Instead of reducers, action types, or Providers, you create a store with <code>create()</code> and consume it with a hook</li> <li>e.g. <code>const count = useStore(s =&gt; s.count)</code>.</li> <li>It's designed to be minimal, fast, and flexible so you can adopt it incrementally.</li> </ul>"},{"location":"react/10.6.Zustand/#core-philosophy","title":"Core philosophy","text":"<ul> <li>Minimal boilerplate: write plain functions and objects, not lots of wiring.  </li> <li>Local-thinking global state: encourage small focused stores (or slices) rather than a single monolithic store.  </li> <li>Selector-driven updates: components subscribe to just the pieces they need, reducing re-renders.  </li> <li>Composable middleware: add persistence, immutability helpers, devtools, etc., through small middlewares.  </li> <li>Works outside React too: you can create a vanilla store for non-React code or server-side logic.</li> </ul>"},{"location":"react/10.6.Zustand/#key-concepts-primitives","title":"Key concepts &amp; primitives","text":"<ul> <li>Store \u2014 created via <code>create((set, get) =&gt; ({ ... }))</code>. Returns a hook you use inside components.  </li> <li><code>set</code> \u2014 function provided to update state. Can accept partial updates or an updater function.  </li> <li><code>get</code> \u2014 read current state inside actions (useful for derived updates).  </li> <li>Selectors \u2014 <code>useStore(s =&gt; s.someValue)</code> subscribes only to <code>someValue</code>. Zustand re-renders the component only when that value changes.  </li> <li><code>subscribe</code> \u2014 low-level subscription API for effects outside React.  </li> <li>Middleware \u2014 small enhancers like <code>persist</code>, <code>devtools</code>, <code>immer</code> that wrap the store factory.  </li> <li>Slices / multiple stores \u2014 recommended pattern for separation of concerns: user slice, ui slice, data slice, etc.  </li> <li>Vanilla stores \u2014 <code>createStore</code> / <code>zustand/vanilla</code> for usage outside components (e.g., plain JS modules, tests).</li> </ul>"},{"location":"react/10.6.Zustand/#why-use-zustand-concise-advantages","title":"Why use Zustand? (concise advantages)","text":"<ul> <li>Extremely low overhead \u2014 tiny API surface and small bundle size.  </li> <li>Simple mental model \u2014 state is just an object; actions are functions that call <code>set</code>.  </li> <li>Selective re-rendering \u2014 avoids React Context\u2019s coarse re-renders by letting components pick exactly what they need.  </li> <li>Great TypeScript ergonomics \u2014 typing stores is straightforward and ergonomic.  </li> <li>Composable &amp; incrementally adoptable \u2014 you can add Zustand to only the parts of your app that need shared state.  </li> <li>Pairs well with server-state libraries (React Query, SWR) \u2014 use Zustand for UI state and React Query for server cache.</li> </ul>"},{"location":"react/10.6.Zustand/#when-to-choose-zustand-guidance","title":"When to choose Zustand (guidance)","text":"<p>Choose Zustand when:</p> <ul> <li>Your app needs a simple global/shared state without Redux boilerplate.  </li> <li>You want high-performance subscriptions without wiring selectors into <code>connect</code> or <code>useSelector</code>.  </li> <li>You prefer a small, flexible tool that\u2019s easy to reason about and test.</li> </ul>"},{"location":"react/10.6.Zustand/#example","title":"example","text":"<pre><code>// store.js\nimport { create } from 'zustand';\n\nconst useStore = create((set, get) =&gt; ({\n  count: 0,\n  increase: () =&gt; set(state =&gt; ({ count: state.count + 1 })),\n  reset: () =&gt; set({ count: 0 }),\n  incrementIfOdd: () =&gt; {\n    if (get().count % 2 === 1) set(state =&gt; ({ count: state.count + 1 }));\n  },\n}));\n\nexport default useStore;\n</code></pre> <pre><code>// store.ts\nimport { create } from 'zustand';\n\ninterface StoreState {\n  count: number;\n  increase: () =&gt; void;\n  reset: () =&gt; void;\n  incrementIfOdd: () =&gt; void;\n}\n\nconst useStore = create&lt;StoreState&gt;((set, get) =&gt; ({\n  count: 0,\n  increase: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n  reset: () =&gt; set({ count: 0 }),\n  incrementIfOdd: () =&gt; {\n    if (get().count % 2 === 1) set((state) =&gt; ({ count: state.count + 1 }));\n  },\n}));\n\nexport default useStore;\n</code></pre>"},{"location":"react/10.6.Zustand/#2-installation-basic-setup","title":"2. Installation &amp; Basic Setup","text":""},{"location":"react/10.6.Zustand/#installing-zustand","title":"Installing Zustand","text":"<p>Install Zustand using your preferred package manager:</p> <pre><code>npm install zustand\n</code></pre> <pre><code># or\nyarn add zustand\n# or\npnpm add zustand\n</code></pre> <p>Zustand works out of the box with React, React Native, and TypeScript \u2014 no extra setup needed.</p>"},{"location":"react/10.6.Zustand/#basic-noraml-usecase","title":"Basic Noraml UseCase","text":"<pre><code>import { Button } from \"@/components/ui/button\";\nimport { create } from \"zustand\";\n\n// creating a store for counter\nconst useCounterStore = create&lt;{\n  count: number;\n  increment: () =&gt; void;\n  decrement: () =&gt; void;\n}&gt;((set) =&gt; ({\n  count: 0,\n  increment: () =&gt; {\n    set((state) =&gt; ({ count: state.count + 1 }));\n  },\n  decrement: () =&gt; {\n    set((state) =&gt; ({ count: state.count - 1 }));\n  },\n}));\n\n// the main app component without prop drilling\nfunction App() {\n  return (\n    &lt;div\n      className=\"flex min-h-svh gap-2 flex-col items-center justify-center \n    text-white bg-gray-800\"\n    &gt;\n      &lt;CountComponent/&gt;\n      &lt;ButtonsComponent/&gt;\n    &lt;/div&gt;\n  );\n}\n\n// using store values in first count component\nfunction CountComponent() {\n  const store = useCounterStore();\n  return &lt;div className=\"text-4xl\"&gt;Count: {store.count}&lt;/div&gt;;\n}\n\n// using store values in second buttons component\nfunction ButtonsComponent() {\n  const store = useCounterStore();\n  return (\n    &lt;div className=\"space-x-2 bg-gray-400 p-4 rounded-xl\"&gt;\n      &lt;Button onClick={store.increment}&gt;Increase&lt;/Button&gt;\n      &lt;Button onClick={store.decrement}&gt;Decrease&lt;/Button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"react/10.6.Zustand/#creating-your-first-store","title":"Creating Your First Store","text":"<p>A Zustand store is a central place that defines:</p> <ul> <li>The state (data)</li> <li>The actions (functions that modify state)</li> </ul> <p>You can create as many stores as you want \u2014 for example: <code>counterStore</code>, <code>userStore</code>, <code>todoStore</code>, etc.</p> <p>Create a global store using create() that contains both state and actions.</p> <pre><code>// store.js\nimport { create } from 'zustand';\n\nconst useCounterStore = create((set) =&gt; ({\n  count: 0,\n  increase: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n  decrease: () =&gt; set((state) =&gt; ({ count: state.count - 1 })),\n}));\n\nexport default useCounterStore;\n</code></pre> <pre><code>// store.ts\nimport { create } from 'zustand';\n\ninterface CounterState {\n  count: number;\n  increase: () =&gt; void;\n  decrease: () =&gt; void;\n}\n\nconst useCounterStore = create&lt;CounterState&gt;((set) =&gt; ({\n  count: 0,\n  increase: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n  decrease: () =&gt; set((state) =&gt; ({ count: state.count - 1 })),\n}));\n\nexport default useCounterStore;\n</code></pre>"},{"location":"react/10.6.Zustand/#using-the-store-in-components","title":"Using the Store in Components","text":"<p>Once a store is created, you can use it directly inside any React component. Each component subscribes only to the part of the state it needs, preventing unnecessary re-renders.</p> <p>To access state:</p> <ul> <li>Use <code>const count = useCounterStore((state) =&gt; state.count);</code></li> </ul> <p>To call actions:</p> <ul> <li>Use <code>const increase = useCounterStore((state) =&gt; state.increase);</code></li> </ul> <p>You can also:</p> <ul> <li>Read state without rendering \u2192 <code>useCounterStore.getState()</code></li> <li>Update state without rendering \u2192 <code>useCounterStore.setState()</code></li> </ul> <p>Use the store hook directly inside React components to read or modify state.</p> <pre><code>// Counter.jsx\nimport useCounterStore from './store';\n\nexport default function Counter() {\n  const { count, increase, decrease } = useCounterStore();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={increase}&gt;+&lt;/button&gt;\n      &lt;button onClick={decrease}&gt;\u2212&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>// Counter.tsx\nimport React from 'react';\nimport useCounterStore from './store';\n\nconst Counter: React.FC = () =&gt; {\n  const { count, increase, decrease } = useCounterStore();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={increase}&gt;+&lt;/button&gt;\n      &lt;button onClick={decrease}&gt;\u2212&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre> <p>\ud83d\udca1 To optimize re-renders, select only specific parts of the store:</p> <pre><code>// Counter.tsx\nimport React from 'react';\nimport useCounterStore from './store';\n\nconst Counter: React.FC = () =&gt; {\n  const count = useCounterStore((s) =&gt; s.count);\n  const increase = useCounterStore((s) =&gt; s.increase);\n  const decrease = useCounterStore((s) =&gt; s.decrease);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\n      &lt;button onClick={increase}&gt;+&lt;/button&gt;\n      &lt;button onClick={decrease}&gt;\u2212&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre>"},{"location":"react/10.6.Zustand/#3-state-actions","title":"3. State &amp; Actions","text":"<pre><code>// store.ts\n// store is the place where you store your state and \n// any function that updates that state.\n\nimport { create } from \"zustand\";\n\n// type\ntype CounterStore = {\n  count: number;\n  increment: () =&gt; void;\n  incrementAsync: () =&gt; Promise&lt;void&gt;;\n  decrement: () =&gt; void;\n  decrementAsync: () =&gt; Promise&lt;void&gt;;\n};\n\n// create and export the store\n// create is used to create a global store (a container for your app\u2019s state and actions).\nexport const useCounterStore = create&lt;CounterStore&gt;((set) =&gt; ({\n  // the vaules\n  count: 0,\n  // the functions to set new value and update the state\n  // set is used to update the state in your store.\n  increment: () =&gt; {\n    set(((state) =&gt; ({ count: state.count + 1 })));\n  },\n  incrementAsync: async () =&gt; {\n    await new Promise((resolve) =&gt; setTimeout(resolve, 1000));\n    set(((state) =&gt; ({ count: state.count + 1 })));\n  },\n  decrement: () =&gt; {\n    set(((state) =&gt; ({ count: state.count - 1 })));\n  },\n  decrementAsync: async () =&gt; {\n    await new Promise((resolve) =&gt; setTimeout(resolve, 1000));\n    set(((state) =&gt; ({ count: state.count - 1 })));\n  },\n}));\n</code></pre> <pre><code>// App.tsx\nimport { useEffect } from \"react\";\nimport \"./App.css\";\n// import the useCounterStore from store\nimport { useCounterStore } from \"./store\";\n\n// get the value from the store directly\nconst logCount = () =&gt; {\n  const count = useCounterStore.getState().count;\n  console.log(\"count\", count);\n};\n\n// change or set the value from the store directly\nconst resetCount = () =&gt; {\n  useCounterStore.setState({count: 0});\n};\n\nconst App = () =&gt; {\n  // make a variable for the count from the store\n  const count = useCounterStore((state) =&gt; state.count);\n  // passing the count as a props\n  return &lt;OtherComponent count={count} /&gt;;\n};\n\nconst OtherComponent = ({ count }: { count: number }) =&gt; {\n  // make a variable for the increment function\n  const increment = useCounterStore((state) =&gt; state.increment);\n  const decrement = useCounterStore((state) =&gt; state.decrement);\n  const incrementAsync = useCounterStore((state) =&gt; state.incrementAsync);\n  const decrementAsync = useCounterStore((state) =&gt; state.decrementAsync);\n\n  // direct use 1\n  useEffect(() =&gt; {\n    logCount();\n  }, []);\n\n  return (\n    &lt;&gt;\n      {/* using the actual value and function from the store */}\n      &lt;div className=\"text-2xl p-4\"&gt;Count is : \n        &lt;span className=\"font-bold text-blue-400\"&gt;{count}&lt;/span&gt;\n      &lt;/div&gt;\n      &lt;div className=\"bg-blue-200 grid grid-cols-2 gap-2 p-2 rounded-xl\"&gt;\n        &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n        &lt;button onClick={decrement}&gt;Decrement&lt;/button&gt;\n        &lt;button onClick={incrementAsync}&gt;IncrementAsync&lt;/button&gt;\n        &lt;button onClick={decrementAsync}&gt;DecrementAsync&lt;/button&gt;\n        {/* direct use 2 */}\n        &lt;button onClick={resetCount} className=\"text-red-400\"&gt;Reset Count&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"react/10.6.Zustand/#4-selectors-optimization","title":"4. Selectors &amp; Optimization","text":"<p>Efficient state selection and optimization are key to Zustand\u2019s performance. Unlike Context API, Zustand only re-renders components that use the part of the state that actually changes.</p>"},{"location":"react/10.6.Zustand/#selecting-specific-state-slices","title":"\ud83d\udd39 Selecting Specific State Slices","text":"<p>Zustand lets you \u201cselect\u201d only the part of the state your component needs. This reduces unnecessary re-renders and improves performance.</p> <p>Example usage:</p> <ul> <li><code>const count = useCounterStore((state) =&gt; state.count);</code></li> <li><code>const increase = useCounterStore((state) =&gt; state.increase);</code></li> </ul> <p>\ud83d\udca1 Best Practice: Always select specific slices of state instead of the entire store.</p>"},{"location":"react/10.6.Zustand/#avoiding-unnecessary-re-renders","title":"\ud83d\udd39 Avoiding Unnecessary Re-renders","text":"<p>If you destructure the entire store like this:</p> <pre><code>const { count, increase, decrease } = useCounterStore();\n</code></pre> <p>The component will re-render whenever any property in the store changes.</p> <p>\u2705 Instead, subscribe only to what\u2019s needed:</p> <pre><code>const count = useCounterStore((state) =&gt; state.count);\n</code></pre> <p>This ensures that your component only re-renders when count changes.</p>"},{"location":"react/10.6.Zustand/#using-shallow-comparison-for-optimization","title":"\ud83d\udd39 Using shallow Comparison for Optimization","text":"<p>When selecting multiple values, Zustand provides a shallow comparison helper to prevent re-renders when selected values haven\u2019t actually changed.</p> <p>You can import it from zustand/shallow:</p> <pre><code>import { shallow } from 'zustand/shallow';\n</code></pre> <p>Then use it like:</p> <pre><code>const { count, increase } = useCounterStore(\n  (state) =&gt; ({ count: state.count, increase: state.increase }),\n  shallow\n);\n</code></pre> <p>This ensures re-renders only happen if either count or increase changes \u2014 not when other parts of the store update.</p>"},{"location":"react/10.6.Zustand/#5-middlewares","title":"5. Middlewares","text":"<p>Zustand provides powerful middlewares that extend its functionality \u2014 such as persistence, debugging, and immutable state updates. You can easily combine multiple middlewares for more advanced setups.</p>"},{"location":"react/10.6.Zustand/#persist-saving-state-to-storage","title":"\ud83d\udd39 <code>persist</code> \u2014 Saving State to Storage","text":"<p>The <code>persist</code> middleware allows your store to automatically save and rehydrate state from localStorage, sessionStorage, or custom storage.</p> <p>Use Case: Keeping user preferences, cart data, or session info persistent between page reloads.</p> <p>Key Points:</p> <ul> <li>Import from <code>zustand/middleware</code></li> <li>Wrap your store definition with <code>persist</code></li> <li>Define a unique key for storage</li> </ul> <p>Features:</p> <ul> <li>Works with both sync and async storages</li> <li>Allows migration, versioning, and partial persistence</li> <li>Can blacklist or whitelist certain parts of the state</li> </ul>"},{"location":"react/10.6.Zustand/#devtools-debugging-with-redux-devtools","title":"\ud83d\udd39 <code>devtools</code> \u2014 Debugging with Redux DevTools","text":"<p>The <code>devtools</code> middleware enables time-travel debugging and inspection via the popular Redux DevTools browser extension.</p> <p>Use Case: Monitoring and debugging state changes easily during development.</p> <p>Key Points:</p> <ul> <li>Import from <code>zustand/middleware</code></li> <li>Wrap your store with <code>devtools</code></li> <li>Add a name for your store in the DevTools tab</li> </ul> <p>Features:</p> <ul> <li>Shows every action and its payload  </li> <li>Allows stepping through past state changes  </li> <li>Works seamlessly with other middlewares like <code>persist</code></li> </ul> <p>\ud83d\udca1 Tip: Use <code>devtools</code> only in development mode to avoid performance overhead in production.</p>"},{"location":"react/10.6.Zustand/#immer-simplifying-immutable-updates","title":"\ud83d\udd39 <code>immer</code> \u2014 Simplifying Immutable Updates","text":"<p>Zustand supports using Immer to simplify complex state mutations while keeping immutability intact.</p> <p>Use Case: When your state has deeply nested objects and you want cleaner update logic.</p> <p>Key Points:</p> <ul> <li>Import from <code>zustand/middleware/immer</code></li> <li>Write \u201cmutable-looking\u201d code that produces immutable updates under the hood</li> </ul> <p>Example Concept: Instead of:</p> <pre><code>set((state) =&gt; ({\n  user: { ...state.user, profile: { ...state.user.profile, name: \"John\" } }\n}));\n</code></pre> <p>You can write:</p> <pre><code>set((state) =&gt; {\n  state.user.profile.name = \"John\";\n});\n</code></pre>"},{"location":"react/10.6.Zustand/#6-key-concepts","title":"6. Key Concepts","text":""},{"location":"react/10.6.Zustand/#create","title":"\ud83d\udd39 <code>create()</code>","text":"<ul> <li>Core function that creates a Zustand store.</li> <li>Returns a custom hook you can use anywhere in React.</li> <li>Example: <code>const useStore = create((set) =&gt; ({ count: 0 }))</code></li> </ul>"},{"location":"react/10.6.Zustand/#set","title":"\ud83d\udd39 <code>set()</code>","text":"<ul> <li>Function provided by Zustand to update the store.</li> <li>Works similar to React\u2019s <code>setState()</code>, but at a global level.</li> </ul>"},{"location":"react/10.6.Zustand/#async-actions","title":"\ud83d\udd39 Async Actions","text":"<p>You can define async actions directly in the store \u2014 no need for extra middleware like Redux Thunk.</p>"},{"location":"react/10.6.Zustand/#7-best-practices","title":"7. Best Practices","text":"<ul> <li>Keep the store minimal \u2014 only include truly shared or global state.  </li> <li>Group related logic into separate stores (e.g., <code>authStore</code>, <code>cartStore</code>).  </li> <li>Use selectors (like <code>(state) =&gt; state.value</code>) for performance.  </li> <li>Avoid destructuring the entire store to prevent re-renders.  </li> <li>Use TypeScript interfaces or types to define store structure clearly.  </li> <li>Access store outside React only when required (e.g., debugging, utility functions).</li> </ul>"},{"location":"react/10.State%20Management%20in%20React/","title":"10.State Management in React","text":""},{"location":"react/10.State%20Management%20in%20React/#state-management-in-react","title":"State Management in React","text":""},{"location":"react/10.State%20Management%20in%20React/#1-context-api-and-usecontext-hook","title":"\ud83d\udce6 1. Context API and useContext Hook","text":"<p>\u2705 What is Context API? React Context provides a way to pass data through the component tree without having to pass props manually at every level. It\u2019s useful for global data like themes, authentication, or user preferences.</p> <p>\u2705 When to Use Context API</p> <ul> <li>When multiple components need access to the same state.</li> <li>When props are deeply nested and cause prop drilling.</li> <li>For app-wide settings (theme, locale, auth, etc.)</li> </ul> <pre><code>import React, { createContext, useContext, useState, useMemo } from 'react';\n\nconst ThemeContext = createContext();\n</code></pre> <p>\u2705 Providing and Consuming Context</p> <pre><code>const ThemeProvider = ({ children }) =&gt; {\n  const [darkMode, setDarkMode] = useState(false);\n\n  const toggleTheme = () =&gt; setDarkMode(prev =&gt; !prev);\n\n  \u2705 Optimizing Context with useMemo\n  const value = useMemo(() =&gt; ({ darkMode, toggleTheme }), [darkMode]);\n\n  return &lt;ThemeContext.Provider value={value}&gt;{children}&lt;/ThemeContext.Provider&gt;;\n};\n</code></pre> <p>\u2705 Using useContext Hook</p> <pre><code>const ThemeToggle = () =&gt; {\n  const { darkMode, toggleTheme } = useContext(ThemeContext);\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Current theme: {darkMode ? 'Dark' : 'Light'}&lt;/p&gt;\n      &lt;button onClick={toggleTheme}&gt;Toggle Theme&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst HomePage = () =&gt; {\n  return (\n    &lt;ThemeProvider&gt;\n      &lt;h2&gt;Welcome to the App&lt;/h2&gt;\n      &lt;ThemeToggle /&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n</code></pre>"},{"location":"react/10.State%20Management%20in%20React/#2-when-to-use-context-api-vs-other-solutions","title":"\ud83d\udd04 2. When to Use Context API vs Other Solutions","text":"<ul> <li> <p>Small-Scale vs Large-Scale Applications</p> <ul> <li>Context is great for small-to-medium apps.</li> <li>For large apps with deeply interdependent state, use Redux or Zustand.</li> </ul> </li> <li> <p>When Context API is Sufficient</p> <ul> <li>User authentication</li> <li>Theme switching</li> <li>Language/localization</li> </ul> </li> <li> <p>When to Use Redux or Others</p> <ul> <li>Complex business logic</li> <li>Large team with modular state slices</li> <li>Time-travel debugging or middleware</li> </ul> </li> <li> <p>Performance Considerations</p> <ul> <li>Context causes re-render for all consumers when the value changes.</li> <li>Optimize with <code>useMemo</code> or split context into smaller providers.</li> </ul> </li> </ul>"},{"location":"react/10.State%20Management%20in%20React/#3-prop-drilling-vs-context-api","title":"\ud83d\udd03 3. Prop Drilling vs Context API","text":"<ul> <li> <p>What is Prop Drilling?</p> <ul> <li>Passing props through multiple layers just to reach a deeply nested component.</li> </ul> </li> <li> <p>How Context API Solves It</p> <ul> <li>Use context to provide values to deeply nested components without passing props manually.</li> </ul> </li> <li> <p>Alternatives to Context API</p> <ul> <li>Component Composition</li> <li>Render Props</li> <li>State management libraries</li> </ul> </li> <li> <p>Best Practices</p> <ul> <li>Avoid large monolithic contexts</li> <li>Split concerns: e.g. AuthContext, ThemeContext, etc.</li> <li>Memoize context values to prevent unnecessary re-renders</li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/","title":"2.Setting Up the Environment","text":""},{"location":"react/2.Setting%20Up%20the%20Environment/#setting-up-the-environment","title":"Setting Up the Environment","text":""},{"location":"react/2.Setting%20Up%20the%20Environment/#1-installing-nodejs-npm","title":"1. Installing Node.js &amp; npm","text":"<ul> <li> <p>Downloading and Installing Node.js</p> </li> <li> <p>Node.js is a JavaScript runtime that enables running JavaScript outside the browser It is essential for React development. Follow these steps to install it:</p> </li> <li>Go to the official Node.js website: <code>https://nodejs.org/</code></li> <li>Download the latest LTS (Long-Term Support) version for stability.</li> <li>Run the installer and follow the setup instructions.</li> <li> <p>Ensure you check the option to install npm (Node Package Manager).</p> </li> <li> <p>Verifying Installation</p> <ul> <li>Once installed, open the terminal and run: node -v</li> <li>This should return the installed Node.js version.</li> <li>To verify npm installation, run: npm -v</li> <li>This should return the installed npm version.</li> </ul> </li> <li> <p>Understanding Node.js Package Manager (npm)</p> <ul> <li>npm is a package manager that comes with Node.js, used to install and manage JavaScript packages and dependencies for projects.</li> <li>Common npm commands:<ul> <li><code>npm init</code> - Initializes a new project.</li> <li><code>npm install &lt;package&gt;</code> - Installs a package.</li> <li><code>npm install -g &lt;package&gt;</code> - Installs a package globally.</li> <li><code>npm update</code> - Updates all packages.</li> </ul> </li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#2-setting-up-a-react-project-with-vite","title":"2. Setting Up a React Project with Vite","text":"<ul> <li>Creating and Running a New Project</li> <li> <p>Vite is a modern frontend build tool that offers a fast and optimized development experience.</p> </li> <li> <p>To create a new React project using Vite, run:</p> <ul> <li>npm create vite@latest my-vite-app --template react</li> </ul> </li> <li>Navigate to the project directory:<ul> <li>cd my-vite-app</li> </ul> </li> <li>Install dependencies:<ul> <li>npm install</li> </ul> </li> <li> <p>Then start the development server:</p> <ul> <li>npm run dev</li> </ul> <p>By default, the app runs on <code>http://localhost:5173/</code></p> </li> <li> <p>Understanding Default Folder Structure <code>Folder Structure</code></p> </li> </ul> <pre><code>my-vite-app/\n\u2502-- node_modules/\n\u2502-- public/\n\u2502-- src/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 main.jsx\n\u2502-- .gitignore\n\u2502-- index.html\n\u2502-- package.json\n\u2502-- vite.config.js\n</code></pre> <p><code>Key files and folders:</code></p> <ul> <li>src/: Main source code for components and logic.</li> <li>public/: Static assets such as images and index.html.</li> <li>vite.config.js: Configuration file for Vite.</li> <li>index.html: The main HTML entry point.</li> </ul> <p><code>Customizing Vite Configuration</code></p> <ul> <li>Vite provides flexibility through vite.config.js.</li> <li>You can modify settings like aliasing, plugins, and environment variables.</li> </ul> <p>Example of aliasing paths in vite.config.js:</p> <pre><code>import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@components': '/src/components',\n    },\n  },\n});\n</code></pre>"},{"location":"react/2.Setting%20Up%20the%20Environment/#3-project-structure-of-a-react-app","title":"3. Project Structure of a React App","text":"<ul> <li>src, public, node_modules, package.json Explained</li> <li>src/: Contains React components, hooks, styles, and utility functions.</li> <li>public/: Stores static files like images and fonts.</li> <li>node_modules/: Installed dependencies.</li> <li> <p>package.json: Defines project metadata and dependencies.</p> </li> <li> <p>Organizing Components, Hooks, and Utilities     Recommended folder structure:</p> </li> </ul> <pre><code>my-vite-app/\n\u2502-- src/\n\u2502   \u2502-- components/\n\u2502   \u2502-- hooks/\n\u2502   \u2502-- utils/\n\u2502   \u2502-- styles/\n\u2502   \u2514\u2500\u2500 App.jsx\n</code></pre> <ul> <li>Best Practices for Folder Structure</li> <li>A modular and reusable component refers to a self-contained, independent unit of code that can be used across different parts of a project or in multiple  projects without modification.</li> <li>Use separate folders for utilities and hooks.<ul> <li>Utilities are general helper functions used for tasks like formatting, calculations, or API calls. They work in any JavaScript project.</li> <li>Hooks are special functions in React that let functional components manage state and side effects.</li> <li>Utilities are stateless and reusable across different projects.</li> <li>Hooks are React-specific and used inside functional components to handle things like state (useState) or side effects (useEffect).</li> <li>Example: A utility might format a date, while a hook manages a counter\u2019s state in a React component.</li> <li>Maintain styles in a dedicated folder.</li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#4-understanding-packagejson-node_modules","title":"4. Understanding package.json &amp; node_modules","text":"<ul> <li> <p>Managing Dependencies</p> <p>Dependencies are listed in package.json:</p> <pre><code>\"dependencies\": {\n  \"react\": \"^18.0.0\",\n  \"react-dom\": \"^18.0.0\"\n}\n</code></pre> <p>Install dependencies with: <code>npm install</code></p> </li> <li> <p>npm Scripts Overview</p> <p>Common scripts in package.json:</p> <pre><code>\"scripts\": {\n  \"dev\": \"vite\",\n  \"build\": \"vite build\",\n  \"preview\": \"vite preview\"\n}\n</code></pre> <p>Run a script with: npm run dev , npm run build , npm run preview</p> </li> <li> <p>Peer Dependencies and Dev Dependencies</p> <ul> <li><code>Dependencies</code> - Required for production.</li> <li><code>Dev Dependencies</code> - Required for development (--save-dev).</li> <li><code>Peer Dependencies</code> - Must be installed manually by the consuming project.</li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#5-running-and-building-a-react-application","title":"5. Running and Building a React Application","text":"<ul> <li> <p>Development Server and Build Process</p> <ul> <li>To start the development server: npm run dev</li> <li>To build for production: npm run build</li> </ul> </li> <li> <p>This generates an optimized dist/ folder.</p> </li> </ul> <p>Using Environment Variables in React</p> <ul> <li>Vite uses .env files for environment variables:<ul> <li>VITE_API_URL=<code>https://api.example.com</code></li> </ul> </li> <li>Access it in your app:<ul> <li>const apiUrl = <code>import.meta.env.VITE_API_URL;</code></li> </ul> </li> </ul>"},{"location":"react/2.Setting%20Up%20the%20Environment/#6-comparing-vite-over-cra","title":"6. Comparing Vite over CRA","text":"<ul> <li>Benefits of Vite<ul> <li>Faster startup due to esbuild pre-bundling.</li> <li>Optimized builds with efficient tree-shaking.</li> <li>Hot Module Replacement (HMR) for instant updates.</li> <li>Smaller bundle sizes due to optimized dependency handling.</li> </ul> </li> </ul>"},{"location":"react/3.Understanding%20jsx/","title":"3.Understanding jsx","text":""},{"location":"react/3.Understanding%20jsx/#understanding-jsx-javascript-xml","title":"Understanding JSX (JavaScript XML)","text":""},{"location":"react/3.Understanding%20jsx/#1-what-is-jsx","title":"1. What is JSX?","text":"<p>JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML. It is used with React to describe the structure of the user interface in a declarative manner. JSX is not a requirement for using React, but it makes the code more readable and expressive.</p> <ul> <li> <p>Why JSX Exists</p> <ul> <li>JSX simplifies the process of writing UI components by providing a syntax that resembles HTML, making it easier to visualize the structure of the UI. Under the hood, JSX is compiled to JavaScript calls to <code>React.createElement()</code>, which ultimately generates the virtual DOM elements.</li> </ul> </li> <li> <p>Writing JSX Syntax</p> <ul> <li>JSX allows developers to write HTML-like structures directly within JavaScript. A basic JSX snippet looks like this:</li> </ul> <pre><code>const element = &lt;h1&gt;Hello, JSX!&lt;/h1&gt;;\n</code></pre> <p>It can also include nested elements:</p> nested elements<pre><code>const element = (\n  &lt;div&gt;\n    &lt;h1&gt;Welcome to JSX&lt;/h1&gt;\n    &lt;p&gt;JSX makes writing UI code easier!&lt;/p&gt;\n  &lt;/div&gt;\n);\n</code></pre> </li> <li> <p>JSX Compilation Process     JSX is not valid JavaScript, so it must be compiled before it can be executed by the browser. Babel, a popular JavaScript compiler, transpiles JSX into JavaScript functions that create React elements:</p> <pre><code>const element = React.createElement(\"h1\", null, \"Hello, JSX!\");\n</code></pre> <p>Babel automatically transforms JSX into these function calls, ensuring compatibility with JavaScript environments.</p> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#2-jsx-syntax-and-expressions","title":"2. JSX Syntax and Expressions","text":"<ul> <li> <p>Embedding JavaScript Expressions     JSX allows embedding JavaScript expressions within curly braces {}:</p> <pre><code>const name = \"Alice\";\nconst element = &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\n</code></pre> </li> <li> <p>Conditional Rendering with JSX     JSX supports conditional rendering using JavaScript expressions. The simplest way is by using an if statement outside of JSX:</p> <pre><code>let message;\nif (isLoggedIn) {\n  message = &lt;h1&gt;Welcome back!&lt;/h1&gt;;\n} else {\n  message = &lt;h1&gt;Please log in.&lt;/h1&gt;;\n}\n</code></pre> </li> <li> <p>Using Ternary Operators and Logical &amp;&amp;     For inline conditions, the ternary operator is commonly used:</p> <pre><code>const message = isLoggedIn ? &lt;h1&gt;Welcome back!&lt;/h1&gt; : &lt;h1&gt;Please log in.&lt;/h1&gt;;\n</code></pre> <p>For simple conditions, the logical &amp;&amp; operator can be used:</p> <pre><code>const showMessage = isLoggedIn &amp;&amp; &lt;h1&gt;Welcome back!&lt;/h1&gt;;\n</code></pre> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#3-embedding-javascript-in-jsx","title":"3. Embedding JavaScript in JSX","text":"<ul> <li> <p>Using Variables Inside JSX     You can directly use JavaScript variables inside JSX expressions:</p> <pre><code>const title = \"React Guide\";\nconst header = &lt;h1&gt;{title}&lt;/h1&gt;;\n</code></pre> </li> <li> <p>Inline Functions and Events     JSX allows defining event handlers directly within elements:</p> <pre><code>&lt;button onClick={() =&gt; alert(\"Button clicked!\")}&gt;Click Me&lt;/button&gt;\n</code></pre> </li> <li> <p>Template Literals in JSX     You can use template literals to dynamically construct strings inside JSX:</p> <pre><code>const user = \"Alice\";\nconst greeting = &lt;h1&gt;{`Hello, ${user}!`}&lt;/h1&gt;;\n</code></pre> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#4-jsx-vs-html-differences","title":"4. JSX vs HTML Differences","text":"<ul> <li> <p>Self-Closing Tags, ClassName, and Attributes     JSX requires self-closing tags for elements that don\u2019t have children:</p> <pre><code>&lt;input type=\"text\" /&gt;\n&lt;img src=\"image.jpg\" alt=\"Image\" /&gt;\n</code></pre> <p>Since class is a reserved keyword in JavaScript, JSX uses className instead:</p> <pre><code>&lt;div className=\"container\"&gt;Content&lt;/div&gt;\n</code></pre> <p>Attributes in JSX follow camelCase convention:</p> <pre><code>&lt;button onClick={handleClick}&gt;Click&lt;/button&gt;\n</code></pre> </li> <li> <p>Using Fragments in JSX     JSX requires a single parent element, which can be cumbersome. Fragments help avoid unnecessary &lt; div&gt; wrappers:</p> <pre><code>&lt;&gt;\n  &lt;h1&gt;Title&lt;/h1&gt;\n  &lt;p&gt;Paragraph&lt;/p&gt;\n&lt;/&gt;\n</code></pre> <p>Alternatively, use :</p> <pre><code>&lt;React.Fragment&gt;\n  &lt;h1&gt;Title&lt;/h1&gt;\n  &lt;p&gt;Paragraph&lt;/p&gt;\n&lt;/React.Fragment&gt;\n</code></pre> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#5-reactcreateelement-behind-the-scenes","title":"5. React.createElement() Behind the Scenes","text":"<ul> <li> <p>JSX Transpilation     JSX is syntactic sugar for React.createElement(). The JSX code:</p> <pre><code>const element = &lt;h1&gt;Hello, JSX!&lt;/h1&gt;;\n</code></pre> <p>is transpiled into:</p> <pre><code>const element = React.createElement(\"h1\", null, \"Hello, JSX!\");\n</code></pre> </li> <li> <p>Babel and Compilation Process     Babel transforms JSX into valid JavaScript code using the React library. This ensures JSX can run in any JavaScript environment.</p> </li> <li> <p>How JSX Converts to React Elements     Each JSX element is turned into a call to <code>React.createElement()</code>, which produces a React element that is used to update the virtual DOM and render components efficiently.</p> </li> </ul>"},{"location":"react/3.Understanding%20jsx/#summary","title":"Summary","text":"<ul> <li>JSX - JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML.</li> <li>Babel - JavaScript compiler, transpiles JSX into JavaScript functions that create React elements:<ul> <li>JSX allows embedding JavaScript expressions within curly braces {}:</li> <li>JSX supports conditional rendering using JavaScript expressions.</li> <li>inline conditions -- ternary operator</li> <li>simple conditions -- logical &amp;&amp; operator</li> <li>selfclosing tags, className, camelCase Attributes</li> </ul> </li> </ul> <p>Fragments</p> <pre><code>&lt;&gt;&lt;/&gt;\n// or \n&lt;React.Fragment&gt;&lt;/React.Fragment&gt;\n</code></pre> <p>wrappers</p> <p>JSX Transpilation -- JSX is syntactic sugar for React.createElement()</p> <pre><code>const element = &lt;h1&gt;Hello, JSX!&lt;/h1&gt;;\n</code></pre> <p>is transpiled into:</p> <pre><code>const element = React.createElement(\"h1\", null, \"Hello, JSX!\");\n</code></pre>"},{"location":"react/4.React%20Components/","title":"4.React Components","text":""},{"location":"react/4.React%20Components/#react-components","title":"React Components","text":""},{"location":"react/4.React%20Components/#1-functional-components","title":"1. Functional Components","text":"<p>Functional components are simple JavaScript functions that return JSX. They are often used for stateless components.</p>"},{"location":"react/4.React%20Components/#stateless-components","title":"Stateless Components","text":"<p>Stateless components do not manage their own state. They only receive props and render UI accordingly.</p> <pre><code>const Greeting = ({ name }) =&gt; {\n  return &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\n};\n\nexport default Greeting;\n</code></pre>"},{"location":"react/4.React%20Components/#writing-function-based-components","title":"Writing Function-Based Components","text":"<p>Functional components are concise and easier to read compared to class components.</p> <pre><code>function Welcome(props) {\n  return &lt;h1&gt;Welcome, {props.user}!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"react/4.React%20Components/#arrow-functions-vs-regular-functions-in-components","title":"Arrow Functions vs Regular Functions in Components","text":"<p>Arrow functions provide a more concise syntax, but both approaches work similarly.</p> <pre><code>const ArrowComponent = () =&gt; &lt;p&gt;Using an arrow function&lt;/p&gt;;\n\nfunction RegularComponent() {\n  return &lt;p&gt;Using a regular function&lt;/p&gt;;\n}\n</code></pre>"},{"location":"react/4.React%20Components/#2-class-components","title":"2. Class Components","text":"<p>Class components were the primary way to manage state before React Hooks were introduced.</p>"},{"location":"react/4.React%20Components/#understanding-component-classes","title":"Understanding Component Classes","text":"<pre><code>import React, { Component } from 'react';\n\nclass Hello extends Component {\n  render() {\n    return &lt;h1&gt;Hello, {this.props.name}!&lt;/h1&gt;;\n  }\n}\n</code></pre>"},{"location":"react/4.React%20Components/#lifecycle-methods-in-class-components","title":"Lifecycle Methods in Class Components","text":"<p>Lifecycle methods allow components to run code at specific points in their lifecycle.</p> <pre><code>class LifecycleDemo extends Component {\n  componentDidMount() {\n    console.log('Component mounted');\n  }\n\n  render() {\n    return &lt;p&gt;Lifecycle methods example&lt;/p&gt;;\n  }\n}\n</code></pre>"},{"location":"react/4.React%20Components/#3-props-and-prop-drilling","title":"3. Props and Prop Drilling","text":"<p>Props allow components to pass data to each other.</p>"},{"location":"react/4.React%20Components/#passing-data-between-components","title":"Passing Data Between Components","text":"<pre><code>const Child = ({ message }) =&gt; &lt;p&gt;{message}&lt;/p&gt;;\n\nconst Parent = () =&gt; &lt;Child message=\"Hello from Parent!\" /&gt;;\n</code></pre>"},{"location":"react/4.React%20Components/#avoiding-prop-drilling-with-context-api","title":"Avoiding Prop Drilling with Context API","text":"<pre><code>import { createContext, useContext } from 'react';\n\nconst MyContext = createContext();\n\nconst Parent = () =&gt; {\n  return (\n    &lt;MyContext.Provider value=\"Hello from Context\"&gt;\n      &lt;Child /&gt;\n    &lt;/MyContext.Provider&gt;\n  );\n};\n\nconst Child = () =&gt; {\n  const value = useContext(MyContext);\n  return &lt;p&gt;{value}&lt;/p&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#default-props-and-proptypes","title":"Default Props and PropTypes","text":"<pre><code>import PropTypes from 'prop-types';\n\nconst Welcome = ({ name }) =&gt; &lt;h1&gt;Welcome, {name}!&lt;/h1&gt;;\n\nWelcome.defaultProps = {\n  name: 'Guest',\n};\n\nWelcome.propTypes = {\n  name: PropTypes.string,\n};\n</code></pre>"},{"location":"react/4.React%20Components/#4-component-reusability-and-composition","title":"4. Component Reusability and Composition","text":""},{"location":"react/4.React%20Components/#best-practices-for-reusable-components","title":"Best Practices for Reusable Components","text":"<ul> <li>Keep components small and focused</li> <li>Use props for configuration</li> <li>Separate logic from UI</li> </ul>"},{"location":"react/4.React%20Components/#composing-components","title":"Composing Components","text":"<pre><code>const Header = () =&gt; &lt;h1&gt;Header&lt;/h1&gt;;\nconst Footer = () =&gt; &lt;h1&gt;Footer&lt;/h1&gt;;\n\nconst Page = () =&gt; (\n  &lt;div&gt;\n    &lt;Header /&gt;\n    &lt;p&gt;Page content&lt;/p&gt;\n    &lt;Footer /&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"react/4.React%20Components/#smart-container-vs-dumb-presentational-components","title":"Smart (Container) vs Dumb (Presentational) Components","text":"<ul> <li>Smart Components: Handle logic and state</li> <li>Dumb Components: Only render UI</li> </ul> <pre><code>const DumbComponent = ({ text }) =&gt; &lt;p&gt;{text}&lt;/p&gt;;\n\nclass SmartComponent extends Component {\n  state = { text: 'Hello World' };\n\n  render() {\n    return &lt;DumbComponent text={this.state.text} /&gt;;\n  }\n}\n</code></pre> <pre><code>import React, { useState } from 'react';\n\nconst DumbComponent = ({ text }) =&gt; &lt;p&gt;{text}&lt;/p&gt;;\n\nconst SmartComponent = () =&gt; {\n  const [text, setText] = useState('Hello World');\n\n  return &lt;DumbComponent text={text} /&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#5-stateless-vs-stateful-components","title":"5. Stateless vs Stateful Components","text":""},{"location":"react/4.React%20Components/#when-to-use-state-in-components","title":"When to Use State in Components","text":"<p>Use state when the component needs to track changes over time.</p>"},{"location":"react/4.React%20Components/#converting-class-components-to-functional-components","title":"Converting Class Components to Functional Components","text":"<pre><code>const FunctionalComponent = () =&gt; {\n  const [count, setCount] = React.useState(0);\n  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Count: {count}&lt;/button&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#state-driven-ui-rendering","title":"State-driven UI Rendering","text":"<pre><code>const Toggle = () =&gt; {\n  const [isOn, setIsOn] = React.useState(false);\n  return &lt;button onClick={() =&gt; setIsOn(!isOn)}&gt;{isOn ? 'ON' : 'OFF'}&lt;/button&gt;;\n};\n</code></pre>"},{"location":"react/4.React%20Components/#6-default-and-named-exports-in-components","title":"6. Default and Named Exports in Components","text":""},{"location":"react/4.React%20Components/#exporting-and-importing-components-correctly","title":"Exporting and Importing Components Correctly","text":"<pre><code>// Default Export\nexport default function MyComponent() {}\n\n// Named Export\nexport function AnotherComponent() {}\nexport const ExtraComponent = () =&gt; &lt;div&gt;Extra&lt;/div&gt;;\n</code></pre> <pre><code>// Correct\n// default import\nimport MyComponent from './MyComponent'; \n// named imports\nimport { AnotherComponent, ExtraComponent } from './AnotherComponent'; \n</code></pre>"},{"location":"react/4.React%20Components/#tips","title":"Tips","text":"<ul> <li>Use default exports for main components per file.</li> <li>Use named exports when you have multiple exports in a file.</li> <li>Use an index.js file to re-export and simplify imports.</li> </ul>"},{"location":"react/4.React%20Components/#indexjs-for-all-the-import-and-export","title":"index.js for all the import and export","text":"<pre><code>// index.js\nexport { default as MyComponent } from './MyComponent';\nexport { AnotherComponent } from './AnotherComponent';\n\n// Usage\nimport { MyComponent, AnotherComponent } from './components';\n</code></pre>"},{"location":"react/4.React%20Components/#7-dynamic-rendering-with-props","title":"7. Dynamic Rendering with Props","text":""},{"location":"react/4.React%20Components/#using-props-to-change-component-behavior","title":"Using Props to Change Component Behavior","text":"<pre><code>const Button = ({ type, label }) =&gt; {\n  const className =\n    type === 'primary'\n      ? 'bg-blue-500 text-white'\n      : type === 'danger'\n      ? 'bg-red-500 text-white'\n      : 'bg-gray-300 text-black';\n\n  return &lt;button className={`px-4 py-2 rounded ${className}`}&gt;{label}&lt;/button&gt;;\n};\n</code></pre> <p>usage:</p> <pre><code>&lt;Button type=\"primary\" label=\"Submit\" /&gt;\n&lt;Button type=\"danger\" label=\"Delete\" /&gt;\n&lt;Button type=\"default\" label=\"Cancel\" /&gt;\n</code></pre>"},{"location":"react/4.React%20Components/#conditional-rendering-based-on-props","title":"Conditional Rendering Based on Props","text":"<pre><code>const MessageBox = ({ status }) =&gt; {\n  if (status === 'loading') {\n    return &lt;p&gt;Loading, please wait...&lt;/p&gt;;\n  } else if (status === 'error') {\n    return &lt;p className=\"text-red-500\"&gt;An error occurred.&lt;/p&gt;;\n  } else if (status === 'success') {\n    return &lt;p className=\"text-green-500\"&gt;Action completed successfully!&lt;/p&gt;;\n  } else {\n    return null;\n  }\n};\n</code></pre> <p>usage:</p> <pre><code>&lt;MessageBox status=\"loading\" /&gt;\n&lt;MessageBox status=\"error\" /&gt;\n&lt;MessageBox status=\"success\" /&gt;\n</code></pre>"},{"location":"react/4.React%20Components/#8-higher-order-components-hoc","title":"8. Higher-Order Components (HOC)","text":""},{"location":"react/4.React%20Components/#what-are-hocs","title":"What are HOCs?","text":"<p>A higher-order component (HOC) is a function that takes a component and returns a new component.</p>"},{"location":"react/4.React%20Components/#implementing-an-hoc","title":"Implementing an HOC","text":"<pre><code>const withSomething = (WrappedComponent) =&gt; {\n  return function EnhancedComponent(props) {\n    // Add logic, data, or side effects here\n    return &lt;WrappedComponent {...props} /&gt;;\n  };\n};\n</code></pre> <pre><code>const withLoading = (Component) =&gt; {\n  return function WrappedWithLoading({ isLoading, ...props }) {\n    if (isLoading) {\n      return &lt;p&gt;Loading...&lt;/p&gt;;\n    }\n    return &lt;Component {...props} /&gt;;\n  };\n};\n\n// usage\nconst UserList = ({ users }) =&gt; (\n  &lt;ul&gt;{users.map((user) =&gt; &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;)}&lt;/ul&gt;\n);\nconst UserListWithLoading = withLoading(UserList);\n\n// use\n&lt;UserListWithLoading isLoading={true} users={[]} /&gt;\n</code></pre>"},{"location":"react/4.React%20Components/#common-use-cases-for-hocs","title":"Common Use Cases for HOCs","text":"<ul> <li>Authentication</li> <li>Logging</li> <li>Conditional rendering</li> </ul>"},{"location":"react/4.React%20Components/#alternatives-to-hocs-render-props-hooks","title":"Alternatives to HOCs (Render Props, Hooks)","text":"<p>Instead of HOCs, you can use hooks like <code>useEffect</code> or render props.</p> <pre><code>const RenderPropComponent = ({ render }) =&gt; render();\n\nconst App = () =&gt; (\n  &lt;RenderPropComponent render={() =&gt; &lt;p&gt;Rendered via render prop&lt;/p&gt;} /&gt;\n);\n</code></pre> <p>This provides a comprehensive overview of React components and their usage.</p>"},{"location":"react/5.React%20State%20and%20Data%20Management/","title":"5.State & Data Management","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#react-state-and-data-management","title":"React State and Data Management","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#1understanding-state-in-react","title":"1.Understanding State in React","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#what-is-state","title":"What is State?","text":"<ul> <li>State is a built-in object in React that allows components to maintain and manage dynamic data.</li> <li>Unlike props, which are read-only and passed down from parent components, state is internal to a component and can be modified over time.</li> <li>Changes in state trigger re-renders, ensuring the UI stays in sync with the data.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#state-vs-props","title":"State vs Props","text":"<ul> <li>State:<ul> <li>Holds dynamic data within a component and can change over time.</li> <li>Can be modified using setState or useState</li> <li>Local to the component</li> <li>Trigger Rerenders.</li> </ul> </li> <li>Props:<ul> <li>Data passed from parent to child and cannot be modified by the receiving component.</li> <li>Read-only (immutable)</li> <li>Passed from parent to child.</li> <li>Trigger Rerenders only if parent re-renders</li> </ul> </li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#why-state-is-immutable","title":"Why State is Immutable","text":"<ul> <li>State should never be modified directly in React.</li> <li>Instead, updates should be made using setState in class components or the useState hook in functional components.</li> <li>Directly mutating state can cause unpredictable UI behavior and may prevent React from properly detecting changes, leading to inefficient re-renders.</li> </ul> <pre><code>const [count, setCount] = useState(0);\n\nconst increment = () =&gt; {\n  count++; // \u274c Direct mutation\n};\n</code></pre> <pre><code>const [count, setCount] = useState(0);\n\nconst increment = () =&gt; {\n  setCount(count + 1); // \u2705 Proper way to update state\n};\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#2usestate-hook-for-state-management","title":"2.useState Hook for State Management","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#using-usestate-to-handle-local-state","title":"Using useState to Handle Local State","text":"<ul> <li><code>useState</code> is a React hook that allows functional components to manage local state. It returns an array with two elements: the current state value and a function to update it.</li> </ul> <pre><code>import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Count: {count}&lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li>Key Points:</li> <li>useState(0) initializes count with 0.</li> <li>setCount is used to update count.</li> <li>Always use the setter function rather than modifying state directly.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#functional-updates-in-usestate","title":"Functional Updates in useState","text":"<ul> <li>Understanding Stale State Issue</li> <li>React does not update state immediately. Instead, it schedules updates and re-renders the component asynchronously.</li> <li>If you update state using the current state value without considering the latest changes, you might end up with stale or incorrect values.</li> </ul> <pre><code>import { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const handleIncrement = () =&gt; {\n  // stale value - a stale value is an outdated or old value of a variable\n  // All the setCount calls below use the same stale value of `count`\n  // because state updates in React are asynchronous and done by batched.\n  // React batches these updates and only the last one takes effect \u2014 which is still `count + 1`\n  setCount(count + 1);\n  setCount(count + 1); // \u274c Doesn't work as expected    \n  setCount(count + 1);\n  setCount(count + 1);\n  setCount(count + 1);\n  // These 5 setCount will be one batch\n  // To increment multiple times properly, use the functional form: setCount(prev =&gt; prev + 1)\n  // also called updater function\n  setCount(prev =&gt; prev + 1);\n  // And this will be one batch\n  setCount(count =&gt; count + 1);\n  // And this will be one batch and should set the count as 3 from 0\n  setCount(count + 1);\n  // And this will overwrite all the previous setCounts and only the last setCount will be updated\n  // so it will only add one and 0 will become 1\n  };\n\n  return &lt;button onClick={handleIncrement}&gt;Count: {count}&lt;/button&gt;;\n}\n\nexport default Counter;\n</code></pre> <ul> <li>When handleIncrement runs, setCount(count + 1) is called twice.</li> <li> <p>Since count holds the same value in both calls, both set it to 1 instead of 2.</p> </li> <li> <p>How Functional updates help avoid stale state issues.   we use <code>setCount(prevCount =&gt; prevCount + 1);</code> to solve this issue</p> </li> </ul> <pre><code>const handleIncrement = () =&gt; {\n  setCount(prevCount =&gt; prevCount + 1);\n  setCount(prevCount =&gt; prevCount + 1); // \u2705 Correctly increments by 2\n};\n</code></pre> <ul> <li>The updater function <code>(prevCount =&gt; prevCount + 1)</code> receives the latest state.   React batches updates and ensures each prevCount reflects the most recent state.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#3class-component-state-vs-functional-component-state","title":"3.Class Component State vs Functional Component State","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#managing-state-in-class-components","title":"Managing State in Class Components","text":"<ul> <li>In class components, state is managed using the <code>this.state</code> object and updated using the <code>this.setState</code> method. This approach requires binding methods when using event handlers.</li> </ul> <pre><code>import React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment = () =&gt; {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return &lt;button onClick={this.increment}&gt;Count: {this.state.count}&lt;/button&gt;;\n  }\n}\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#managing-state-in-functional-components-with-hooks","title":"Managing State in Functional Components with Hooks","text":"<ul> <li>Functional components use the <code>useState</code> hook to manage state, eliminating the need for <code>this.state</code> and making code cleaner and more concise.</li> </ul> <pre><code>import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Count: {count}&lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#migrating-from-class-to-functional-components","title":"Migrating from Class to Functional Components","text":"<ul> <li>Replace <code>this.state</code> with <code>useState</code> and <code>this.setState</code> with the state updater function.</li> <li>Remove the constructor and this references.</li> <li>Also no need for event binding atall.</li> <li>No need to use lifecycle methods (componentDidMount, componentDidUpdate) instead uses useEffect Hook.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#4state-updates-and-batch-processing","title":"4.State Updates and Batch Processing","text":""},{"location":"react/5.React%20State%20and%20Data%20Management/#setstate-behavior-and-batch-updates","title":"setState Behavior and Batch Updates","text":"<ul> <li>React optimizes performance by batching multiple state updates into a single render.</li> <li>This prevents unnecessary re-renders and enhances application efficiency.</li> </ul> <pre><code>const handleClick = () =&gt; {\n  setCount(count + 1);\n  setCount(count + 1); // \u274c Only increments by 1, not 2\n};\n</code></pre> <ul> <li>React batches state updates in event handlers to optimize performance.</li> <li>When setCount(count + 1) runs twice, React sees them as the same state update and merges them.</li> <li>The component only re-renders once with the last state update.</li> </ul> <p>React groups these updates into one batch, applying only the final computed state.</p>"},{"location":"react/5.React%20State%20and%20Data%20Management/#optimizing-state-changes","title":"Optimizing State Changes","text":"<ul> <li>To correctly update state multiple times within an event handler, use the functional form of setState, which ensures updates are based on the most recent state.</li> </ul> <pre><code>setCount(prev =&gt; prev + 1);\nsetCount(prev =&gt; prev + 1); // \u2705 Correctly increments by 2\n</code></pre> <ul> <li>The functional updater (prevCount =&gt; prevCount + 1) ensures each setCount call gets the latest state.</li> <li>React batches state updates but correctly applies them sequentially.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#how-react-18-improves-state-updates","title":"How React 18 Improves State Updates","text":"<ul> <li>Before React 18, React only batched state updates inside event handlers.</li> <li>State updates in asynchronous code (e.g., timeouts, promises) were processed individually, causing multiple re-renders.</li> </ul> <pre><code>setTimeout(() =&gt; {\n  setCount(count + 1);\n  setCount(count + 1); // \u2705 Used to trigger two re-renders before React 18\n}, 1000);\n</code></pre> <ul> <li>React 18 improves automatic batching of updates, reducing unnecessary renders.</li> </ul> <pre><code>setTimeout(() =&gt; {\n  setCount(prev =&gt; prev + 1);\n  setCount(prev =&gt; prev + 1); // \u2705 Now correctly increments by 2 in React 18\n}, 1000);\n</code></pre>"},{"location":"react/5.React%20State%20and%20Data%20Management/#5lifting-state-up-for-shared-state-management","title":"5.Lifting State Up for Shared State Management","text":"<ul> <li>In React, lifting state up means moving state to the closest common ancestor of components that need to share it.</li> <li>This helps avoid redundant state and ensures consistent data flow.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#why-lift-state-up","title":"Why Lift State Up?","text":"<ul> <li>Only store state in the closest common ancestor component if multiple components need access to it.</li> <li>\u2705 Prevents duplicate state in multiple components.</li> <li>\u2705 Ensures synchronized data across components.</li> <li>\u2705 Simplifies state management by keeping it centralized.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#sharing-state-between-components","title":"Sharing State Between Components","text":"<ul> <li>Imagine two sibling components needing access to the same state.</li> <li> <p>Instead of keeping separate state in each component, we lift it to a common parent.</p> </li> <li> <p>Before: Separate State in Each Component (Problem)</p> </li> </ul> <pre><code>function ComponentA() {\n  const [text, setText] = useState(\"\");\n  return &lt;input value={text} onChange={(e) =&gt; setText(e.target.value)} /&gt;;\n}\n\nfunction ComponentB() {\n  const [text, setText] = useState(\"\");\n  return &lt;p&gt;{text}&lt;/p&gt;;\n}\n</code></pre> <ul> <li> <p>Issue: Both components have their own text state, leading to unsynchronized data.</p> </li> <li> <p>After: Lifting State to a Common Parent (Solution)</p> </li> </ul> <pre><code>function Parent() {\n  const [text, setText] = useState(\"\");\n\n  return (\n    &lt;div&gt;\n      &lt;InputField value={text} onChange={setText} /&gt;\n      &lt;DisplayText value={text} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction InputField({ value, onChange }) {\n  return &lt;input value={value} onChange={(e) =&gt; onChange(e.target.value)} /&gt;;\n}\n\nfunction DisplayText({ value }) {\n  return &lt;p&gt;{value}&lt;/p&gt;;\n}\n</code></pre> <ul> <li>\u2705 Now, both components share the same state from Parent, ensuring data stays in sync.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#when-to-use-context-api-vs-lifting-state-up","title":"When to Use Context API vs Lifting State Up","text":"<ul> <li>Use lifting state up for local state sharing; use Context for global state needs.</li> <li> <p>Choosing between lifting state up and the Context API depends on how widely the state is shared and how deep it needs to be passed in the component tree.</p> </li> <li> <p>Lifting State Up (For Local State Sharing)</p> <ul> <li>\u2705 Best for state shared between a few components that are closely related like sibling components.</li> <li>\u2705 Avoids unnecessary complexity by keeping state in the nearest common ancestor.</li> <li>\u2705 Prevents prop drilling for shallow component hierarchies.</li> </ul> </li> <li> <p>Context API (For Global or Deeply Nested State)</p> <ul> <li>\u2705 Useful when many components across different levels need access to the same state.</li> <li>\u2705 Eliminates prop drilling, making deeply nested components easier to manage.</li> <li>\u2705 Best for theme management, authentication, and global application state.</li> </ul> </li> </ul> <pre><code>import { createContext, useContext, useState } from \"react\";\n\n// Create Context\nconst ThemeContext = createContext();\n\nfunction App() {\n  const [theme, setTheme] = useState(\"light\");\n\n  return (\n    &lt;ThemeContext.Provider value={{ theme, setTheme }}&gt;\n      &lt;Toolbar /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nfunction Toolbar() {\n  return &lt;ThemedButton /&gt;;\n}\n\nfunction ThemedButton() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    &lt;button onClick={() =&gt; setTheme(theme === \"light\" ? \"dark\" : \"light\")}&gt;\n      Current Theme: {theme}\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>Best for: Large applications where state is shared across multiple components at different levels.</p> <ul> <li> <p>context api in a child component</p> <ul> <li>you cannot define a Context Provider inside a child component and then pass it up to a parent component.</li> <li>React\u2019s data flow is unidirectional (from parent to child), meaning that context providers should be defined at a higher level in the component tree.</li> </ul> </li> <li> <p>Why Context API Must Be Defined in a Parent Component</p> <ul> <li>Context Providers Wrap Components<ul> <li>The Provider must be at a higher level to supply data to its children.</li> <li>Child components can only consume context that is provided above them.</li> </ul> </li> <li>React\u2019s Unidirectional Data Flow<ul> <li>Data flows down from parent to child, not the other way around.</li> <li>A child component cannot provide context to a parent because the parent renders before the child.</li> </ul> </li> </ul> </li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#6derived-state-from-props","title":"6.Derived State from Props","text":"<ul> <li>Derived state from props refers to computing state based on received props rather than storing and managing it independently.</li> <li> <p>This is useful when the component's state needs to be updated based on changes in props.</p> </li> <li> <p>Sometimes, a component receives props that influence its internal state.</p> </li> <li>Instead of storing the prop directly as state (which can cause issues), we derive the state dynamically based on props.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#avoiding-anti-patterns","title":"Avoiding Anti-Patterns","text":"<p>Avoid copying props into state unless transformation is required.</p> <pre><code>function UserProfile({ name }) {\n  const [userName, setUserName] = useState(name); // Anti-pattern\n\n  useEffect(() =&gt; {\n    setUserName(name);\n  }, [name]); // Updating state when props change\n\n  return &lt;h2&gt;{userName}&lt;/h2&gt;;\n}\n</code></pre> <ul> <li>Why is this an Anti-Pattern?</li> <li>Redundant state: name is already available as a prop, so storing it in state is unnecessary.</li> <li>Unnecessary re-renders: When name changes, useEffect updates userName, causing a re-render that could be avoided. Better Approach: Use Props Directly</li> </ul> <pre><code>function UserProfile({ name }) {\n  return &lt;h2&gt;{name}&lt;/h2&gt;;\n}\n</code></pre> <ul> <li>No need for state since the value can be directly used from props.</li> <li>Avoids extra re-renders by eliminating unnecessary state updates.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#when-to-derive-state-from-props","title":"When to Derive State from Props","text":"<p>Derived state is useful when:</p> <ul> <li>The state requires transformation based on props.</li> <li>The state needs to be modified by user interactions but should reset when props change.</li> </ul> <pre><code>function PriceDisplay({ price }) {\n  const formattedPrice = `$${price.toFixed(2)}`; // Derived state from props\n  return &lt;p&gt;Price: {formattedPrice}&lt;/p&gt;;\n}\n</code></pre> <ul> <li>Here, price is transformed into a formatted string.</li> <li>No need to store formattedPrice in state because it can be computed directly from price.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#memoization-for-derived-state","title":"Memoization for Derived State","text":"<ul> <li> <p>If deriving state involves expensive calculations, memoization with <code>useMemo</code> can improve performance.</p> </li> <li> <p>Expensive Computation without Memoization</p> </li> </ul> <pre><code>function LargeList({ items }) {\n  const sortedItems = items.sort((a, b) =&gt; a.localeCompare(b)); // Sorting on every render\n  return &lt;ul&gt;{sortedItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}&lt;/ul&gt;;\n}\n</code></pre> <ul> <li> <p>Problem: Sorting happens on every render, even if items hasn\u2019t changed.</p> </li> <li> <p>Optimized Approach with useMemo   Use <code>useMemo</code> to optimize expensive calculations.</p> </li> </ul> <pre><code>import { useMemo } from 'react';\n\nfunction LargeList({ items }) {\n  const sortedItems = useMemo(() =&gt; {\n    return [...items].sort((a, b) =&gt; a.localeCompare(b));\n  }, [items]); // Recomputes only when `items` changes\n\n  return &lt;ul&gt;{sortedItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}&lt;/ul&gt;;\n}\n</code></pre> <p>Why useMemo Helps?</p> <ul> <li>Prevents unnecessary re-sorting on every render.</li> <li>Only recomputes when items changes, improving performance.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#7react-context-api-for-global-state-management","title":"7.React Context API for Global State Management","text":"<ul> <li>The React Context API is a built-in way to manage global state without prop drilling.</li> <li>It allows you to share data across multiple components without passing props manually at every level.</li> </ul> <p>Why Use Context API?</p> <ul> <li>\u2705 Avoids prop drilling \u2013 No need to pass props through multiple components.</li> <li>\u2705 Simplifies global state management \u2013 Ideal for themes, authentication, and user preferences.</li> <li>\u2705 Built into React \u2013 No need for external libraries like Redux for simple state sharing.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#creating-and-using-context-providers","title":"Creating and Using Context Providers","text":"<ul> <li>A Provider wraps your components and provides state to them.</li> </ul> <pre><code>import { createContext, useState } from \"react\";\n\n// 1\ufe0f\u20e3 Create a Context\nconst ThemeContext = createContext();\n\n// 2\ufe0f\u20e3 Create a Provider Component\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(\"light\");\n\n  return (\n    &lt;ThemeContext.Provider value={{ theme, setTheme }}&gt;\n      {children}\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nexport { ThemeContext, ThemeProvider };\n</code></pre> <ul> <li> <p>\u2705 Now, any component inside <code>&lt;ThemeProvider&gt;</code> can access theme and setTheme.</p> </li> <li> <p>To consume the context, use the useContext hook.</p> </li> </ul> <pre><code>import { useContext } from \"react\";\nimport { ThemeContext } from \"./ThemeProvider\";\n\nfunction ThemedButton() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    &lt;button \n      onClick={() =&gt; setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      style={{ background: theme === \"light\" ? \"#fff\" : \"#333\", color: theme === \"light\" ? \"#000\" : \"#fff\" }}\n    &gt;\n      Toggle Theme\n    &lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li> <p>\u2705 The button updates and reflects the theme without needing props!</p> </li> <li> <p>To make sure all components can access the theme, wrap your app with <code>&lt;ThemeProvider&gt;</code>.</p> </li> </ul> <pre><code>import { ThemeProvider } from \"./ThemeProvider\";\nimport ThemedButton from \"./ThemedButton\";\n\nfunction App() {\n  return (\n    &lt;ThemeProvider&gt;\n      &lt;ThemedButton /&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre> <ul> <li>\u2705 Now, any component inside ThemeProvider can access the theme state.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#avoiding-unnecessary-renders-with-usememo","title":"Avoiding Unnecessary Renders with useMemo","text":"<ul> <li>By default, every time a provider's state updates, all consuming components re-render. To avoid unnecessary renders, use useMemo:</li> </ul> <pre><code>import { createContext, useState, useMemo } from \"react\";\n\nconst ThemeContext = createContext();\n\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(\"light\");\n\n  // Memoizing the context value\n  const contextValue = useMemo(() =&gt; ({ theme, setTheme }), [theme]);\n\n  return (\n    &lt;ThemeContext.Provider value={contextValue}&gt;\n      {children}\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nexport { ThemeContext, ThemeProvider };\n</code></pre> <ul> <li>\u2705 Reduces unnecessary re-renders and improves performance!</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#when-to-use-context-vs-redux","title":"When to Use Context vs Redux","text":"<ul> <li>Use Context for simple small-scale global state like theme, auth, language and Redux for complex state logic.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#8advanced-state-management-patterns","title":"8.Advanced State Management Patterns","text":"<ul> <li>As React applications grow, managing state efficiently becomes more complex.</li> <li>How to use advanced patterns like useReducer, custom hooks, and comparisons of state management libraries.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#state-reducers-with-usereducer-hook","title":"State Reducers with useReducer Hook","text":"<ul> <li>The <code>useReducer</code> hook is an alternative to useState, useful for managing complex state logic (e.g., forms, counters, state transitions).</li> </ul> <p>Why Use useReducer Instead of useState?</p> <ul> <li>Better for complex state logic</li> <li>Helps when multiple state values are interdependent</li> <li>Provides predictable state updates</li> </ul> <pre><code>import { useReducer } from \"react\";\n\nconst reducer = (state, action) =&gt; {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    case \"reset\":\n      return { count: 0 };\n    default:\n      return state;\n  }\n};\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {state.count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"increment\" })}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"decrement\" })}&gt;-&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"reset\" })}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre> <ul> <li>\u2705 Using useReducer keeps logic centralized and manageable.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#using-custom-hooks-for-state-management","title":"Using Custom Hooks for State Management","text":"<ul> <li>Custom hooks allow us to encapsulate reusable state logic and make components cleaner.</li> </ul> <pre><code>import { useState } from \"react\";\n\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () =&gt; setCount(c =&gt; c + 1);\n  const decrement = () =&gt; setCount(c =&gt; c - 1);\n  const reset = () =&gt; setCount(initialValue);\n\n  return { count, increment, decrement, reset };\n}\n\n// Usage in a Component\nfunction Counter() {\n  const { count, increment, decrement, reset } = useCounter();\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={increment}&gt;+&lt;/button&gt;\n      &lt;button onClick={decrement}&gt;-&lt;/button&gt;\n      &lt;button onClick={reset}&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre> <ul> <li>\u2705 Now, useCounter can be reused in multiple components without rewriting logic.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#comparison-of-context-api-vs-redux-vs-zustand","title":"Comparison of Context API vs Redux vs Zustand","text":"Feature Context API Redux Zustand Complexity Low High Medium Performance Moderate Optimized Optimized Boilerplate Low High Low <ul> <li>\u2705 Use Context API for small to medium applications (e.g., themes, auth).</li> <li>\u2705 Use Redux for large, complex applications with shared state logic.</li> <li>\u2705 Use Zustand for a simpler and scalable alternative to Redux.</li> </ul>"},{"location":"react/5.React%20State%20and%20Data%20Management/#summary","title":"Summary","text":"<ul> <li> <p>Understanding State in React</p> <ul> <li>State: A component's internal data that can change over time.</li> <li>Props: Data passed from parent to child components.</li> <li>Immutable State: State should not be modified directly; use state updater functions instead.</li> </ul> </li> <li> <p>useState Hook for State Management</p> <ul> <li>useState: A React Hook that allows functional components to manage local state.</li> <li>Updating State: Always use the setter function (setState) instead of modifying state directly.</li> <li>Functional Updates: Use a function inside setState to ensure the latest state is used.</li> </ul> </li> <li> <p>Class Component State vs Functional Component State</p> <ul> <li>Class Component State: Managed using this.state and updated via this.setState.</li> <li>Functional Component State: Managed using Hooks like useState.</li> <li>Migration: Convert class components to functional components using Hooks.</li> </ul> </li> <li> <p>State Updates and Batch Processing</p> <ul> <li>Batching: React optimizes multiple state updates into a single re-render.</li> <li>setState Behavior: setState updates asynchronously, so state may not update immediately.</li> <li>React 18 Batch Updates: React 18 improves automatic batching for performance.</li> </ul> </li> <li> <p>Lifting State Up for Shared State Management</p> <ul> <li>Lifting State Up: Move state to a common ancestor to share it between components.</li> <li>Avoid Redundant State: Store state only where necessary to prevent unnecessary complexity.</li> <li>Context API vs Lifting State: Use Context for global state; lift state up for local sharing.</li> </ul> </li> <li> <p>Derived State from Props</p> <ul> <li>Derived State: State computed from props instead of being managed separately.</li> <li>Avoiding Anti-Patterns: Do not store props in state unless transformation is needed.</li> <li>Memoization: Use useMemo to optimize expensive calculations based on props.</li> </ul> </li> <li> <p>React Context API for Global State Management</p> <ul> <li>Context API: Provides a way to share state globally without prop drilling.</li> <li>Context Providers: Components that wrap children to provide shared state.</li> <li>useMemo in Context: Prevents unnecessary re-renders when context values change.</li> <li>Context vs Redux: Context is simpler, Redux is better for complex state management.</li> </ul> </li> <li> <p>Advanced State Management Patterns</p> <ul> <li>useReducer: A Hook that manages complex state logic with a reducer function.</li> <li>Custom Hooks: Encapsulate state logic into reusable functions.</li> <li>Redux: A global state management library with a centralized store.</li> <li>Zustand: A lightweight alternative to Redux for managing global state.</li> </ul> </li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/","title":"6.Handling Events in React","text":""},{"location":"react/6.Handling%20Events%20in%20React/#handling-events-in-react","title":"Handling Events in React","text":"<p>React provides a declarative way to handle user interactions using event listeners in JSX. This covers various aspects of handling events, including adding event listeners, using event handler functions, understanding synthetic events, and more.</p>"},{"location":"react/6.Handling%20Events%20in%20React/#1-adding-event-listeners-in-jsx","title":"1. Adding Event Listeners in JSX","text":"<ul> <li>In React, event handlers are specified using camelCase properties inside JSX elements.</li> <li>Instead of <code>onclick</code> or <code>onkeypress</code> like in vanilla JavaScript, React uses <code>onClick</code>, <code>onKeyPress</code>, etc.</li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/#handling-click-events","title":"Handling Click Events","text":"<ul> <li>Click events are used for button clicks and other interactions:</li> </ul> <pre><code>import React from \"react\";\n\nfunction ClickButton() {\n  function handleClick() {\n    alert(\"Button Clicked!\");\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n\nexport default ClickButton;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#handling-keyboard-events","title":"Handling Keyboard Events","text":"<ul> <li>Keyboard events are useful for capturing user input from text fields and handling shortcuts:</li> </ul> <pre><code>function KeyPressHandler() {\n  function handleKeyPress(event) {\n    alert(`Key Pressed: ${event.key}`);\n  }\n\n  return &lt;input type=\"text\" onKeyPress={handleKeyPress} placeholder=\"Type something...\" /&gt;;\n}\n\nexport default KeyPressHandler;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#handling-form-events","title":"Handling Form Events","text":"<ul> <li>Forms require event handling for submission and input changes:</li> </ul> <pre><code>function FormHandler() {\n  function handleSubmit(event) {\n    event.preventDefault();\n    alert(\"Form Submitted!\");\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" placeholder=\"Enter name\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default FormHandler;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#2-handling-events-with-functions","title":"2. Handling Events with Functions","text":"<p>React allows event handlers to be defined as separate functions or inline.</p>"},{"location":"react/6.Handling%20Events%20in%20React/#inline-event-handlers","title":"Inline Event Handlers","text":"<ul> <li>You can define event handlers directly inside JSX:</li> </ul> <pre><code>&lt;button onClick={() =&gt; alert(\"Button Clicked!\")}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#function-references-as-event-handlers","title":"Function References as Event Handlers","text":"<ul> <li>Using function references keeps the code cleaner and avoids unnecessary re-creation of functions on each render:</li> </ul> <pre><code>function handleClick() {\n  alert(\"Button Clicked!\");\n}\n\n&lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#3-synthetic-events-in-react","title":"3. Synthetic Events in React","text":""},{"location":"react/6.Handling%20Events%20in%20React/#what-are-synthetic-events","title":"What are Synthetic Events?","text":"<ul> <li>Synthetic events in React are lightweight wrappers around native events.</li> <li>They standardize event behavior across different browsers, making React applications more consistent.</li> <li>Synthetic events combine all browser-specific event handling into a single API, ensuring better performance and reducing memory usage.</li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/#differences-between-synthetic-and-native-events","title":"Differences Between Synthetic and Native Events","text":"<ul> <li>A native event is the default event system used by browsers.</li> <li>Here, the event is directly managed by the browser (The browser\u2019s DOM event system)</li> <li>It comes from the DOM (Document Object Model) and has different behaviors in different browsers.</li> </ul> <pre><code>&lt;button id=\"myButton\"&gt;Click Me&lt;/button&gt;\n&lt;script&gt;\n  document.getElementById(\"myButton\").addEventListener(\"click\", function(event) {\n    console.log(\"Native Event:\", event); // Logs a MouseEvent object\n  });\n&lt;/script&gt;\n</code></pre> <ul> <li>A synthetic event is a wrapper around native events in React.(React\u2019s event system)</li> <li>It standardizes event behavior across all browsers, making sure that the event properties and behaviors work the same everywhere.</li> <li>Here, React\u2019s Synthetic Event ensures that event properties (like event.target and event.type) work the same in all browsers.</li> </ul> <pre><code>function SyntheticExample() {\n  function handleClick(event) {\n    // Not a raw browser event\n    console.log(\"Synthetic Event:\", event); // Logs a SyntheticEvent object\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#eventpersist","title":"event.persist()","text":"<ul> <li>Synthetic events are pooled and reused to improve performance.</li> <li>Accessing event properties asynchronously (e.g., in a setTimeout) can cause unexpected behavior because the synthetic event object may be reused.</li> <li>To persist event properties, you need to use event.persist().</li> <li>May be lost unless event.persist() is used</li> </ul> <pre><code>function SyntheticExample() {\n  function handleClick(event) {\n    console.log(event.type); // \"click\"\n    setTimeout(() =&gt; {\n      console.log(event.type); // Undefined if event.persist() is not called\n    }, 1000);\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre> <pre><code>function PersistentSyntheticExample() {\n  function handleClick(event) {\n    event.persist();\n    setTimeout(() =&gt; {\n      console.log(event.type); // \"click\"\n    }, 1000);\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#4-event-binding-methods","title":"4. Event Binding Methods","text":""},{"location":"react/6.Handling%20Events%20in%20React/#using-arrow-functions","title":"Using Arrow Functions","text":"<p>Arrow functions automatically bind <code>this</code>, making them useful in class components:</p> <pre><code>class ArrowExample extends React.Component {\n  handleClick = () =&gt; {\n    alert(\"Clicked!\");\n  };\n\n  render() {\n    return &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt;;\n  }\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#using-bind-in-constructor","title":"Using <code>bind()</code> in Constructor","text":"<ul> <li>Explicitly binding functions in the constructor prevents performance issues caused by creating new functions on each render:</li> </ul> <pre><code>class BindExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    alert(\"Clicked!\");\n  }\n\n  render() {\n    return &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt;;\n  }\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Using arrow functions inside JSX creates a new function every time the component renders. In large applications, this can impact performance.</li> </ul>"},{"location":"react/6.Handling%20Events%20in%20React/#5-passing-arguments-to-event-handlers","title":"5. Passing Arguments to Event Handlers","text":""},{"location":"react/6.Handling%20Events%20in%20React/#using-inline-functions","title":"Using Inline Functions","text":"<ul> <li>Inline functions allow passing parameters directly:</li> </ul> <pre><code>&lt;button onClick={(event) =&gt; handleClick(event, \"Hello\")}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#using-bind-method","title":"Using <code>bind()</code> Method","text":"<ul> <li>Another way to pass arguments is using <code>bind()</code>:</li> </ul> <pre><code>&lt;button onClick={handleClick.bind(this, \"Hello\")}&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#6-preventing-default-behavior-and-event-bubbling","title":"6. Preventing Default Behavior and Event Bubbling","text":""},{"location":"react/6.Handling%20Events%20in%20React/#preventing-default-actions","title":"Preventing Default Actions","text":"<ul> <li>To prevent default behavior (e.g., stopping a link from navigating):</li> </ul> <pre><code>function LinkHandler() {\n  function handleClick(event) {\n    event.preventDefault();\n    alert(\"Link Clicked, but prevented!\");\n  }\n\n  return &lt;a href=\"https://example.com\" onClick={handleClick}&gt;Click Me&lt;/a&gt;;\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#stopping-event-propagation","title":"Stopping Event Propagation","text":"<ul> <li>Event propagation can be stopped using <code>event.stopPropagation()</code>:</li> </ul> <pre><code>function Parent() {\n  function handleParentClick() {\n    alert(\"Parent Clicked!\");\n  }\n\n  function handleChildClick(event) {\n    event.stopPropagation();\n    alert(\"Child Clicked!\");\n  }\n\n  return (\n    &lt;div onClick={handleParentClick}&gt;\n      &lt;button onClick={handleChildClick}&gt;Click Me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/6.Handling%20Events%20in%20React/#event-delegation-in-react","title":"Event Delegation in React","text":"<ul> <li>Event delegation allows handling events on a parent element instead of multiple child elements:</li> </ul> <pre><code>function ListHandler() {\n  function handleClick(event) {\n    if (event.target.tagName === \"LI\") {\n      alert(`Clicked on ${event.target.innerText}`);\n    }\n  }\n\n  return (\n    &lt;ul onClick={handleClick}&gt;\n      &lt;li&gt;Item 1&lt;/li&gt;\n      &lt;li&gt;Item 2&lt;/li&gt;\n      &lt;li&gt;Item 3&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre>"},{"location":"react/7.React%20Hooks/","title":"7.React Hooks","text":""},{"location":"react/7.React%20Hooks/#react-hooks-fundamentals-advanced","title":"React Hooks (Fundamentals &amp; Advanced)","text":""},{"location":"react/7.React%20Hooks/#1introduction-to-hooks","title":"1.Introduction to Hooks","text":""},{"location":"react/7.React%20Hooks/#why-hooks-were-introduced","title":"Why Hooks Were Introduced","text":"<p>Before React Hooks, functional components were stateless, and all stateful logic had to be handled in class components. Hooks allow functional components to use state and lifecycle features, leading to:</p> <ul> <li>Better Code Reusability: Hooks let you extract component logic into reusable functions.</li> <li>Easier State Management: Avoid complex class-based lifecycle methods.</li> <li>Reduced Boilerplate: No need to bind <code>this</code> in class components.</li> </ul>"},{"location":"react/7.React%20Hooks/#component-lifecycle-status","title":"Component LifeCycle Status","text":"<ul> <li>Lifecycle methods manage a component\u2019s behavior at different stages (mounting, updating, unmounting).</li> <li> <p>Let's compare how lifecycle works in JavaScript, React class components, and functional components using Hooks.</p> </li> <li> <p>Counter in Vanilla JavaScript</p> <ul> <li>In plain JavaScript, there's no built-in state management like React.</li> <li>You typically manage state using variables, functions, and event listeners.<ul> <li>window.onload \u2192 Runs when the page loads</li> <li>setInterval / setTimeout \u2192 Mimic state updates</li> <li>window.onunload \u2192 Runs when the page closes</li> </ul> </li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Lifecycle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    function createComponent() {\n      let count = 0;\n      const app = document.getElementById(\"app\");\n\n      function render() {\n        app.innerHTML = `&lt;p&gt;Count: ${count}&lt;/p&gt;&lt;button id=\"btn\"&gt;Increment&lt;/button&gt;`;\n        document.getElementById(\"btn\").addEventListener(\"click\", increment);\n      }\n\n      function increment() {\n        count++;\n        render();\n      }\n\n      // Simulating component mount\n      window.onload = () =&gt; {\n        console.log(\"Component Mounted\");\n        render();\n      };\n\n      // Simulating component unmount\n      window.onunload = () =&gt; {\n        console.log(\"Component Unmounted\");\n      };\n    }\n\n    createComponent();\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Problems in Vanilla JS:</p> <ul> <li>Manual DOM manipulation \u2192 Hard to maintain</li> <li>Global event listeners \u2192 Risk of memory leaks</li> <li>No clear lifecycle separation</li> </ul> </li> <li> <p>State and Lifecycle in React Class Components</p> <ul> <li>React introduced state and lifecycle methods to handle dynamic data updates and component behavior over time.</li> <li><code>State in Class Components</code><ul> <li>State is a built-in object that allows a component to store and manage data dynamically.</li> <li>It is updated using <code>setState()</code></li> </ul> </li> <li><code>Lifecycle Methods in Class Components</code><ul> <li>Lifecycle methods help execute code at specific points in a component\u2019s lifecycle:<ul> <li><code>componentDidMount()</code>: Runs after component mounts (good for API calls).</li> <li><code>componentDidUpdate()</code>: Runs when the component updates.</li> <li><code>componentWillUnmount()</code>: Runs before component is destroyed.</li> </ul> </li> </ul> </li> </ul> <pre><code>import React, { Component } from \"react\";\n\nclass LifecycleDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    console.log(\"Constructor: Component is initialized\");\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount: Component mounted\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentDidUpdate: State updated\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount: Cleanup before unmounting\");\n  }\n\n  increment = () =&gt; {\n    this.setState((prevState) =&gt; ({ count: prevState.count + 1 }));\n  };\n\n  render() {\n    console.log(\"Render: Component is rendering\");\n    return (\n      &lt;div&gt;\n        &lt;p&gt;Count: {this.state.count}&lt;/p&gt;\n        &lt;button onClick={this.increment}&gt;Increment&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default LifecycleDemo;\n</code></pre> </li> <li> <p>How it happens</p> <ul> <li>Mounting: constructor() \u2192 componentDidMount()</li> <li>Updating: render() \u2192 componentDidUpdate()</li> <li>Unmounting: componentWillUnmount()</li> </ul> </li> <li> <p>State and Lifecycle in React Hooks (Functional Components)</p> <ul> <li>React Hooks replace class-based state and lifecycle methods in functional components.</li> <li>Key Hooks for State and Lifecycle<ul> <li><code>useState()</code>: Manages state.</li> <li><code>useEffect()</code>: Handles lifecycle events like <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code>.</li> </ul> </li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction LifecycleDemo() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    console.log(\"Component Mounted\");\n\n    return () =&gt; {\n      console.log(\"Component Will Unmount\");\n    };\n  }, []); // Runs once on mount &amp; cleanup on unmount\n\n  useEffect(() =&gt; {\n    console.log(\"Component Updated: Count changed\");\n  }, [count]); // Runs when `count` changes\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default LifecycleDemo;\n</code></pre> </li> </ul>"},{"location":"react/7.React%20Hooks/#rules-of-hooks","title":"Rules of Hooks","text":"<ul> <li> <p>Only Call Hooks at the Top Level: Do not use hooks inside loops, conditions, or nested functions.</p> <pre><code>function Counter() {\n  const [count, setCount] = useState(0); // Hook at the top level\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>function Counter() {\n  const [count, setCount] = useState(0);\n\n  if (count &gt; 5) {\n    const [highCount, setHighCount] = useState(true); // \u274c Hook inside condition\n  }\n\n  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click&lt;/button&gt;;\n}\n</code></pre> </li> <li> <p>Only Call Hooks from React Functions: Hooks should be used inside React function components or custom hooks.</p> <pre><code>function useCounter() { // \u2705 Custom Hook\n  const [count, setCount] = useState(0);\n  return { count, setCount };\n}\n\nfunction Counter() { // \u2705 Hook inside a React component\n  const { count, setCount } = useCounter();\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>function notAComponent() {\n  const [count, setCount] = useState(0); // \u274c Hook inside a normal function\n}\n</code></pre> </li> </ul>"},{"location":"react/7.React%20Hooks/#migrating-from-class-components-to-hooks","title":"Migrating from Class Components to Hooks","text":"<ul> <li>Example of converting a class component to a functional component with hooks:</li> </ul> <pre><code>// Class Component\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment = () =&gt; {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;Count: {this.state.count}&lt;/p&gt;\n        &lt;button onClick={this.increment}&gt;Increment&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <pre><code>// Functional Component with Hooks\nimport { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/7.React%20Hooks/#2usestate-hook","title":"2.useState Hook","text":"<p>The useState hook is used to manage state in functional components.</p>"},{"location":"react/7.React%20Hooks/#initializing-state","title":"Initializing State","text":"<ul> <li>When using useState, you provide an initial value for the state variable.</li> <li>This value is used only during the first render.</li> </ul> <pre><code>const [count, setCount] = useState(0);\n</code></pre>"},{"location":"react/7.React%20Hooks/#updating-state-correctly","title":"Updating State Correctly","text":"<ul> <li>State updates do not merge automatically in functional components (unlike class components).</li> <li>You must ensure you update the state properly.</li> </ul> <pre><code>setCount(count + 1); // Incorrect Way \u274c\n</code></pre> <ul> <li>Why is this bad?<ul> <li>React does not batch updates when called multiple times in a single render cycle.</li> <li>If multiple updates rely on the previous state, they may overwrite each other.</li> </ul> </li> </ul>"},{"location":"react/7.React%20Hooks/#functional-updates","title":"Functional Updates","text":"<p>If the new state depends on the previous state, use a function inside setState. This ensures correct updates when state updates occur asynchronously.</p> <pre><code>setCount(prevCount =&gt; prevCount + 1);\n</code></pre> <ul> <li>\u2705 Why is this better?<ul> <li>prevCount always holds the latest state value.</li> <li>Ensures correct updates even if setCount is called multiple times.</li> </ul> </li> </ul> <pre><code>const handleClick = () =&gt; {\n  setCount(prev =&gt; prev + 1);\n  setCount(prev =&gt; prev + 1);\n  setCount(prev =&gt; prev + 1);\n};\n</code></pre>"},{"location":"react/7.React%20Hooks/#lazy-initialization","title":"Lazy Initialization","text":"<ul> <li>If the initial state requires an expensive computation, you can pass a function to useState.</li> <li>This function runs only once, during the initial render.</li> </ul> <pre><code>const [count, setCount] = useState(() =&gt; {\n  return expensiveCalculation();\n});\n</code></pre> <pre><code>function expensiveCalculation() {\n  console.log(\"Running expensive computation...\");\n  return 100; // Assume this is an expensive operation\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(() =&gt; expensiveCalculation());\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre>"},{"location":"react/7.React%20Hooks/#3useeffect-hook","title":"3.useEffect Hook","text":"<ul> <li> <p>The useEffect hook allows you to perform side effects in function components, such as:</p> <ul> <li>Fetching data when a component is mounted or updated</li> <li>Subscribing to events when a component is mounted or updated</li> <li>Updating the DOM when a component is mounted or updated</li> <li>Setting up timers when a component is mounted or updated</li> </ul> </li> <li> <p>Component Lifecycle - initialization, Mounting, Updation, Unmounting. <code>useEffect(setup, dependencies)</code></p> </li> <li> <p>After mounting     Empty array as dependency []</p> <pre><code>useEffect(()=&gt;{\n  console.log(\"Counter Mounted\");\n}, [])\n</code></pre> </li> <li> <p>After Unmounting     Empty array as dependency [] also known as cleanup function</p> <pre><code>useEffect(()=&gt;{\n  console.log(\"Counter Mounted\");\n  // when return a function it will run at the time of unmount only\n  return function () {\n    console.log(\"Unmount counter\");\n  }\n}, [])\n</code></pre> </li> <li> <p>After Updation     State as dependency [state]</p> <pre><code>useEffect(()=&gt; {\n  console.log(\"Counter Updated\");\n  // when return a fucntion with dependency array it will run at the time of unmount at the prevState unmount.\n  return () =&gt; {\n    console.log(\"Counter UseEffect Return\")\n  }\n},[count])\n</code></pre> </li> </ul>"},{"location":"react/7.React%20Hooks/#running-side-effects-after-rendering","title":"Running Side Effects After Rendering","text":"<ul> <li>By default, useEffect runs after every render.</li> <li>It can be used to synchronize state with external systems like:<ul> <li>Updating the document title</li> <li>Fetching data</li> <li>Interacting with browser APIs</li> </ul> </li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `Count: ${count}`;\n  }, [count]); // Runs when `count` changes\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre> <ul> <li>The effect updates the document title whenever count changes.</li> <li>Dependency array [count] ensures the effect runs only when count updates, not on every render.</li> </ul>"},{"location":"react/7.React%20Hooks/#cleaning-up-effects","title":"Cleaning Up Effects","text":"<ul> <li> <p>When using effects like timers, event listeners, or subscriptions, you should  clean them up to prevent:</p> <ul> <li>Memory leaks (especially in long-running applications)</li> <li>Unnecessary computations when the component unmounts or updates</li> </ul> </li> <li> <p>Cleaning Up an Interval</p> </li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction Timer() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    const interval = setInterval(() =&gt; {\n      setCount((c) =&gt; c + 1);\n    }, 1000);\n\n    return () =&gt; clearInterval(interval); // Cleanup function\n  }, []); // Runs only once (on mount)\n\n  return &lt;p&gt;Timer: {count} seconds&lt;/p&gt;;\n}\n\nexport default Timer;\n</code></pre> <ul> <li>setInterval runs every second.</li> <li>The cleanup function (clearInterval) ensures the timer stops when the component unmounts.</li> </ul>"},{"location":"react/7.React%20Hooks/#dependencies-in-useeffect","title":"Dependencies in useEffect","text":"<ul> <li>The dependency array controls when the effect runs:<ul> <li><code>No dependencies</code> \u2192 Runs on every render.</li> <li><code>Empty array ([])</code> \u2192 Runs only on mount &amp; unmount.</li> <li><code>Specific dependencies ([var])</code> \u2192 Runs when those dependencies change.</li> </ul> </li> </ul> <p>Ensure dependencies are correctly specified to avoid unintended behavior.</p> <pre><code>import React, { useState, useEffect } from \"react\";\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n\n  useEffect(() =&gt; {\n    async function fetchUserData() {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);\n      const data = await response.json();\n      setUser(data);\n    }\n\n    fetchUserData();\n  }, [userId]); // Runs only when `userId` changes\n\n  return (\n    &lt;div&gt;\n      {user ? &lt;h2&gt;{user.name}&lt;/h2&gt; : &lt;p&gt;Loading...&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\nexport default UserProfile;\n</code></pre>"},{"location":"react/7.React%20Hooks/#4useref-hook","title":"4.useRef Hook","text":"<ul> <li> <p>The useRef hook in React is a powerful tool that allows you to directly access and interact with DOM elements, as well as store values without causing re-renders.</p> </li> <li> <p>It does not cause a re-render atall.</p> </li> <li>It can update the value though.</li> </ul>"},{"location":"react/7.React%20Hooks/#accessing-dom-elements","title":"Accessing DOM Elements","text":"<ul> <li>One common use of useRef is to get direct access to a DOM element, such as an input field.</li> </ul> <pre><code>const inputRef = useRef(null);\n&lt;input ref={inputRef} /&gt;\n</code></pre> <pre><code>import { useRef } from \"react\";\n\nfunction FocusInput() {\n  const inputRef = useRef(null); // Step 1: Create a reference\n\n  const focusInput = () =&gt; {\n    inputRef.current.focus(); // Step 3: Use the reference to focus the input\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input ref={inputRef} type=\"text\" placeholder=\"Type here...\" /&gt; {/* Step 2: Attach the reference */}\n      &lt;button onClick={focusInput}&gt;Focus Input&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default FocusInput;\n// It will focus the input box when clicked on the button\n</code></pre> <pre><code>import { useEffect, useRef } from \"react\";\n\nexport default function Demo() {\n  const inputRef = useRef(null); // Corrected useRef syntax\n\n  useEffect(() =&gt; {\n    inputRef.current?.focus(); // Focus the input field when the component mounts\n  }, []);\n\n  return (\n    &lt;div className=\"tutorial\"&gt;\n      &lt;input ref={inputRef} type=\"text\" placeholder=\"Type something...\" /&gt;\n    &lt;/div&gt;\n  );\n}\n// It will only focus the input box when first mounted\n</code></pre> <pre><code>import { useRef, useState } from \"react\";\n\nexport default function Demo() {\n  const [count, setCount] = useState(0);\n  const countRef = useRef(0);\n\n  const handleIncrement = () =&gt; {\n    setCount(count + 1);\n    countRef.current++;\n\n    console.log(\"State:\", count); // State: 0\n    // Console log will access the previous State because it is running on previous State\n    // when cliked the button State will be updated but in the next render\n    console.log(\"Ref:\", countRef.current); // State: 1\n    // The countRef value will be immediately change to 1 from 0\n    // But we can't see because useRef does not re-renders the component.\n  };\n\n  return (\n    &lt;div className=\"tutorial\"&gt;\n      Count: {countRef.current} \n      {/*It will change because of useState rerender not because of useRef.*/}\n      &lt;button onClick={handleIncrement}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>import React, { useRef, useState } from \"react\";\n\nconst RefCounter = () =&gt; {\n  const countRef = useRef(0);\n  const [state, setState] = useState(0);\n\n  const incrementRef = () =&gt; {\n    countRef.current += 1;\n    console.log(\"Ref Count:\", countRef.current);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Ref Counter&lt;/h2&gt;\n      &lt;p&gt;Ref Count (no re-render): {countRef.current}&lt;/p&gt;\n      &lt;p&gt;State Value: {state}&lt;/p&gt;\n      &lt;button onClick={incrementRef}&gt;Increment Ref&lt;/button&gt;\n      &lt;button onClick={() =&gt; setState(state + 1)}&gt;Update State&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default RefCounter;\n</code></pre> <ul> <li>Clicking \"Increment Ref\" updates countRef.current, but the UI does not update.</li> <li>The new value only appears in the console (console.log).</li> <li>Clicking \"Update State\" triggers a re-render, and only then does countRef.current reflect the updated value.</li> </ul>"},{"location":"react/7.React%20Hooks/#persisting-values-without-re-renders","title":"Persisting Values Without Re-renders","text":"<ul> <li>The useRef hook in React allows you to persist values across renders without causing re-renders.</li> </ul> <pre><code>const countRef = useRef(0);\ncountRef.current += 1;\n</code></pre> <ul> <li> <p>How It Works:</p> <ul> <li>useRef(0) initializes a reference with a .current property set to 0.</li> <li>On each render, countRef.current is incremented by 1.</li> <li>Crucially, updating countRef.current does not cause a re-render of the component.</li> <li>The value persists across renders, but changes to it won't trigger a re-render like state (useState) would.</li> </ul> </li> <li> <p>When to Use useRef</p> <ul> <li>Storing values that don\u2019t need to trigger re-renders (e.g., a counter that tracks renders but isn\u2019t displayed).</li> <li>Keeping a reference to a DOM element (ref for input, div, etc.).</li> <li>Holding mutable values across renders (e.g., timers, intervals, previous values).</li> </ul> </li> <li> <p>Tracking Renders Without Re-rendering</p> <ul> <li>renderCount updates every render, but its update does not cause a re-render.</li> <li>Clicking the button updates state, which triggers a re-render, increasing renderCount.current.</li> </ul> </li> </ul> <pre><code>import React, { useRef, useState, useEffect } from \"react\";\n\nconst RenderCounter = () =&gt; {\n  const renderCount = useRef(0); // Persistent value without re-renders\n  const [state, setState] = useState(0);\n\n  useEffect(() =&gt; {\n    renderCount.current += 1;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Render Counter&lt;/h2&gt;\n      &lt;p&gt;Component has rendered: {renderCount.current} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setState(state + 1)}&gt;Trigger Re-render&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default RenderCounter;\n</code></pre> <ul> <li> <p>Referencing a DOM Element (Accessing an Input Field)</p> <ul> <li><code>div</code> - Scroll to a section, measure dimensions</li> <li><code>video</code> - Play, pause, restart a video</li> <li><code>canvas</code> - Draw graphics programmatically</li> <li><code>img</code> - Lazy loading or applying animations</li> <li><code>audio</code> - Control playback (play, pause, volume)</li> <li><code>form</code> - Reset form fields programmatically</li> <li><code>modal (div)</code> - Show/hide pop-ups</li> </ul> </li> <li> <p>input Focus</p> </li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst InputFocus = () =&gt; {\n  const inputRef = useRef(null); // Holds a reference to the input element\n\n  const focusInput = () =&gt; {\n    if (inputRef.current) {\n      inputRef.current.focus(); // Programmatically focus input\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Focus Input&lt;/h2&gt;\n      &lt;input ref={inputRef} type=\"text\" placeholder=\"Type here...\" /&gt;\n      &lt;button onClick={focusInput}&gt;Focus Input&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default InputFocus;\n</code></pre> <ul> <li>Clicking the \"Focus Input\" button programmatically moves focus to the input field.</li> <li> <p>useRef persists the reference to the DOM element across renders without causing a re-render.</p> </li> <li> <p>Manipulating a div (Scroll to Section)</p> </li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst ScrollToSection = () =&gt; {\n  const sectionRef = useRef(null);\n\n  const scrollToSection = () =&gt; {\n    sectionRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    &lt;div style={{ height: \"200vh\", padding: \"20px\" }}&gt;\n      &lt;button onClick={scrollToSection}&gt;Go to Section&lt;/button&gt;\n      &lt;div ref={sectionRef} style={{ marginTop: \"150vh\", padding: \"20px\", background: \"lightblue\" }}&gt;\n        &lt;h2&gt;Target Section&lt;/h2&gt;\n        &lt;p&gt;This is the section you scrolled to.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ScrollToSection;\n</code></pre> <ul> <li>Controlling a video Element</li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst VideoControl = () =&gt; {\n  const videoRef = useRef(null);\n\n  const playVideo = () =&gt; videoRef.current?.play();\n  const pauseVideo = () =&gt; videoRef.current?.pause();\n  const restartVideo = () =&gt; {\n    videoRef.current.currentTime = 0;\n    videoRef.current?.play();\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Video Control&lt;/h2&gt;\n      &lt;video ref={videoRef} width=\"400\" controls&gt;\n        &lt;source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\" /&gt;\n      &lt;/video&gt;\n      &lt;br /&gt;\n      &lt;button onClick={playVideo}&gt;Play&lt;/button&gt;\n      &lt;button onClick={pauseVideo}&gt;Pause&lt;/button&gt;\n      &lt;button onClick={restartVideo}&gt;Restart&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default VideoControl;\n</code></pre> <ul> <li>Measuring a div's Size (Get Dimensions)</li> </ul> <pre><code>import React, { useRef, useState, useEffect } from \"react\";\n\nconst MeasureDiv = () =&gt; {\n  // Reference to the div\n  const divRef = useRef(null);\n\n  // State to store width and height\n  const [size, setSize] = useState({ width: 0, height: 0 });\n\n  useEffect(() =&gt; {\n    // Function to update div size\n    const updateSize = () =&gt; {\n      if (divRef.current) {\n        setSize({\n          width: divRef.current.offsetWidth,\n          height: divRef.current.offsetHeight,\n        });\n      }\n    };\n\n    // Add event listener for window resize\n    window.addEventListener(\"resize\", updateSize);\n    updateSize(); // Initial size measurement\n\n    // Cleanup: Remove event listener when component unmounts\n    return () =&gt; window.removeEventListener(\"resize\", updateSize);\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Div Size Measurement&lt;/h2&gt;\n      &lt;div ref={divRef} style={{ width: \"50%\", height: \"20vh\", background: \"lightcoral\" }}&gt;\n        Resize the window to see changes\n      &lt;/div&gt;\n      &lt;p&gt;\ud83d\udccf Width: {size.width}px | Height: {size.height}px&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MeasureDiv;\n</code></pre> <ul> <li>Toggling a modal (Show/Hide a Pop-up)</li> </ul> <pre><code>import React, { useRef } from \"react\";\n\nconst ModalExample = () =&gt; {\n  const modalRef = useRef(null);\n\n  const showModal = () =&gt; {\n    modalRef.current.style.display = \"block\";\n  };\n\n  const closeModal = () =&gt; {\n    modalRef.current.style.display = \"none\";\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={showModal}&gt;Open Modal&lt;/button&gt;\n      &lt;div ref={modalRef} style={{ display: \"none\", position: \"fixed\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, 0)\", padding: \"20px\", background: \"white\", border: \"1px solid black\" }}&gt;\n        &lt;p&gt;This is a modal&lt;/p&gt;\n        &lt;button onClick={closeModal}&gt;Close&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ModalExample;\n</code></pre> <ul> <li> <p>Holding Mutable Values Across Renders (Timers, Intervals)</p> </li> <li> <p>Clicking \"Start\" begins an interval that updates the seconds state every second.</p> </li> <li>Clicking \"Stop\" clears the interval, preventing memory leaks.</li> <li>intervalRef.current persists the interval ID without causing re-renders.</li> </ul> <pre><code>import React, { useRef, useState } from \"react\";\n\nconst TimerComponent = () =&gt; {\n  const intervalRef = useRef(null); // Holds the interval ID\n  const [seconds, setSeconds] = useState(0);\n\n  const startTimer = () =&gt; {\n    if (!intervalRef.current) {\n      intervalRef.current = setInterval(() =&gt; {\n        setSeconds((prev) =&gt; prev + 1);\n      }, 1000);\n    }\n  };\n\n  const stopTimer = () =&gt; {\n    clearInterval(intervalRef.current);\n    intervalRef.current = null;\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Timer&lt;/h2&gt;\n      &lt;p&gt;Elapsed Time: {seconds} seconds&lt;/p&gt;\n      &lt;button onClick={startTimer}&gt;Start&lt;/button&gt;\n      &lt;button onClick={stopTimer}&gt;Stop&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default TimerComponent;\n</code></pre>"},{"location":"react/7.React%20Hooks/#5usememo-hook","title":"5.useMemo Hook","text":"<p><code>Memoization</code> - Memoization is an optimization technique where the result of an expensive function is stored (cached) so that it doesn\u2019t have to run again if the input values haven\u2019t changed.</p> <ul> <li>Fibonacci Sequence (Without Memoization) in Vanilla JS</li> </ul> <pre><code>function slowFibonacci(n) {\n  if (n &lt;= 1) return n;\n  return slowFibonacci(n - 1) + slowFibonacci(n - 2); // Recursively calculates every time\n}\n\nconsole.log(slowFibonacci(40)); // Very slow for large numbers\n</code></pre> <ul> <li>Fibonacci with Memoization in Vanilla JS</li> </ul> <pre><code>function memoizedFibonacci() {\n  let cache = {}; // Store previous results\n\n  return function fib(n) {\n    if (n in cache) return cache[n]; // Return from cache if already computed\n    if (n &lt;= 1) return n;\n\n    cache[n] = fib(n - 1) + fib(n - 2);\n    return cache[n];\n  };\n}\n\nconst fibonacci = memoizedFibonacci();\nconsole.log(fibonacci(40)); // Much faster!\n</code></pre> <p>The <code>useMemo</code> hook helps optimize performance by caching (memoizing) the result of expensive calculations, preventing unnecessary re-computation.</p> <ul> <li>Normally, when a component re-renders, all functions inside it run again, even if their values didn\u2019t change.</li> <li>This can slow down the app if there are complex calculations or large datasets.</li> <li><code>useMemo</code> remembers (memoizes) the previous result and only recalculates if dependencies change.</li> </ul> <pre><code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);\nconst memoizedValue = useMemo(() =&gt; calculateValue, dependencies);\n</code></pre> <ul> <li>Simple Example without useMemo</li> </ul> <pre><code>import { useState } from 'react'\n\nfunction DoubleCounter() {\n  const [count, setCount] = useState(0);\n\n  function expensiveTask(num) {\n    console.log(\"Inside Expensive Task!\");\n    for(let i=0; i&lt;=2000000000; i++) {}\n    return num*2;\n  }\n\n  let doubledValue = expensiveTask(16);\n// This will run everytime the app re-renders even when the value of 'number' doesn't change.\n\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        Count: {count}\n      &lt;/div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Increment\n      &lt;/button&gt;\n      &lt;div&gt;\n        Double: {doubledValue}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default DoubleCounter\n</code></pre> <ul> <li>Simple Example with using useMemo</li> </ul> <pre><code>import { useState, useMemo } from 'react'\n\nfunction DoubleCounter() {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(0);\n\n  function expensiveTask(num) {\n    console.log(\"Inside Expensive Task!\");\n    for(let i=0; i&lt;=2000000000; i++) {}\n    return num*2;\n  }\n\n//   let doubledValue = expensiveTask(number);\n// This will run everytime the app re-renders even when the value of 'number' doesn't change.\n\nlet doubledValue = useMemo(() =&gt; expensiveTask(number), [number])\n// now expensive Task will only run when the value of 'number' is changed\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        Count: {count}\n      &lt;/div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Increment\n      &lt;/button&gt;\n      &lt;div&gt;\n        Double: {doubledValue}\n      &lt;/div&gt;\n      &lt;input \n      type='number' \n      placeholder='enter number to double...'\n      value={number}\n      onChange={(e) =&gt; setNumber(e.target.value)}\n      /&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default DoubleCounter\n</code></pre> <ul> <li>Problem: Without useMemo (Inefficient)</li> </ul> <pre><code>import React, { useState } from \"react\";\n\nconst ExpensiveComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(5);\n\n  // Expensive function that runs on every render\n  const computeSquare = () =&gt; {\n    console.log(\"Calculating...\");\n    return number * number;\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Number: {number}&lt;/h2&gt;\n      &lt;h3&gt;Square: {computeSquare()}&lt;/h3&gt;\n      &lt;button onClick={() =&gt; setNumber(number + 1)}&gt;Increase Number&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increase Count&lt;/button&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ExpensiveComponent;\n</code></pre> <ul> <li>Every time count updates, computeSquare() re-runs, even though number didn\u2019t change.</li> <li> <p>This wastes performance because we don\u2019t need to recalculate the square unless number changes.</p> </li> <li> <p>Optimized with useMemo</p> </li> </ul> <pre><code>import React, { useState, useMemo } from \"react\";\n\nconst ExpensiveComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(5);\n\n  // Memoize the expensive calculation\n  const memoizedSquare = useMemo(() =&gt; {\n    console.log(\"Calculating...\");\n    return number * number;\n  }, [number]); // Only recalculates if `number` changes\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Number: {number}&lt;/h2&gt;\n      &lt;h3&gt;Square: {memoizedSquare}&lt;/h3&gt;\n      &lt;button onClick={() =&gt; setNumber(number + 1)}&gt;Increase Number&lt;/button&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increase Count&lt;/button&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ExpensiveComponent;\n</code></pre> <ul> <li>useMemo(() =&gt; number * number, [number]) only recalculates when number changes.</li> <li>If we update count, the expensive calculation is skipped.</li> <li> <p>Performance improves because the function does not run unnecessarily.</p> </li> <li> <p>Problem: Filtering is Slow Without useMemo</p> </li> </ul> <pre><code>import React, { useState } from \"react\";\n\nconst ListFilter = () =&gt; {\n  const [query, setQuery] = useState(\"\");\n  const items = [\"Apple\", \"Banana\", \"Grapes\", \"Mango\", \"Orange\"];\n\n  // Filtering runs on every render (even when not needed)\n  const filteredItems = items.filter(item =&gt; {\n      item.toLowerCase().includes(query.toLowerCase())\n      console.log(\"filtered\")\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;input type=\"text\" value={query} onChange={e =&gt; setQuery(e.target.value)} placeholder=\"Search...\" /&gt;\n      &lt;ul&gt;\n        {filteredItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ListFilter;\n</code></pre> <ul> <li> <p>If we filter a large list in a component, it can be slow because filtering runs on every re-render.</p> </li> <li> <p>Use useMemo to Optimize Filtering</p> </li> </ul> <pre><code>import React, { useState, useMemo } from \"react\";\n\nconst ListFilter = () =&gt; {\n  const [query, setQuery] = useState(\"\");\n  const items = [\"Apple\", \"Banana\", \"Grapes\", \"Mango\", \"Orange\"];\n\n  // Memoize the filtered list\n  const filteredItems = useMemo(() =&gt; {\n    console.log(\"Filtering...\");\n    return items.filter(item =&gt; item.toLowerCase().includes(query.toLowerCase()));\n  }, [query]); // Recalculates only when `query` changes\n\n  return (\n    &lt;div&gt;\n      &lt;input type=\"text\" value={query} onChange={e =&gt; setQuery(e.target.value)} placeholder=\"Search...\" /&gt;\n      &lt;ul&gt;\n        {filteredItems.map(item =&gt; &lt;li key={item}&gt;{item}&lt;/li&gt;)}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ListFilter;\n</code></pre> <ul> <li>useMemo ensures the filtering only happens when query changes.</li> <li>If the user types in the input, filtering runs.</li> <li>If the component re-renders for other reasons, filtering does not run again unnecessarily.</li> </ul>"},{"location":"react/7.React%20Hooks/#55-reactmemo","title":"5.5 React.memo()","text":"<ul> <li><code>React.memo()</code> is a higher-order component (HOC) in React that optimizes functional components by preventing unnecessary re-renders.</li> <li><code>React.memo()</code> prevents a functional component from unnecessary re-renders.</li> <li>It works by memoizing the rendered output of a component and only re-rendering it when its props change.</li> </ul> <pre><code>const MemoizedComponent = React.memo(MyComponent);\n</code></pre> <pre><code>const MemoizedComponent = React.memo((props) =&gt; {\n  return &lt;div&gt;{props.value}&lt;/div&gt;;\n});\n</code></pre> <ul> <li> <p>When to Use React.memo()</p> <ul> <li>The component re-renders frequently with the same props.</li> <li>The component is a pure function (output depends only on props).</li> <li>The parent component updates often, causing unnecessary re-renders.</li> </ul> </li> <li> <p>Basic Example</p> </li> </ul> <pre><code>import React, { useState } from \"react\";\n\nconst ChildComponent = ({ count }) =&gt; {\n  console.log(\"Child component re-rendered\");\n  return &lt;p&gt;Count: {count}&lt;/p&gt;;\n};\n\nconst OtherChildComponent = React.memo(({ otherCount }) =&gt; {\n  console.log(\"Other Child component re-rendered\");\n  return &lt;p&gt;Other Count: {otherCount}&lt;/p&gt;;\n});\n\nconst ParentComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n  const [otherCount, setotherCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment Count&lt;/button&gt;\n      &lt;button onClick={() =&gt; setotherCount(otherCount + 1)}&gt;Increment Other Count&lt;/button&gt;\n      &lt;ChildComponent count={count} /&gt;\n      {/* This will re-render unnecessarily even when otherCount changes */}\n      &lt;OtherChildComponent otherCount={otherCount} /&gt;\n      {/* This will not re-render unnecessarily even when Count changes will only re-render when it's props otherCount changes because we used React.memo()*/}\n    &lt;/div&gt;\n  );\n};\n\nexport default ParentComponent;\n</code></pre> <ul> <li>OtherChildComponent will only re-render when otherCount changes.</li> <li>Clicking \"Increment Count\" does not trigger a re-render of OtherChildComponent.</li> </ul>"},{"location":"react/7.React%20Hooks/#6usecallback-hook","title":"6.useCallback Hook","text":"<ul> <li>The useCallback hook in React is used to memoize functions so that they are not recreated on every render.</li> <li>This helps improve performance, especially in cases where functions are passed as props to child components.</li> <li>Every time a React component re-renders, any functions defined inside it are re-created.</li> <li>In most cases, this is fine, but when passing functions as props to child components, it can lead to unnecessary re-renders of those children.</li> <li>useCallback prevents this by returning the same function instance unless its dependencies change.</li> </ul> <pre><code>const memoizedFunction = useCallback(() =&gt; {\n  // function logic here\n}, [dependencies]);\n</code></pre> <ul> <li>The first argument is the function to memoize.</li> <li> <p>The second argument is an array of dependencies. If any dependency changes, the function is re-created.</p> </li> <li> <p>Basic Usage</p> </li> <li> <p>increment is memoized and will not be re-created on every render.</p> </li> </ul> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst Counter = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const increment = useCallback(() =&gt; {\n    setCount((prevCount) =&gt; prevCount + 1);\n  }, []); // No dependencies, so this function remains the same across re-renders\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre>"},{"location":"react/7.React%20Hooks/#passing-functions-to-child-components","title":"Passing Functions to Child Components","text":"<ul> <li>Without useCallback, a child component would re-render every time the parent renders.</li> </ul> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst Child = ({ onClick }) =&gt; {\n  console.log(\"Child re-rendered\");\n  return &lt;button onClick={onClick}&gt;Click Me&lt;/button&gt;;\n};\n\nconst Parent = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const handleClick = useCallback(() =&gt; {\n    console.log(\"Button Clicked\");\n  }, []); // Memoized function\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment Count&lt;/button&gt;\n      &lt;Child onClick={handleClick} /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Parent;\n</code></pre> <ul> <li>If handleClick was not memoized, it would be recreated on every render, causing Child to re-render unnecessarily.</li> <li>With useCallback, Child only re-renders when its props actually change.</li> </ul>"},{"location":"react/7.React%20Hooks/#using-usecallback-with-useeffect","title":"Using useCallback with useEffect","text":"<ul> <li>Sometimes, we need a stable function reference inside useEffect.</li> </ul> <pre><code>import React, { useState, useEffect, useCallback } from \"react\";\n\nconst Timer = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  const tick = useCallback(() =&gt; {\n    setCount((prevCount) =&gt; prevCount + 1);\n  }, []); // Function stays the same across renders\n\n  useEffect(() =&gt; {\n    const interval = setInterval(tick, 1000);\n    return () =&gt; clearInterval(interval);\n  }, [tick]);\n\n  return &lt;p&gt;Timer: {count}&lt;/p&gt;;\n};\n\nexport default Timer;\n</code></pre> <ul> <li>If tick was recreated on every render, useEffect would run multiple times, leading to multiple intervals.</li> <li>Memoizing tick ensures that only one interval is set up.</li> </ul>"},{"location":"react/7.React%20Hooks/#usecallback-with-dynamic-dependencies","title":"useCallback with Dynamic Dependencies","text":"<ul> <li>If a function relies on state or props, we should include them as dependencies.</li> </ul> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst App = () =&gt; {\n  const [text, setText] = useState(\"Hello\");\n\n  const showAlert = useCallback(() =&gt; {\n    alert(text);\n  }, [text]); // Recreates function when `text` changes\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        value={text}\n        onChange={(e) =&gt; setText(e.target.value)}\n      /&gt;\n      &lt;button onClick={showAlert}&gt;Show Alert&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <ul> <li>If we don\u2019t include text, the function would always use the initial value of text, ignoring updates.</li> <li>By including [text], the function updates whenever text changes.</li> </ul>"},{"location":"react/7.React%20Hooks/#difference-between-usememo-and-usecallback","title":"Difference between useMemo and useCallback","text":"<ul> <li><code>useMemo</code>: Used to memoize the result of a computation. It returns a memoized value and is used to optimize expensive calculations.</li> <li><code>useCallback</code>: Used to memoize a function so that the function reference remains the same across renders unless its dependencies change. It returns a memoized function, not a value.</li> </ul>"},{"location":"react/7.React%20Hooks/#when-not-to-use-usecallback","title":"When NOT to use useCallback","text":"<ul> <li>Overuse can hurt performance: If a function is not being passed as a prop to a child component or used in useEffect, memoization might be unnecessary.</li> <li>Functions inside event handlers: If a function is used only inside the component that defines it, memoization isn\u2019t needed.</li> </ul>"},{"location":"react/7.React%20Hooks/#7usereducer-hook","title":"7.useReducer Hook","text":"<ul> <li>The useReducer hook is an alternative to useState for managing complex state logic in React functional components.</li> <li>It is particularly useful when the next state depends on the previous state or when the state logic is extensive.</li> </ul>"},{"location":"react/7.React%20Hooks/#alternative-to-usestate-for-complex-state","title":"Alternative to useState for Complex State","text":"<ul> <li>Basic Syntax The useReducer hook takes two arguments:</li> <li>Reducer function \u2013 A function that determines how state changes based on actions.</li> <li>Initial state \u2013 The starting value of the state.</li> </ul> <pre><code>const [state, dispatch] = useReducer(reducer, initialState);\n</code></pre> <ul> <li>Example for useReducer</li> </ul> <pre><code>import React, { useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\nconst Counter = () =&gt; {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {state.count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"increment\" })}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"decrement\" })}&gt;-&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre> <ul> <li>state holds the current count.</li> <li>dispatch is used to send actions ({ type: \"increment\" }).</li> <li>The reducer function updates state based on the action type.</li> </ul>"},{"location":"react/7.React%20Hooks/#understanding-actions-and-reducers","title":"Understanding Actions and Reducers","text":"<ul> <li><code>Actions</code>: Objects that describe what should happen (e.g., { type: \"increment\" }).</li> <li><code>Reducer Function</code>: A pure function that takes state and an action and returns a new state.</li> </ul> <pre><code>function reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + action.payload };\n    case \"decrement\":\n      return { count: state.count - action.payload };\n    default:\n      return state;\n  }\n}\n</code></pre>"},{"location":"react/7.React%20Hooks/#combining-reducers","title":"Combining Reducers","text":""},{"location":"react/7.React%20Hooks/#8-usecontext-hook","title":"8. useContext Hook","text":"<ul> <li>The <code>useContext</code> hook allows you to share state or data across multiple components without passing props manually at every level.</li> <li>It's useful for accessing global data like user authentication, themes, language settings, etc.</li> </ul>"},{"location":"react/7.React%20Hooks/#simplifying-prop-drilling","title":"Simplifying Prop Drilling","text":"<ul> <li>Why useContext?   Normally, if you want to pass data from a parent component to a deeply nested child, you have to pass it through all intermediate components (prop drilling). <code>useContext</code> avoids this by allowing direct access to the context.</li> </ul>"},{"location":"react/7.React%20Hooks/#basic-syntax","title":"Basic Syntax","text":"<ul> <li>The <code>useContext</code> hook takes a context object (created by <code>React.createContext</code>) and returns the current context value.</li> </ul> <pre><code>const value = useContext(MyContext);\n</code></pre> <ul> <li>Example for useContext</li> </ul> <pre><code>import React, { createContext, useContext } from \"react\";\n\n// 1. Create the context\nconst ThemeContext = createContext();\n\n// 2. Create a provider component\nconst ThemeProvider = ({ children }) =&gt; {\n  const theme = \"dark\"; // Could be dynamic or from state\n  return (\n    &lt;ThemeContext.Provider value={theme}&gt;\n      {children}\n    &lt;/ThemeContext.Provider&gt;\n  );\n};\n\n// 3. Use the context in a child component\nconst ThemedComponent = () =&gt; {\n  const theme = useContext(ThemeContext);\n  return &lt;p&gt;The current theme is: {theme}&lt;/p&gt;;\n};\n\n// 4. Compose in App\nconst App = () =&gt; {\n  return (\n    &lt;ThemeProvider&gt;\n      &lt;ThemedComponent /&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"react/7.React%20Hooks/#understanding-context-structure","title":"Understanding Context Structure","text":"<ul> <li>Context Object: Created using <code>React.createContext()</code>. It returns an object that includes:</li> <li><code>Provider</code> \u2013 a component to supply the context value.</li> <li> <p><code>Consumer</code> \u2013 a component to read the context value (used before hooks).</p> </li> <li> <p>Provider: A component that wraps part of the component tree and makes a value available to all its descendants via context.</p> </li> <li> <p>Consumer (optional): Before hooks were introduced, <code>Consumer</code> was used to access context in functional components.   Now, <code>useContext()</code> provides a simpler and cleaner way to consume context directly.</p> </li> </ul> <pre><code>const MyContext = createContext(defaultValue);\n\n// Using the provider\n&lt;MyContext.Provider value={someData}&gt;\n  &lt;YourComponent /&gt;\n&lt;/MyContext.Provider&gt;\n</code></pre>"},{"location":"react/7.React%20Hooks/#when-to-use-usecontext","title":"When to Use useContext","text":"<ul> <li>When global state is needed (e.g., theme, language, authentication).</li> <li>When the same data needs to be accessed by deeply nested components.</li> <li>When you want to avoid prop drilling (passing props through multiple intermediate components).</li> </ul>"},{"location":"react/7.React%20Hooks/#common-pattern-usecontext-usereducer","title":"Common Pattern: useContext + useReducer","text":"<ul> <li>You can combine <code>useContext</code> with <code>useReducer</code> to create a global state management pattern.</li> <li>This pattern allows centralized state logic (via reducer) and easy access (via context) across your application\u2014similar to how Redux works, but simpler and built-in to React.</li> </ul> <pre><code>src/\n\u2502\n\u251c\u2500\u2500 context/\n\u2502   \u2514\u2500\u2500 CountContext.jsx\n\u2502\n\u251c\u2500\u2500 components/\n\u2502   \u2514\u2500\u2500 Counter.jsx\n\u2502\n\u251c\u2500\u2500 App.jsx\n\u2514\u2500\u2500 main.jsx (if using Vite)\n</code></pre> <pre><code>// context/CountContext.jsx\n\nimport React, { createContext, useReducer, useContext } from \"react\";\n// Create Context\nconst CountContext = createContext();\n// Initial State\nconst initialState = { count: 0 };\n// Reducer Function\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// Provider Component\nexport const CountProvider = ({ children }) =&gt; {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    &lt;CountContext.Provider value={{ state, dispatch }}&gt;\n      {children}\n    &lt;/CountContext.Provider&gt;\n  );\n};\n// Custom Hook\nexport const useCount = () =&gt; {\n  const context = useContext(CountContext);\n  if (!context) {\n    throw new Error(\"useCount must be used within a CountProvider\");\n  }\n  return context;\n};\n</code></pre> <pre><code>//components/Counter.jsx\nimport React from \"react\";\nimport { useCount } from \"../context/CountContext\";\n\nconst Counter = () =&gt; {\n  const { state, dispatch } = useCount();\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Count: {state.count}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"increment\" })}&gt;\u2795&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"decrement\" })}&gt;\u2796&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre> <pre><code>// App.jsx\nimport React from \"react\";\nimport { CountProvider } from \"./context/CountContext\";\nimport Counter from \"./components/Counter\";\n\nconst App = () =&gt; {\n  return (\n    &lt;CountProvider&gt;\n      &lt;h1&gt;Counter App Using useReducer + useContext&lt;/h1&gt;\n      &lt;Counter /&gt;\n    &lt;/CountProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>This structure:</p> <ul> <li>Promotes reusability of state logic.</li> <li>Makes it easy to test components individually.</li> <li>Adds a useCount() custom hook for cleaner usage and error handling.</li> </ul>"},{"location":"react/7.React%20Hooks/#9uselayouteffect","title":"9.useLayoutEffect","text":""},{"location":"react/7.React%20Hooks/#10useimperativehandle","title":"10.useImperativeHandle","text":""},{"location":"react/7.React%20Hooks/#11custom-hooks-in-react","title":"11.Custom Hooks in React","text":""},{"location":"react/7.React%20Hooks/#when-to-create-custom-hooks","title":"When to Create Custom Hooks","text":"<ul> <li>Create when logic needs to be shared across multiple components.</li> </ul>"},{"location":"react/7.React%20Hooks/#example-of-a-custom-hook","title":"Example of a Custom Hook","text":"<pre><code>function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() =&gt; {\n    return localStorage.getItem(key) || initialValue;\n  });\n\n  useEffect(() =&gt; {\n    localStorage.setItem(key, storedValue);\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n}\n</code></pre> <ul> <li>This guide provides a comprehensive overview of React Hooks with explanations and examples. You can modify and expand as needed!</li> </ul>"},{"location":"react/7.React%20Hooks/#uselocalstorage","title":"useLocalStorage","text":""},{"location":"react/7.React%20Hooks/#usefetch","title":"useFetch","text":""},{"location":"react/7.React%20Hooks/#12-server-components-hooks-for-ssr-streaming","title":"12. Server Components Hooks (for SSR &amp; Streaming)","text":"<ul> <li><code>useDebugValue</code> \u2013 Use it inside custom hooks to show useful info in React DevTools.</li> <li><code>useId</code> \u2013 Generates unique IDs for accessibility &amp; form inputs. Helps with accessible form fields &amp; avoiding ID conflicts.</li> <li><code>useDeferredValue</code> \u2013 Defers state updates for smoother performance. Smoother UI While Typing. Defers a value update to avoid blocking the UI.</li> <li><code>useTransition</code> \u2013 Handles UI transitions efficiently and Optimize state updates. Splits state updates into urgent and non-urgent.</li> <li><code>useSyncExternalStore</code> \u2013 for library authors (not general app developers) to sync with external state stores. Safely subscribe to an external store (like Redux or Zustand).</li> <li><code>useInsertionEffect</code> \u2013  for library authors (not general app developers) to inject styles before DOM mutations happen. It\u2019s similar to useLayoutEffect, but it runs even earlier in the React render lifecycle.</li> </ul>"},{"location":"react/8.React%20Forms/","title":"8.React Forms and Form Handling","text":""},{"location":"react/8.React%20Forms/#react-form-and-form-handling","title":"React Form and Form Handling","text":""},{"location":"react/8.React%20Forms/#toc","title":"TOC","text":"<p>1. Introduction to Forms in React</p> <ul> <li>What are Forms?</li> <li>Controlled vs Uncontrolled Components</li> <li>Form Events Overview</li> </ul> <p>2. Controlled Components</p> <ul> <li>useState for Form Inputs</li> <li>Handling Multiple Inputs</li> <li>Updating State Dynamically</li> <li>Controlled Textarea</li> <li>Controlled Select Dropdown</li> <li>Controlled Radio Buttons</li> <li>Controlled Checkbox</li> </ul> <p>3. Uncontrolled Components</p> <ul> <li>Using Refs with Inputs</li> <li>Accessing DOM Values via useRef</li> <li>Default Values in Uncontrolled Inputs</li> <li>When to Use Uncontrolled Components</li> </ul> <p>4. Form Events</p> <ul> <li>onChange</li> <li>onInput</li> <li>onBlur and onFocus</li> <li>onSubmit</li> <li>onReset</li> <li>Event Object and Preventing Default Behavior</li> </ul> <p>5. Form Submission</p> <ul> <li>Handling Submit Event</li> <li>Prevent Default Form Behavior</li> <li>Collecting Form Data</li> <li>Form Validation Before Submit</li> <li>Sending Data to APIs (Fetch / Axios)</li> </ul> <p>6. Validation in Forms</p> <ul> <li>Client-side vs Server-side Validation</li> <li>Required Fields</li> <li>Pattern Matching and Regex Validation</li> <li>Custom Validation Logic</li> <li>Displaying Error Messages</li> <li>Real-time Validation on Change</li> <li>Debounced Validation</li> </ul> <p>7. Complex Form Inputs</p> <ul> <li>Multiple Checkboxes and Arrays</li> <li>Nested Form Fields (Objects)</li> <li>Dynamic Form Fields (Add / Remove)</li> <li>File Upload Handling</li> <li>Date Pickers and Range Inputs</li> <li>Select with Multiple Options</li> </ul> <p>8. Form State Management</p> <ul> <li>Local State (useState)</li> <li>Global State (Context API / Zustand / Redux)</li> <li>Derived Form State</li> <li>Resetting and Clearing Forms</li> <li>Conditional Rendering in Forms</li> </ul> <p>9. Reusable Form Components</p> <ul> <li>Custom Input Components</li> <li>Custom Select and Radio Components</li> <li>Composable Form Layouts</li> <li>Higher-Order Form Components</li> </ul> <p>10. Error Handling and Feedback</p> <ul> <li>Inline Error Display</li> <li>Global Form Errors</li> <li>Success Messages</li> <li>Disabled Submit Button on Error</li> <li>Toast / Snackbar Notifications</li> </ul> <p>11. Form Libraries in React</p> <ul> <li>React Hook Form</li> <li>Formik</li> <li>Yup for Schema Validation</li> <li>Zod for Type-safe Validation</li> <li>Redux Form</li> <li>Final Form</li> <li>Comparison of Libraries</li> </ul> <p>12. React Hook Form Deep Dive</p> <ul> <li>useForm Hook</li> <li>register and handleSubmit</li> <li>Controller and Controlled Inputs</li> <li>Validation Modes (onChange, onBlur, onSubmit)</li> <li>Error Handling</li> <li>Default Values</li> <li>Nested Fields and Arrays</li> <li>Integrating with Yup or Zod</li> <li>Performance Optimization</li> <li>Custom HookForm Components</li> </ul> <p>13. Formik Deep Dive</p> <ul> <li>useFormik Hook</li> <li>Formik Component</li> <li>Field and ErrorMessage Components</li> <li>ValidationSchema with Yup</li> <li>Handling Complex Forms</li> <li>FieldArray for Dynamic Inputs</li> <li>Reset and Reinitialize Formik State</li> </ul> <p>14. Advanced Techniques</p> <ul> <li>Debounced Input Updates</li> <li>Autosave Forms</li> <li>Multi-step / Wizard Forms</li> <li>Conditional Validation</li> <li>Dependent Dropdowns</li> <li>Persisting Form Data in LocalStorage</li> <li>Prefilling Forms with API Data</li> </ul> <p>15. Accessibility in Forms</p> <ul> <li>Using Labels and ARIA Attributes</li> <li>Focus Management</li> <li>Keyboard Navigation</li> <li>Accessible Error Messages</li> </ul> <p>16. Styling Forms</p> <ul> <li>Default Browser Styling</li> <li>CSS Modules / Styled Components</li> <li>TailwindCSS Form Design</li> <li>Custom Checkbox and Radio Styles</li> <li>Responsive Form Layouts</li> </ul> <p>17. Testing Forms</p> <ul> <li>Unit Testing Form Logic</li> <li>Integration Testing with React Testing Library</li> <li>Mocking Form Events</li> <li>Testing Validation and Errors</li> <li>Snapshot Testing</li> </ul> <p>18. Performance Optimization</p> <ul> <li>Minimizing Re-renders</li> <li>Memoizing Input Components</li> <li>useCallback for Handlers</li> <li>Lazy Validation</li> <li>Partial Form Updates</li> </ul> <p>19. Integration Scenarios</p> <ul> <li>Integrating with APIs and Databases</li> <li>Authentication Forms (Login / Signup)</li> <li>Profile Update Forms</li> <li>Contact Forms with Email APIs</li> <li>Payment / Checkout Forms</li> </ul> <p>20. Best Practices</p> <ul> <li>Keep Forms Declarative</li> <li>Use Controlled Components for Predictability</li> <li>Separate UI and Logic</li> <li>Validate Early and Often</li> <li>Keep Form State Minimal</li> <li>Provide Feedback Immediately</li> <li>Ensure Accessibility and Usability</li> </ul> <p>21. Common Mistakes and Pitfalls</p> <ul> <li>Not Preventing Default Submission</li> <li>Mixing Controlled and Uncontrolled Inputs</li> <li>Overusing Re-renders</li> <li>Ignoring Validation Edge Cases</li> <li>Not Handling Async Errors</li> </ul> <p>22. Real-world Projects and Examples</p> <ul> <li>Login Form with Validation</li> <li>Signup Form with Password Confirmation</li> <li>Multi-step Survey Form</li> <li>Search Form with Debounce</li> <li>File Upload and Preview Form</li> <li>Form Wizard with Progress Bar</li> <li>Reusable Form Builder UI</li> </ul> <p>23. Summary and Roadmap</p> <ul> <li>Foundational Concepts</li> <li>Library-based Handling</li> <li>Advanced Techniques</li> <li>Testing and Optimization</li> <li>Real-world Implementation Flow</li> </ul>"},{"location":"react/8.React%20Forms/#1-introduction-to-forms-in-react","title":"1. Introduction to Forms in React","text":""},{"location":"react/8.React%20Forms/#what-are-forms","title":"What are Forms?","text":"<p>Forms are essential in React applications to collect user inputs such as text, email, passwords, selections, and more. They play a crucial role in creating interactive UIs that allow users to submit information to the app or backend server.</p> <p>React, unlike plain HTML, treats forms as interactive components that can be fully controlled by React\u2019s state management. This allows you to handle user input, validation, and submission logic within your components.</p> <p>React does not automatically handle form data. Instead, you use state hooks (like <code>useState</code>) or refs (like <code>useRef</code>) to manage and read form values. This gives React full control over user interactions, making forms predictable and easy to maintain.</p>"},{"location":"react/8.React%20Forms/#controlled-vs-uncontrolled-components","title":"Controlled vs Uncontrolled Components","text":"<p>In React, form elements can be managed in two ways: controlled and uncontrolled.</p>"},{"location":"react/8.React%20Forms/#controlled-components","title":"Controlled Components","text":"<p>A controlled component is one where the form data is handled by React through component state. Every input element\u2019s value is tied to a state variable, and changes are tracked using the <code>onChange</code> event.</p> <pre><code>function ControlledForm() {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    alert(`Submitted Name: ${name}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        Name:\n        &lt;input \n          type=\"text\" \n          value={name} \n          onChange={(e) =&gt; setName(e.target.value)} \n        /&gt;\n      &lt;/label&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>In this example:</p> <ul> <li>The input\u2019s value is controlled by React (<code>name</code> state).</li> <li>Every keystroke triggers an update to the React state.</li> <li>The UI and data always stay in sync.</li> </ul>"},{"location":"react/8.React%20Forms/#uncontrolled-components","title":"Uncontrolled Components","text":"<p>An uncontrolled component uses the DOM itself to handle form data. Instead of managing state, React accesses input values using refs (references).</p> <pre><code>import { useRef } from \"react\";\n\nfunction UncontrolledForm() {\n  const nameRef = useRef();\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    alert(`Submitted Name: ${nameRef.current.value}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        Name:\n        &lt;input type=\"text\" ref={nameRef} /&gt;\n      &lt;/label&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>In this case:</p> <ul> <li>React does not manage the value directly.</li> <li>The browser keeps track of the input\u2019s value internally.</li> <li>The ref (<code>nameRef</code>) gives access to the current value only when needed.</li> </ul> <p>When to Use Which:</p> <ul> <li>Controlled components \u2192 Better for validation, live feedback, and complex interactions.</li> <li>Uncontrolled components \u2192 Simpler, faster for small forms where minimal logic is needed.</li> </ul>"},{"location":"react/8.React%20Forms/#form-events-overview","title":"Form Events Overview","text":"<p>React provides several form-related event handlers similar to native DOM events. Commonly used ones include:</p> Event Description Example Usage <code>onChange</code> Fires whenever an input\u2019s value changes <code>onChange={(e) =&gt; setValue(e.target.value)}</code> <code>onInput</code> Similar to onChange, fires on every keystroke Useful for real-time input validation <code>onFocus</code> Triggered when an input gains focus <code>onFocus={() =&gt; console.log(\"Focused!\")}</code> <code>onBlur</code> Triggered when an input loses focus <code>onBlur={() =&gt; validateField()}</code> <code>onSubmit</code> Fired when the form is submitted <code>onSubmit={(e) =&gt; handleSubmit(e)}</code> <code>onReset</code> Fired when the form is reset <code>onReset={() =&gt; resetForm()}</code> <code>onInvalid</code> Fired when an input fails HTML5 validation <code>&lt;input required onInvalid={(e) =&gt; console.log(\"Invalid\")} /&gt;</code> <code>onSelect</code> Fired when text inside an input or textarea is selected <code>&lt;textarea onSelect={(e) =&gt; console.log(\"Text selected\")} /&gt;</code> <p>Example:</p> <pre><code>function FormEventsExample() {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"Form submitted with:\", value);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        value={value}\n        onChange={(e) =&gt; setValue(e.target.value)}\n        onFocus={() =&gt; console.log(\"Focused\")}\n        onBlur={() =&gt; console.log(\"Blurred\")}\n      /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>These event handlers make React forms dynamic and reactive, giving developers full control over user input and form behavior.</p>"},{"location":"react/8.React%20Forms/#2-controlled-components","title":"2. Controlled Components","text":"<p>In React, controlled components are form elements whose values are managed by React state. Every input field has its value stored in a state variable, and changes are reflected via event handlers. This approach gives React complete control over the form\u2019s data and behavior.</p>"},{"location":"react/8.React%20Forms/#usestate-for-form-inputs","title":"useState for Form Inputs","text":"<p>The simplest way to manage a form input is by using the <code>useState</code> hook.</p> <pre><code>import { useState } from \"react\";\n\nfunction NameForm() {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    alert(`Submitted name: ${name}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        Name:\n        &lt;input\n          type=\"text\"\n          value={name}\n          onChange={(e) =&gt; setName(e.target.value)}\n        /&gt;\n      &lt;/label&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Explanation:</p> <ul> <li>The input\u2019s value is bound to <code>name</code>.</li> <li>Each keystroke triggers <code>setName()</code> through <code>onChange</code>.</li> <li>The state and UI remain synchronized.</li> </ul>"},{"location":"react/8.React%20Forms/#handling-multiple-inputs","title":"Handling Multiple Inputs","text":"<p>When handling multiple form fields, use a single state object to manage all input values efficiently.</p> <pre><code>import { useState } from \"react\";\n\nfunction MultiInputForm() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    age: \"\",\n  });\n\n  const handleChange = (e) =&gt; {\n    const { name, value } = e.target;\n    setFormData((prev) =&gt; ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"Form Data:\", formData);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input name=\"name\" value={formData.name} onChange={handleChange} placeholder=\"Name\" /&gt;\n      &lt;input name=\"email\" value={formData.email} onChange={handleChange} placeholder=\"Email\" /&gt;\n      &lt;input name=\"age\" value={formData.age} onChange={handleChange} placeholder=\"Age\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#understanding-the-handlechange-function","title":"Understanding the <code>handleChange</code> Function","text":"<p>This function is the heart of controlled form handling when dealing with multiple inputs in React.  </p> <ul> <li>Every input element that triggers an event (<code>onChange</code>) passes an event object <code>e</code>.</li> <li><code>e.target</code> refers to the DOM element that triggered the event (e.g., an <code>&lt;input&gt;</code> field).</li> <li>Each input has a <code>name</code> attribute and a <code>value</code> property.</li> <li>Example:</li> </ul> <pre><code>&lt;input name=\"email\" value=\"user@example.com\" /&gt;\n</code></pre> <p>Here, <code>e.target.name</code> is <code>\"email\"</code>, and <code>e.target.value</code> is <code>\"user@example.com\"</code>.</p> <ul> <li>By destructuring, we extract both in one line:</li> </ul> <pre><code>const { name, value } = e.target;\n</code></pre> <p>Key Idea: The <code>name</code> attribute identifies which field is changing, allowing dynamic updates using computed property names (<code>[name]: value</code>).</p>"},{"location":"react/8.React%20Forms/#updating-state-dynamically","title":"Updating State Dynamically","text":"<p>Sometimes you need to modify the form state based on conditions or previous state. React ensures state immutability, so you always update using the callback form of <code>setState</code>.</p> <pre><code>setFormData((prev) =&gt; ({\n  ...prev,\n  [fieldName]: newValue,\n}));\n</code></pre> <p>This ensures updates are based on the latest state, especially when handling multiple inputs or async updates.</p>"},{"location":"react/8.React%20Forms/#controlled-textarea","title":"Controlled Textarea","text":"<p>A <code>&lt;textarea&gt;</code> in React is controlled the same way as an <code>&lt;input&gt;</code>.</p> <pre><code>function TextAreaExample() {\n  const [message, setMessage] = useState(\"\");\n\n  return (\n    &lt;form&gt;\n      &lt;label&gt;Message:&lt;/label&gt;\n      &lt;textarea\n        value={message}\n        onChange={(e) =&gt; setMessage(e.target.value)}\n        rows={4}\n        cols={40}\n      /&gt;\n      &lt;p&gt;Typed Message: {message}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Unlike HTML, React\u2019s <code>&lt;textarea&gt;</code> uses the <code>value</code> prop instead of inner text to define its content.</p>"},{"location":"react/8.React%20Forms/#controlled-select-dropdown","title":"Controlled Select Dropdown","text":"<p>For dropdowns, React binds the selected option via the <code>value</code> prop.</p> <pre><code>function SelectExample() {\n  const [fruit, setFruit] = useState(\"apple\");\n\n  return (\n    &lt;form&gt;\n      &lt;label&gt;Favorite Fruit:&lt;/label&gt;\n      &lt;select value={fruit} onChange={(e) =&gt; setFruit(e.target.value)}&gt;\n        &lt;option value=\"apple\"&gt;Apple&lt;/option&gt;\n        &lt;option value=\"mango\"&gt;Mango&lt;/option&gt;\n        &lt;option value=\"banana\"&gt;Banana&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;p&gt;You selected: {fruit}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>React ensures that the selected value in the dropdown always reflects the component state.</p>"},{"location":"react/8.React%20Forms/#controlled-radio-buttons","title":"Controlled Radio Buttons","text":"<p>Radio buttons share the same <code>name</code> attribute but different <code>value</code>s. You control them by checking whether the selected value matches the current state.</p> <pre><code>function RadioExample() {\n  const [gender, setGender] = useState(\"male\");\n\n  return (\n    &lt;form&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"radio\"\n          value=\"male\"\n          checked={gender === \"male\"}\n          onChange={(e) =&gt; setGender(e.target.value)}\n        /&gt;\n        Male\n      &lt;/label&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"radio\"\n          value=\"female\"\n          checked={gender === \"female\"}\n          onChange={(e) =&gt; setGender(e.target.value)}\n        /&gt;\n        Female\n      &lt;/label&gt;\n      &lt;p&gt;Selected Gender: {gender}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Key Point: Use <code>checked={state === value}</code> to link radio buttons with state properly.</p>"},{"location":"react/8.React%20Forms/#controlled-checkbox","title":"Controlled Checkbox","text":"<p>Checkboxes use the <code>checked</code> property instead of <code>value</code>. You can handle single or multiple checkboxes easily.</p>"},{"location":"react/8.React%20Forms/#single-checkbox-example","title":"Single Checkbox Example","text":"<pre><code>function CheckboxExample() {\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  return (\n    &lt;form&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"checkbox\"\n          checked={isSubscribed}\n          onChange={(e) =&gt; setIsSubscribed(e.target.checked)}\n        /&gt;\n        Subscribe to newsletter\n      &lt;/label&gt;\n      &lt;p&gt;{isSubscribed ? \"Subscribed \u2705\" : \"Not Subscribed \u274c\"}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#multiple-checkbox-example","title":"Multiple Checkbox Example","text":"<pre><code>function MultiCheckboxExample() {\n  const [skills, setSkills] = useState([]);\n\n  const handleChange = (e) =&gt; {\n    const { value, checked } = e.target;\n    setSkills((prev) =&gt;\n      checked ? [...prev, value] : prev.filter((skill) =&gt; skill !== value)\n    );\n  };\n\n  return (\n    &lt;form&gt;\n      &lt;label&gt;&lt;input type=\"checkbox\" value=\"React\" onChange={handleChange} /&gt; React&lt;/label&gt;\n      &lt;label&gt;&lt;input type=\"checkbox\" value=\"Next.js\" onChange={handleChange} /&gt; Next.js&lt;/label&gt;\n      &lt;label&gt;&lt;input type=\"checkbox\" value=\"TypeScript\" onChange={handleChange} /&gt; TypeScript&lt;/label&gt;\n      &lt;p&gt;Selected Skills: {skills.join(\", \")}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Summary: Controlled components give React full control of form behavior, enabling validation, dynamic updates, and predictable data flow.</p>"},{"location":"react/8.React%20Forms/#3-uncontrolled-components","title":"3. Uncontrolled Components","text":"<p>Uncontrolled components in React are form elements where the data is handled by the DOM itself, not by React state. Instead of keeping input values in a state variable (like with controlled components), you use refs to directly access DOM nodes and read their values only when needed \u2014 such as during form submission.</p>"},{"location":"react/8.React%20Forms/#using-refs-with-inputs","title":"Using Refs with Inputs","text":"<p>In uncontrolled components, we use the <code>useRef</code> hook to get a reference to an input element. This allows us to directly access its value from the DOM.</p> <pre><code>import { useRef } from \"react\";\n\nfunction UncontrolledInputExample() {\n  const nameRef = useRef();\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    alert(`Name entered: ${nameRef.current.value}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        Name:\n        &lt;input type=\"text\" ref={nameRef} /&gt;\n      &lt;/label&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Explanation:</p> <ul> <li><code>useRef()</code> creates a persistent reference to the input element.</li> <li><code>ref={nameRef}</code> attaches that reference to the <code>&lt;input&gt;</code> element.</li> <li>When submitted, <code>nameRef.current.value</code> retrieves the current text in the input field.</li> </ul> <p>React does not re-render the component on each keystroke \u2014 the DOM manages the data.</p>"},{"location":"react/8.React%20Forms/#accessing-dom-values-via-useref","title":"Accessing DOM Values via <code>useRef</code>","text":"<p>You can access any input\u2019s value directly from the ref without relying on React\u2019s state.</p> <pre><code>function MultiRefForm() {\n  const nameRef = useRef();\n  const emailRef = useRef();\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"Name:\", nameRef.current.value);\n    console.log(\"Email:\", emailRef.current.value);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" placeholder=\"Name\" ref={nameRef} /&gt;\n      &lt;input type=\"email\" placeholder=\"Email\" ref={emailRef} /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Key Point: Each <code>ref</code> gives you direct access to the DOM node. This is useful for reading values or focusing inputs, but not for real-time validation or UI updates.</p>"},{"location":"react/8.React%20Forms/#default-values-in-uncontrolled-inputs","title":"Default Values in Uncontrolled Inputs","text":"<p>Uncontrolled inputs uses the defaultValue or defaultChecked props to set initial values, since React doesn\u2019t control their state.</p> <pre><code>function DefaultValueExample() {\n  const cityRef = useRef();\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    alert(`City: ${cityRef.current.value}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        City:\n        &lt;input type=\"text\" defaultValue=\"Delhi\" ref={cityRef} /&gt;\n      &lt;/label&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Note:</p> <ul> <li><code>defaultValue</code> sets the starting value only once (when rendered).</li> <li>The DOM keeps track of future changes internally.</li> <li>You can\u2019t use React state to update these values after mounting.</li> </ul>"},{"location":"react/8.React%20Forms/#when-to-use-uncontrolled-components","title":"When to Use Uncontrolled Components","text":"<p>While controlled components are preferred for most modern React apps, uncontrolled components still have valid use cases:</p>"},{"location":"react/8.React%20Forms/#use-uncontrolled-components-when","title":"\u2705 Use Uncontrolled Components When","text":"<ul> <li>You need simple, minimal forms without real-time validation.</li> <li>You are migrating legacy code or integrating with non-React code.</li> <li>You need to read values only on submit (not on every keystroke).</li> <li>You want to minimize re-renders in large forms.</li> </ul>"},{"location":"react/8.React%20Forms/#avoid-them-when","title":"\u274c Avoid Them When","text":"<ul> <li>You need instant feedback (like showing validation errors).</li> <li>You want to conditionally update UI based on user input.</li> <li>You need to synchronize input values across multiple components.</li> </ul> <p>Summary:</p> Feature Controlled Component Uncontrolled Component Data Managed By React State Browser (DOM) Access Value via <code>state</code> via <code>ref</code> Real-time Updates Yes No Default Values <code>value</code> prop <code>defaultValue</code> prop Best For Validation, dynamic UI Simple, read-only forms <p>Uncontrolled components are simpler but offer less control \u2014 they\u2019re best used in small or static forms where full state management isn\u2019t needed.</p>"},{"location":"react/8.React%20Forms/#4-form-events","title":"4. Form Events","text":"<p>React provides a unified way to handle form events, similar to how you would in plain JavaScript \u2014 but wrapped in the Synthetic Event System. This makes form handling consistent and cross-browser compatible. Let\u2019s explore the most important form events you\u2019ll use as a frontend developer.</p>"},{"location":"react/8.React%20Forms/#onchange","title":"onChange","text":"<p>The <code>onChange</code> event fires whenever the value of an input, textarea, or select changes. In React, unlike plain HTML, <code>onChange</code> is triggered on every keystroke, not just when focus is lost.</p> <pre><code>import { useState } from \"react\";\n\nfunction OnChangeExample() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    &lt;form&gt;\n      &lt;label&gt;\n        Enter your name:\n        &lt;input\n          type=\"text\"\n          value={value}\n          onChange={(e) =&gt; setValue(e.target.value)}\n        /&gt;\n      &lt;/label&gt;\n      &lt;p&gt;Current value: {value}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Explanation:</p> <ul> <li>Each keystroke triggers <code>onChange</code>.</li> <li>The input value updates React state using <code>setValue</code>.</li> <li>React re-renders the component with the latest value.</li> </ul>"},{"location":"react/8.React%20Forms/#oninput","title":"onInput","text":"<p>The <code>onInput</code> event behaves very similarly to <code>onChange</code>, but it\u2019s tied more directly to the browser\u2019s native input event. It\u2019s especially useful for real-time validation or character counting.</p> <pre><code>function OnInputExample() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;form&gt;\n      &lt;textarea\n        onInput={(e) =&gt; setCount(e.target.value.length)}\n        placeholder=\"Type your message...\"\n      /&gt;\n      &lt;p&gt;Character count: {count}&lt;/p&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Use Case: When you need to react to every input change instantly \u2014 such as character counters, search filters, or live previews.</p>"},{"location":"react/8.React%20Forms/#onblur-and-onfocus","title":"onBlur and onFocus","text":"<p>These two events handle focus changes in form elements.</p> <ul> <li><code>onFocus</code> \u2192 triggers when an element gains focus.  </li> <li><code>onBlur</code> \u2192 triggers when an element loses focus.</li> </ul> <p>They are often used for field validation, styling effects, or UI hints.</p> <pre><code>function FocusBlurExample() {\n  const [touched, setTouched] = useState(false);\n\n  return (\n    &lt;form&gt;\n      &lt;input\n        type=\"email\"\n        placeholder=\"Enter email\"\n        onFocus={() =&gt; console.log(\"Focused\")}\n        onBlur={() =&gt; setTouched(true)}\n      /&gt;\n      {touched &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;Please enter a valid email&lt;/p&gt;}\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Tip: </p> <ul> <li><code>onFocus</code> and <code>onBlur</code> do not bubble in the DOM, but React provides synthetic versions that do bubble, so they work consistently across elements.</li> </ul>"},{"location":"react/8.React%20Forms/#onsubmit","title":"onSubmit","text":"<p>The <code>onSubmit</code> event is triggered when a form is submitted (e.g., pressing the \u201cSubmit\u201d button or hitting Enter). You almost always use it together with <code>e.preventDefault()</code> to prevent the browser\u2019s default form submission (page reload).</p> <pre><code>function OnSubmitExample() {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault(); // Prevent page reload\n    alert(`Form submitted with name: ${name}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        value={name}\n        onChange={(e) =&gt; setName(e.target.value)}\n        placeholder=\"Enter your name\"\n      /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Key Notes:</p> <ul> <li>Always call <code>e.preventDefault()</code> in React forms unless you specifically want a full page reload.</li> <li>Access field data from state or refs before submission.</li> </ul>"},{"location":"react/8.React%20Forms/#onreset","title":"onReset","text":"<p>The <code>onReset</code> event is fired when a form is reset (usually by clicking a reset button). It clears all input values to their initial state.</p> <pre><code>function OnResetExample() {\n  const [formData, setFormData] = useState({ name: \"\", email: \"\" });\n\n  const handleReset = () =&gt; {\n    console.log(\"Form reset\");\n    setFormData({ name: \"\", email: \"\" });\n  };\n\n  return (\n    &lt;form onReset={handleReset}&gt;\n      &lt;input\n        name=\"name\"\n        value={formData.name}\n        onChange={(e) =&gt;\n          setFormData((prev) =&gt; ({ ...prev, name: e.target.value }))\n        }\n        placeholder=\"Name\"\n      /&gt;\n      &lt;input\n        name=\"email\"\n        value={formData.email}\n        onChange={(e) =&gt;\n          setFormData((prev) =&gt; ({ ...prev, email: e.target.value }))\n        }\n        placeholder=\"Email\"\n      /&gt;\n      &lt;button type=\"reset\"&gt;Reset&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Note: </p> <ul> <li>The default browser reset only works for uncontrolled inputs.  </li> <li>In controlled components, you must manually clear state values, as shown above.</li> </ul>"},{"location":"react/8.React%20Forms/#event-object-and-preventing-default-behavior","title":"Event Object and Preventing Default Behavior","text":"<p>Every React event handler receives a Synthetic Event object \u2014 a wrapper around the native DOM event, ensuring consistent behavior across browsers.</p>"},{"location":"react/8.React%20Forms/#common-event-properties","title":"Common Event Properties","text":"Property Description <code>e.target</code> The element that triggered the event <code>e.currentTarget</code> The element the event handler is bound to <code>e.preventDefault()</code> Prevents the default browser behavior (e.g., page reload on submit) <code>e.stopPropagation()</code> Stops the event from bubbling up to parent elements <code>e.nativeEvent</code> Access the original DOM event (rarely needed)"},{"location":"react/8.React%20Forms/#example","title":"Example","text":"<pre><code>function EventExample() {\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"Form submitted without page reload!\");\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" placeholder=\"Enter something...\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> Event Description <code>onChange</code> Fires when the value of an input, textarea, or select changes. <code>onInput</code> Triggers on every keystroke or input event, often used for real-time validation. <code>onFocus</code> Called when an element gains focus. <code>onBlur</code> Called when an element loses focus. <code>onSubmit</code> Fires when a form is submitted. <code>onReset</code> Fires when a form is reset using a reset button or manually. <code>onInvalid</code> Triggered when a form input fails HTML5 validation. <code>onSelect</code> Fires when text inside an input or textarea is selected. <code>onBeforeInput</code> Occurs before input is actually inserted, useful for custom input validation. <code>onCompositionStart</code> Fires when text composition starts (e.g., IME input for languages like Japanese or Chinese). <code>onCompositionUpdate</code> Fires as the text composition updates. <code>onCompositionEnd</code> Fires when the text composition ends. <code>onKeyDown</code> Triggered when a key is pressed down while the input is focused. <code>onKeyUp</code> Triggered when a pressed key is released. <code>onKeyPress</code> (Deprecated) Similar to <code>onKeyDown</code>, but only for printable keys. <code>onClick</code> While not strictly a \u201cform event,\u201d it\u2019s commonly used on buttons inside forms. <code>onChangeCapture</code> Same as <code>onChange</code> but fires during the capture phase instead of the bubbling phase. <code>onFocusCapture</code> Same as <code>onFocus</code> but fires during the capture phase. <code>onBlurCapture</code> Same as <code>onBlur</code> but fires during the capture phase. <p>These events form the backbone of form interactivity in React \u2014 giving you full control over user input, validation, and submission behavior.</p>"},{"location":"react/8.React%20Forms/#complete-list-of-form-event-properties-in-react","title":"\ud83e\udde9 Complete List of Form Event Properties in React","text":"<p>Each form-related event in React is a SyntheticEvent, which wraps the native DOM event to ensure consistent behavior across browsers.</p> <p>Here\u2019s a comprehensive list of common properties available on form events \ud83d\udc47</p> Property Type Description <code>bubbles</code> <code>boolean</code> Indicates whether the event bubbles up through the DOM. <code>cancelable</code> <code>boolean</code> Whether the event\u2019s default action can be prevented (e.g., with <code>e.preventDefault()</code>). <code>currentTarget</code> <code>EventTarget</code> The element currently handling the event (usually same as <code>target</code> in React). <code>defaultPrevented</code> <code>boolean</code> True if <code>preventDefault()</code> has been called. <code>eventPhase</code> <code>number</code> Indicates which phase of the event flow is being processed (capturing, target, or bubbling). <code>isTrusted</code> <code>boolean</code> True if the event was generated by a user action, not by a script. <code>nativeEvent</code> <code>Event</code> The underlying native browser event. <code>target</code> <code>EventTarget</code> The element that triggered the event (e.g., an input field). <code>timeStamp</code> <code>number</code> The time (in milliseconds) at which the event was created. <code>type</code> <code>string</code> The name/type of the event (e.g., <code>\"change\"</code>, <code>\"submit\"</code>)."},{"location":"react/8.React%20Forms/#additional-useful-methods","title":"\ud83e\udde0 Additional Useful Methods","text":"Method Description <code>preventDefault()</code> Prevents the browser\u2019s default action (e.g., page reload on submit). <code>stopPropagation()</code> Prevents the event from bubbling up to parent elements. <code>persist()</code> In React (for older versions), keeps the event from being released back to the event pool. Usually not needed in React 17+."},{"location":"react/8.React%20Forms/#input-specific-properties","title":"\ud83e\uddcd\u200d\u2642\ufe0f Input-Specific Properties","text":"<p>When dealing with inputs, you often access these through <code>e.target</code>:</p> Property (via e.target) Type Description <code>name</code> <code>string</code> The input\u2019s name attribute, used to identify fields. <code>value</code> <code>string / number / boolean</code> The current value of the input. <code>checked</code> <code>boolean</code> For checkboxes and radio buttons \u2014 indicates if the input is selected. <code>files</code> <code>FileList</code> For <code>&lt;input type=\"file\"&gt;</code>, contains selected files. <code>type</code> <code>string</code> The input\u2019s type (e.g., text, password, email). <code>id</code> <code>string</code> The ID of the input element. <code>form</code> <code>HTMLFormElement</code> Reference to the parent <code>&lt;form&gt;</code> element, if applicable."},{"location":"react/8.React%20Forms/#5-form-submission","title":"5. Form Submission","text":"<p>Form submission is a critical part of handling user input in React. Instead of letting the browser refresh or navigate away, React allows you to handle form submission programmatically.</p>"},{"location":"react/8.React%20Forms/#handling-submit-event","title":"Handling Submit Event","text":"<p>React uses the <code>onSubmit</code> event to handle form submissions.</p> <pre><code>function SimpleForm() {\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault(); // prevent page reload\n    console.log(\"Form submitted!\");\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" placeholder=\"Enter your name\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#explanation","title":"Explanation","text":"<ul> <li>The <code>onSubmit</code> event is triggered when the user clicks the submit button or presses Enter inside an input.</li> <li>React passes the event object to <code>handleSubmit</code>.</li> <li>You can then control what happens next (validate, send data, reset form, etc.).</li> </ul>"},{"location":"react/8.React%20Forms/#prevent-default-form-behavior","title":"Prevent Default Form Behavior","text":"<p>By default, browsers refresh the page on form submission. React prevents that behavior using <code>e.preventDefault()</code>.</p> <pre><code>const handleSubmit = (e) =&gt; {\n  e.preventDefault(); // stops page reload\n  // custom logic goes here\n};\n</code></pre> <p>This allows you to:</p> <ul> <li>Keep data in React state</li> <li>Validate before submission</li> <li>Send data via JavaScript (API call, local storage, etc.)</li> </ul>"},{"location":"react/8.React%20Forms/#collecting-form-data","title":"Collecting Form Data","text":"<p>In React, form data is usually managed using controlled components (with <code>useState</code>) or via FormData API.</p>"},{"location":"react/8.React%20Forms/#using-controlled-inputs","title":"\u2705 Using Controlled Inputs","text":"<pre><code>function UserForm() {\n  const [formData, setFormData] = useState({ name: \"\", email: \"\" });\n\n  const handleChange = (e) =&gt; {\n    const { name, value } = e.target;\n    setFormData((prev) =&gt; ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"Collected Data:\", formData);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input name=\"name\" value={formData.name} onChange={handleChange} placeholder=\"Name\" /&gt;\n      &lt;input name=\"email\" value={formData.email} onChange={handleChange} placeholder=\"Email\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#using-formdata-api-for-uncontrolled-inputs","title":"\u2705 Using FormData API (for uncontrolled inputs)","text":"<pre><code>function FormDataExample() {\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const data = Object.fromEntries(formData.entries());\n    console.log(\"Form Data:\", data);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input name=\"username\" placeholder=\"Username\" /&gt;\n      &lt;input name=\"age\" type=\"number\" /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 <code>FormData</code> is great for file uploads and when using uncontrolled inputs.</p>"},{"location":"react/8.React%20Forms/#form-validation-before-submit","title":"Form Validation Before Submit","text":"<p>Validation ensures that users fill out the form correctly before data is processed.</p>"},{"location":"react/8.React%20Forms/#basic-example","title":"Basic Example","text":"<pre><code>function ValidatedForm() {\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n\n    if (!email.includes(\"@\")) {\n      setError(\"Please enter a valid email.\");\n      return;\n    }\n\n    setError(\"\");\n    console.log(\"Form Submitted:\", email);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=\"email\"\n        value={email}\n        onChange={(e) =&gt; setEmail(e.target.value)}\n        placeholder=\"Enter email\"\n      /&gt;\n      {error &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{error}&lt;/p&gt;}\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 You can also use libraries like Yup, Zod, or React Hook Form for more advanced validation.</p>"},{"location":"react/8.React%20Forms/#sending-data-to-apis-fetch-axios","title":"Sending Data to APIs (Fetch / Axios)","text":"<p>Once validated, data can be sent to a backend API using <code>fetch()</code> or <code>axios</code>.</p>"},{"location":"react/8.React%20Forms/#example-with-fetch","title":"Example with Fetch","text":"<pre><code>const handleSubmit = async (e) =&gt; {\n  e.preventDefault();\n  const res = await fetch(\"/api/submit\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(formData),\n  });\n\n  const data = await res.json();\n  console.log(\"Response:\", data);\n};\n</code></pre>"},{"location":"react/8.React%20Forms/#example-with-axios","title":"Example with Axios","text":"<pre><code>import axios from \"axios\";\n\nconst handleSubmit = async (e) =&gt; {\n  e.preventDefault();\n  try {\n    const res = await axios.post(\"/api/submit\", formData);\n    console.log(\"Server Response:\", res.data);\n  } catch (err) {\n    console.error(\"Error submitting form:\", err);\n  }\n};\n</code></pre> <p>\u2705 Always handle success and error responses, and consider adding a loading state for better UX.</p>"},{"location":"react/8.React%20Forms/#summary","title":"\ud83e\udde0 Summary","text":"Concept Purpose <code>onSubmit</code> Handles form submission <code>e.preventDefault()</code> Prevents page reload Controlled Inputs Store form values in React state <code>FormData</code> API Collects values from form elements directly Validation Ensures correct data before sending Fetch / Axios Sends data to backend servers or APIs <p>React gives you full control over how and when your forms are submitted \u2014 making it flexible for everything from small forms to full-scale applications.</p>"},{"location":"react/8.React%20Forms/#6-validation-in-forms","title":"6. Validation in Forms","text":"<p>Form validation ensures that the data entered by users is correct, complete, and formatted properly before submission. React gives full flexibility to implement both client-side and server-side validation \u2014 manually or with libraries.</p>"},{"location":"react/8.React%20Forms/#client-side-vs-server-side-validation","title":"Client-side vs Server-side Validation","text":""},{"location":"react/8.React%20Forms/#client-side-validation","title":"\ud83d\udda5\ufe0f Client-side Validation","text":"<ul> <li>Happens in the browser before sending data to the server.  </li> <li>Prevents unnecessary network requests.  </li> <li>Ensures faster feedback for users.</li> </ul> <p>Example:</p> <pre><code>if (!email.includes(\"@\")) {\n  setError(\"Invalid email address\");\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#server-side-validation","title":"\u2601\ufe0f Server-side Validation","text":"<ul> <li>Happens after data reaches the backend.</li> <li>Important for security \u2014 users can bypass client-side checks.</li> <li>Validates data before saving to the database.</li> </ul> <p>Example (Node.js backend):</p> <pre><code>if (!req.body.email.includes(\"@\")) {\n  return res.status(400).json({ error: \"Invalid email\" });\n}\n</code></pre> <p>\ud83d\udca1 Best practice: Always combine both \u2014 client-side for UX, server-side for data integrity.</p>"},{"location":"react/8.React%20Forms/#required-fields","title":"Required Fields","text":"<p>Marking fields as required prevents form submission if empty.</p>"},{"location":"react/8.React%20Forms/#html5-required-attribute","title":"HTML5 Required Attribute","text":"<pre><code>&lt;input type=\"text\" name=\"username\" required /&gt;\n</code></pre>"},{"location":"react/8.React%20Forms/#react-validation-example","title":"React Validation Example","text":"<pre><code>function RequiredForm() {\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    if (!name.trim()) {\n      setError(\"Name is required!\");\n      return;\n    }\n    setError(\"\");\n    console.log(\"Submitted:\", name);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input value={name} onChange={(e) =&gt; setName(e.target.value)} placeholder=\"Enter name\" /&gt;\n      {error &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{error}&lt;/p&gt;}\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#pattern-matching-and-regex-validation","title":"Pattern Matching and Regex Validation","text":"<p>Regex helps enforce specific input formats like email, phone, or password patterns.</p>"},{"location":"react/8.React%20Forms/#example-email-pattern","title":"Example: Email Pattern","text":"<pre><code>const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nif (!emailPattern.test(email)) {\n  setError(\"Please enter a valid email address.\");\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#example-in-input-attribute","title":"Example in Input Attribute","text":"<pre><code>&lt;input type=\"text\" name=\"phone\" pattern=\"[0-9]{10}\" title=\"Enter 10-digit number\" /&gt;\n</code></pre> <p>\ud83d\udca1 Combine pattern attributes for HTML5 validation and regex logic for controlled form validation.</p>"},{"location":"react/8.React%20Forms/#custom-validation-logic","title":"Custom Validation Logic","text":"<p>For complex rules that go beyond regex or required fields, use custom functions.</p> <pre><code>function validatePassword(password) {\n  if (password.length &lt; 8) return \"Password must be at least 8 characters.\";\n  if (!/[A-Z]/.test(password)) return \"Must contain at least one uppercase letter.\";\n  if (!/\\d/.test(password)) return \"Must include at least one number.\";\n  return \"\";\n}\n\nfunction PasswordForm() {\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    const validationError = validatePassword(password);\n    if (validationError) return setError(validationError);\n    setError(\"\");\n    console.log(\"Password valid!\");\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=\"password\"\n        value={password}\n        onChange={(e) =&gt; setPassword(e.target.value)}\n        placeholder=\"Enter password\"\n      /&gt;\n      {error &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{error}&lt;/p&gt;}\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"react/8.React%20Forms/#displaying-error-messages","title":"Displaying Error Messages","text":"<p>Clear and visible error messages improve UX.</p>"},{"location":"react/8.React%20Forms/#techniques","title":"Techniques","text":"<ol> <li>Inline under field    Display below the input element.</li> </ol> <pre><code>{error &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{error}&lt;/p&gt;}\n</code></pre> <ol> <li> <p>Tooltip or Toast message    Use external libraries like React Toastify or SweetAlert2 for alert-style errors.</p> </li> <li> <p>Highlight invalid fields </p> </li> </ol> <pre><code>&lt;input style={{ borderColor: error ? \"red\" : \"#ccc\" }} /&gt;\n</code></pre>"},{"location":"react/8.React%20Forms/#real-time-validation-on-change","title":"Real-time Validation on Change","text":"<p>Instead of waiting for form submission, validate as the user types.</p> <pre><code>function RealTimeValidation() {\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleChange = (e) =&gt; {\n    const value = e.target.value;\n    setEmail(value);\n    setError(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value) ? \"\" : \"Invalid email\");\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input type=\"email\" value={email} onChange={handleChange} placeholder=\"Enter email\" /&gt;\n      {error &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{error}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 Use this for better interactivity and guidance during input.</p>"},{"location":"react/8.React%20Forms/#debounced-validation","title":"Debounced Validation","text":"<p>For performance, especially in long or heavy validation (like API-based checks), you can delay validation until the user stops typing.</p>"},{"location":"react/8.React%20Forms/#example-using-settimeout","title":"Example using <code>setTimeout</code>","text":"<pre><code>import { useEffect, useState } from \"react\";\n\nfunction DebouncedValidation() {\n  const [username, setUsername] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  useEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n      if (username &amp;&amp; username.length &lt; 4) {\n        setError(\"Username must be at least 4 characters long\");\n      } else {\n        setError(\"\");\n      }\n    }, 500); // runs 500ms after user stops typing\n\n    return () =&gt; clearTimeout(timer);\n  }, [username]);\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        value={username}\n        onChange={(e) =&gt; setUsername(e.target.value)}\n        placeholder=\"Enter username\"\n      /&gt;\n      {error &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{error}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 Debouncing helps reduce unnecessary re-validation and improves app performance.</p>"},{"location":"react/8.React%20Forms/#summary_1","title":"Summary","text":"Concept Description Client-side Validation Runs in browser for instant feedback Server-side Validation Runs on backend for security Required Fields Ensure mandatory inputs are filled Regex / Pattern Matching Enforce specific input formats Custom Logic Define complex validation conditions Error Messages Display user-friendly validation feedback Real-time / Debounced Validation Validate while typing or after delay for performance <p>React makes validation flexible and fully customizable, letting you combine manual, HTML5, and library-based approaches for professional-grade form handling.</p>"},{"location":"react/8.React%20Forms/#7-complex-form-inputs","title":"7. Complex Form Inputs","text":"<p>As forms grow, you often need to handle advanced input types \u2014 arrays, objects, dynamic lists, and files. React provides full control to manage these complex structures cleanly and efficiently.</p>"},{"location":"react/8.React%20Forms/#multiple-checkboxes-and-arrays","title":"Multiple Checkboxes and Arrays","text":"<p>When users select multiple options, you can store them in an array in React state.</p> <pre><code>function MultiCheckboxForm() {\n  const [selected, setSelected] = useState&lt;string[]&gt;([]);\n\n  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    const { value, checked } = e.target;\n    setSelected((prev) =&gt;\n      checked ? [...prev, value] : prev.filter((v) =&gt; v !== value)\n    );\n  };\n\n  const handleSubmit = (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    console.log(\"Selected:\", selected);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        &lt;input type=\"checkbox\" value=\"HTML\" onChange={handleChange} /&gt; HTML\n      &lt;/label&gt;\n      &lt;label&gt;\n        &lt;input type=\"checkbox\" value=\"CSS\" onChange={handleChange} /&gt; CSS\n      &lt;/label&gt;\n      &lt;label&gt;\n        &lt;input type=\"checkbox\" value=\"JavaScript\" onChange={handleChange} /&gt; JavaScript\n      &lt;/label&gt;\n\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 Here, we add or remove items from an array depending on the checkbox state.</p>"},{"location":"react/8.React%20Forms/#nested-form-fields-objects","title":"Nested Form Fields (Objects)","text":"<p>Sometimes your form data structure includes nested objects, such as <code>user.name.first</code>.</p> <pre><code>function NestedForm() {\n  const [formData, setFormData] = useState({\n    user: { firstName: \"\", lastName: \"\" },\n  });\n\n  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    const { name, value } = e.target;\n    setFormData((prev) =&gt; ({\n      ...prev,\n      user: {\n        ...prev.user,\n        [name]: value,\n      },\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    console.log(formData);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        name=\"firstName\"\n        value={formData.user.firstName}\n        onChange={handleChange}\n        placeholder=\"First Name\"\n      /&gt;\n      &lt;input\n        name=\"lastName\"\n        value={formData.user.lastName}\n        onChange={handleChange}\n        placeholder=\"Last Name\"\n      /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 This pattern scales well for structured or nested forms like user profiles or address inputs.</p>"},{"location":"react/8.React%20Forms/#dynamic-form-fields-add-remove","title":"Dynamic Form Fields (Add / Remove)","text":"<p>When your form has a variable number of fields (like adding multiple phone numbers or skills), you can dynamically manage them using arrays of objects in React state.</p> <pre><code>function DynamicFields() {\n  const [fields, setFields] = useState([{ id: 1, value: \"\" }]);\n\n  const addField = () =&gt; setFields([...fields, { id: Date.now(), value: \"\" }]);\n\n  const removeField = (id: number) =&gt;\n    setFields(fields.filter((field) =&gt; field.id !== id));\n\n  const handleChange = (id: number, value: string) =&gt;\n    setFields(\n      fields.map((field) =&gt; (field.id === id ? { ...field, value } : field))\n    );\n\n  const handleSubmit = (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    console.log(\"Fields:\", fields);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      {fields.map((field) =&gt; (\n        &lt;div key={field.id}&gt;\n          &lt;input\n            value={field.value}\n            onChange={(e) =&gt; handleChange(field.id, e.target.value)}\n            placeholder=\"Enter value\"\n          /&gt;\n          &lt;button type=\"button\" onClick={() =&gt; removeField(field.id)}&gt;\n            Remove\n          &lt;/button&gt;\n        &lt;/div&gt;\n      ))}\n      &lt;button type=\"button\" onClick={addField}&gt;\n        Add Field\n      &lt;/button&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 Great for forms where users can input variable-length data \u2014 e.g., skills, education, or phone numbers.</p>"},{"location":"react/8.React%20Forms/#file-upload-handling","title":"File Upload Handling","text":"<p>React can handle file uploads by accessing files through <code>e.target.files</code>.</p> <pre><code>function FileUpload() {\n  const [file, setFile] = useState&lt;File | null&gt;(null);\n\n  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) setFile(selectedFile);\n  };\n\n  const handleSubmit = (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n\n    if (!file) return alert(\"Please select a file!\");\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    // Example upload\n    fetch(\"/api/upload\", {\n      method: \"POST\",\n      body: formData,\n    });\n\n    console.log(\"File uploaded:\", file.name);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"file\" onChange={handleChange} /&gt;\n      &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 Use the FormData API for sending files to the backend. For multiple files, loop through <code>e.target.files</code>.</p>"},{"location":"react/8.React%20Forms/#date-pickers-and-range-inputs","title":"Date Pickers and Range Inputs","text":"<p>You can use native HTML inputs or libraries like React Datepicker for advanced date handling.</p>"},{"location":"react/8.React%20Forms/#native-date-and-range-inputs","title":"Native Date and Range Inputs","text":"<pre><code>function DateRangeForm() {\n  const [date, setDate] = useState(\"\");\n  const [range, setRange] = useState(50);\n\n  return (\n    &lt;form&gt;\n      &lt;label&gt;\n        Select Date:\n        &lt;input\n          type=\"date\"\n          value={date}\n          onChange={(e) =&gt; setDate(e.target.value)}\n        /&gt;\n      &lt;/label&gt;\n\n      &lt;label&gt;\n        Range (0\u2013100):\n        &lt;input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          value={range}\n          onChange={(e) =&gt; setRange(Number(e.target.value))}\n        /&gt;\n        &lt;span&gt;{range}&lt;/span&gt;\n      &lt;/label&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 Native date and range inputs are great for basic use. For advanced functionality (like selecting date ranges or calendars), use libraries like:</p> <ul> <li><code>react-datepicker</code></li> <li><code>dayjs</code> or <code>date-fns</code> for formatting and validation</li> </ul>"},{"location":"react/8.React%20Forms/#select-with-multiple-options","title":"Select with Multiple Options","text":"<p>React\u2019s <code>&lt;select&gt;</code> can handle multiple selections using <code>multiple</code> attribute.</p> <pre><code>function MultiSelectExample() {\n  const [selected, setSelected] = useState&lt;string[]&gt;([]);\n\n  const handleChange = (e: React.ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; {\n    const values = Array.from(e.target.selectedOptions, (option) =&gt; option.value);\n    setSelected(values);\n  };\n\n  const handleSubmit = (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    console.log(\"Selected:\", selected);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;select multiple value={selected} onChange={handleChange}&gt;\n        &lt;option value=\"html\"&gt;HTML&lt;/option&gt;\n        &lt;option value=\"css\"&gt;CSS&lt;/option&gt;\n        &lt;option value=\"javascript\"&gt;JavaScript&lt;/option&gt;\n        &lt;option value=\"react\"&gt;React&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\ud83d\udca1 Multi-select dropdowns are useful for categories, tags, or skill selections.</p> Concept Description Multiple Checkboxes Store multiple selections in an array Nested Fields Manage hierarchical or grouped data Dynamic Fields Add or remove fields dynamically File Uploads Use FormData API to upload files Date &amp; Range Inputs Use native inputs or libraries for better UX Multi-Select Dropdowns Allow users to choose multiple options easily <p>React\u2019s controlled form system gives complete control over even the most complex form structures, making it ideal for modern, dynamic applications.</p>"},{"location":"react/8.React%20Forms/#8-form-state-management","title":"8. Form State Management","text":"<p>Form state management determines how form data, validation, and UI interactions are tracked and updated. In React, you can manage form state locally within a component or globally across multiple components.</p>"},{"location":"react/8.React%20Forms/#local-state-usestate","title":"Local State (useState)","text":"<p>For simple forms, managing state locally using <code>useState</code> is straightforward and efficient.</p> <pre><code>import { useState } from \"react\";\n\nexport default function SimpleForm() {\n  const [formData, setFormData] = useState({ name: \"\", email: \"\" });\n\n  const handleChange = (e) =&gt; {\n    const { name, value } = e.target;\n    setFormData((prev) =&gt; ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    console.log(formData);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input name=\"name\" value={formData.name} onChange={handleChange} /&gt;\n      &lt;input name=\"email\" value={formData.email} onChange={handleChange} /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\u2705 Best for small forms (e.g., login, feedback). \u274c Not ideal for multi-step or globally shared forms.</p>"},{"location":"react/8.React%20Forms/#global-state-context-api-zustand-redux","title":"Global State (Context API / Zustand / Redux)","text":"<p>For large or multi-step forms, you can lift state up or use a global store to share form data between components.</p>"},{"location":"react/8.React%20Forms/#example-using-context-api","title":"Example using Context API","text":"<pre><code>import { createContext, useContext, useState } from \"react\";\n\nconst FormContext = createContext();\n\nexport function FormProvider({ children }) {\n  const [formData, setFormData] = useState({});\n  return (\n    &lt;FormContext.Provider value={{ formData, setFormData }}&gt;\n      {children}\n    &lt;/FormContext.Provider&gt;\n  );\n}\n\nexport function useForm() {\n  return useContext(FormContext);\n}\n</code></pre> <p>Usage:</p> <pre><code>function Step1() {\n  const { formData, setFormData } = useForm();\n  return (\n    &lt;input\n      name=\"username\"\n      value={formData.username || \"\"}\n      onChange={(e) =&gt;\n        setFormData((prev) =&gt; ({ ...prev, username: e.target.value }))\n      }\n    /&gt;\n  );\n}\n</code></pre> <p>\u2705 Great for multi-step forms or global data sharing. \u274c Slightly more setup overhead.</p>"},{"location":"react/8.React%20Forms/#derived-form-state","title":"Derived Form State","text":"<p>Derived state is computed based on existing form data \u2014 not stored separately. This reduces redundancy and keeps the state minimal.</p> <pre><code>const isValid = formData.name &amp;&amp; formData.email.includes(\"@\");\nconst isDirty = formData.name !== \"\" || formData.email !== \"\";\n</code></pre> <p>\u2705 Keeps logic simple and avoids duplicate states.</p>"},{"location":"react/8.React%20Forms/#resetting-and-clearing-forms","title":"Resetting and Clearing Forms","text":"<p>You can reset a form to its initial values easily.</p> <pre><code>const initialForm = { name: \"\", email: \"\" };\nconst [formData, setFormData] = useState(initialForm);\n\nconst handleReset = () =&gt; setFormData(initialForm);\n</code></pre> <p>\u2705 Useful for \u201cClear\u201d or \u201cReset\u201d buttons. \ud83e\udde0 Often used after a successful submission.</p>"},{"location":"react/8.React%20Forms/#conditional-rendering-in-forms","title":"Conditional Rendering in Forms","text":"<p>Show or hide certain fields based on user selections or conditions.</p> <pre><code>{formData.role === \"student\" &amp;&amp; (\n  &lt;input\n    type=\"text\"\n    name=\"college\"\n    placeholder=\"Enter college name\"\n    onChange={handleChange}\n  /&gt;\n)}\n</code></pre> <p>\u2705 Enables dynamic form behavior. \u2699\ufe0f Keep conditions readable with helper functions.</p>"},{"location":"react/8.React%20Forms/#summary-table","title":"Summary Table","text":"State Type When to Use Common Tools Local State Small, self-contained forms <code>useState</code>, <code>useReducer</code> Global State Multi-step or shared data <code>Context API</code>, <code>Zustand</code>, <code>Redux</code> Derived State Computed values, validation flags Local variables Reset / Clear Clear or reset actions <code>setFormData(initialState)</code> Conditional Rendering Dynamic form behavior JSX Conditions"},{"location":"react/8.React%20Forms/#9-reusable-form-components","title":"9. Reusable Form Components","text":"<p>In large applications, forms often share similar fields \u2014 like text inputs, dropdowns, checkboxes, or buttons. Instead of repeating the same JSX and logic, you can create reusable, customizable form components that make your codebase cleaner and easier to maintain.</p>"},{"location":"react/8.React%20Forms/#1-custom-input-components","title":"1\ufe0f\u20e3 Custom Input Components","text":"<p>You can create a single <code>&lt;InputField /&gt;</code> component that handles labels, values, errors, and events \u2014 instead of repeating <code>&lt;input&gt;</code> everywhere.</p> <pre><code>import React from \"react\";\n\nexport default function InputField({ label, name, value, onChange, type = \"text\", error }) {\n  return (\n    &lt;div className=\"input-group\"&gt;\n      &lt;label htmlFor={name}&gt;{label}&lt;/label&gt;\n      &lt;input\n        id={name}\n        name={name}\n        type={type}\n        value={value}\n        onChange={onChange}\n        className={error ? \"input-error\" : \"\"}\n      /&gt;\n      {error &amp;&amp; &lt;span className=\"error\"&gt;{error}&lt;/span&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Usage:</p> <pre><code>&lt;InputField\n  label=\"Email\"\n  name=\"email\"\n  type=\"email\"\n  value={formData.email}\n  onChange={handleChange}\n  error={errors.email}\n/&gt;\n</code></pre> <p>\u2705 Benefits:</p> <ul> <li>Centralized styling and validation messages.</li> <li>Easier to maintain and update.</li> <li>Supports any input type dynamically.</li> </ul>"},{"location":"react/8.React%20Forms/#2-custom-select-and-radio-components","title":"2\ufe0f\u20e3 Custom Select and Radio Components","text":"<p>Reusable Select and Radio components ensure consistent design and logic across forms.</p>"},{"location":"react/8.React%20Forms/#custom-select-example","title":"Custom Select Example","text":"<pre><code>export function SelectField({ label, name, value, options, onChange }) {\n  return (\n    &lt;div className=\"select-group\"&gt;\n      &lt;label htmlFor={name}&gt;{label}&lt;/label&gt;\n      &lt;select id={name} name={name} value={value} onChange={onChange}&gt;\n        &lt;option value=\"\"&gt;Select...&lt;/option&gt;\n        {options.map((opt) =&gt; (\n          &lt;option key={opt.value} value={opt.value}&gt;\n            {opt.label}\n          &lt;/option&gt;\n        ))}\n      &lt;/select&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Usage:</p> <pre><code>&lt;SelectField\n  label=\"Country\"\n  name=\"country\"\n  value={formData.country}\n  onChange={handleChange}\n  options={[\n    { label: \"India\", value: \"in\" },\n    { label: \"USA\", value: \"us\" },\n    { label: \"Canada\", value: \"ca\" },\n  ]}\n/&gt;\n</code></pre> <p>\u2705 Keeps dropdowns consistent and scalable.</p>"},{"location":"react/8.React%20Forms/#3-composable-form-layouts","title":"3\ufe0f\u20e3 Composable Form Layouts","text":"<p>Instead of building every form manually, you can design form layouts that dynamically render fields based on configuration objects.</p>"},{"location":"react/8.React%20Forms/#an-example","title":"An Example","text":"<pre><code>const formFields = [\n  { label: \"Name\", name: \"name\", type: \"text\" },\n  { label: \"Email\", name: \"email\", type: \"email\" },\n  { label: \"Age\", name: \"age\", type: \"number\" },\n];\n\nexport function DynamicForm({ fields, values, onChange, onSubmit }) {\n  return (\n    &lt;form onSubmit={onSubmit}&gt;\n      {fields.map((field) =&gt; (\n        &lt;InputField\n          key={field.name}\n          label={field.label}\n          name={field.name}\n          type={field.type}\n          value={values[field.name] || \"\"}\n          onChange={onChange}\n        /&gt;\n      ))}\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>Usage:</p> <pre><code>&lt;DynamicForm\n  fields={formFields}\n  values={formData}\n  onChange={handleChange}\n  onSubmit={handleSubmit}\n/&gt;\n</code></pre> <p>\u2705 Composable layout advantages:</p> <ul> <li>Reduces repetition.</li> <li>Enables auto-generated forms from metadata or JSON.</li> <li>Supports dynamic field rendering.</li> </ul>"},{"location":"react/8.React%20Forms/#4-higher-order-form-components-hoc","title":"4\ufe0f\u20e3 Higher-Order Form Components (HOC)","text":"<p>HOCs can wrap form components to inject extra functionality \u2014 like validation, submission handling, or global state syncing.</p> <pre><code>function withValidation(WrappedForm) {\n  return function EnhancedForm(props) {\n    const [errors, setErrors] = React.useState({});\n\n    const validate = () =&gt; {\n      const newErrors = {};\n      if (!props.values.email) newErrors.email = \"Email required\";\n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = (e) =&gt; {\n      e.preventDefault();\n      if (validate()) props.onSubmit();\n    };\n\n    return &lt;WrappedForm {...props} errors={errors} onSubmit={handleSubmit} /&gt;;\n  };\n}\n</code></pre> <p>Usage:</p> <pre><code>const ValidatedForm = withValidation(DynamicForm);\n</code></pre> <p>\u2705 Adds logic without modifying the original form component. \u2705 Makes forms more modular and testable.</p> Concept Description Benefit Custom Input Components Centralize input styling and logic Reusable and clean Custom Select/Radio Consistent dropdowns and radio groups Uniform UI Composable Layouts Render forms dynamically from data Scalable, flexible Higher-Order Components Wrap forms with extra features Modular, DRY <p>\u2705 In short: Reusable form components make your UI consistent, your code maintainable, and your forms scalable across your React app.</p>"},{"location":"react/8.React%20Forms/#10-error-handling-and-feedback","title":"10. Error Handling and Feedback","text":"<p>Error handling in forms ensures that users receive clear, instant feedback when something goes wrong \u2014 whether it\u2019s a missing input, invalid format, or server error. Proper feedback improves usability and prevents form frustration.</p>"},{"location":"react/8.React%20Forms/#1-inline-error-display","title":"1\ufe0f\u20e3 Inline Error Display","text":"<p>Inline errors appear right below the field that caused the issue \u2014 making it immediately visible.</p> <pre><code>import { useState } from \"react\";\n\nexport default function InlineErrorForm() {\n  const [formData, setFormData] = useState({ email: \"\" });\n  const [error, setError] = useState(\"\");\n\n  const handleChange = (e) =&gt; {\n    setFormData({ email: e.target.value });\n    if (!e.target.value.includes(\"@\")) setError(\"Invalid email address\");\n    else setError(\"\");\n  };\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    if (!formData.email) setError(\"Email is required\");\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;Email:&lt;/label&gt;\n      &lt;input\n        type=\"email\"\n        name=\"email\"\n        value={formData.email}\n        onChange={handleChange}\n      /&gt;\n      {error &amp;&amp; &lt;span className=\"error-text\"&gt;{error}&lt;/span&gt;}\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\u2705 Shows error immediately near the input. \u2699\ufe0f Best for required fields or simple format checks.</p>"},{"location":"react/8.React%20Forms/#2-global-form-errors","title":"2\ufe0f\u20e3 Global Form Errors","text":"<p>Sometimes, errors are not tied to a single field \u2014 like server issues or invalid login credentials. These can be displayed at the top or bottom of the form.</p> <pre><code>const [formData, setFormData] = useState({});\nconst [globalError, setGlobalError] = useState(\"\");\n\nconst handleChange = (e) =&gt; {\n  const { name, value } = e.target;\n\n  // \u2705 Clear the global error when the user edits any input\n  if (globalError) setGlobalError(\"\");\n\n  setFormData((prev) =&gt; ({\n    ...prev,\n    [name]: value,\n  }));\n};\n\nconst handleSubmit = async (e) =&gt; {\n  e.preventDefault();\n  try {\n    const res = await fetch(\"/api/login\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n    });\n    if (!res.ok) throw new Error(\"Invalid credentials\");\n  } catch (err) {\n    setGlobalError(err.message);\n  }\n};\n\nreturn (\n  &lt;form onSubmit={handleSubmit}&gt;\n    {globalError &amp;&amp; &lt;div className=\"global-error\"&gt;{globalError}&lt;/div&gt;}\n    &lt;input name=\"username\" onChange={handleChange} /&gt;\n    &lt;input name=\"password\" type=\"password\" onChange={handleChange} /&gt;\n    &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n  &lt;/form&gt;\n);\n</code></pre> <p>\u2705 Ideal for backend validation or API errors. \u26a0\ufe0f Always clear the global error when user starts editing again.</p>"},{"location":"react/8.React%20Forms/#3-success-messages","title":"3\ufe0f\u20e3 Success Messages","text":"<p>Show a success message after successful submission to reassure users.</p> <pre><code>const [formData, setFormData] = useState({});\nconst [globalError, setGlobalError] = useState(\"\");\nconst [successMessage, setSuccessMessage] = useState(\"\");\n\nconst handleChange = (e) =&gt; {\n  const { name, value } = e.target;\n\n  // \u2705 Clear messages when user edits input\n  if (globalError) setGlobalError(\"\");\n  if (successMessage) setSuccessMessage(\"\");\n\n  setFormData((prev) =&gt; ({\n    ...prev,\n    [name]: value,\n  }));\n};\n\nconst handleSubmit = async (e) =&gt; {\n  e.preventDefault();\n  try {\n    const res = await fetch(\"/api/login\", {\n      method: \"POST\",\n      body: JSON.stringify(formData),\n    });\n\n    if (!res.ok) throw new Error(\"Invalid credentials\");\n\n    // \u2705 Show success message\n    setSuccessMessage(\"Login successful!\");\n  } catch (err) {\n    setGlobalError(err.message);\n  }\n};\n\nreturn (\n  &lt;form onSubmit={handleSubmit}&gt;\n    {globalError &amp;&amp; &lt;div className=\"global-error\"&gt;{globalError}&lt;/div&gt;}\n    {successMessage &amp;&amp; &lt;div className=\"success-msg\"&gt;{successMessage}&lt;/div&gt;}\n\n    &lt;input name=\"username\" onChange={handleChange} /&gt;\n    &lt;input name=\"password\" type=\"password\" onChange={handleChange} /&gt;\n    &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n  &lt;/form&gt;\n);\n</code></pre> <p>\u2705 Improves user confidence. \ud83d\udca1 Can also reset form fields after success.</p>"},{"location":"react/8.React%20Forms/#4-disabled-submit-button-on-error","title":"4\ufe0f\u20e3 Disabled Submit Button on Error","text":"<p>Prevent users from submitting invalid forms by disabling the button when validation fails.</p> <pre><code>const isValid = formData.email.includes(\"@\") &amp;&amp; formData.password.length &gt;= 6;\n\n&lt;button type=\"submit\" disabled={!isValid}&gt;\n  Submit\n&lt;/button&gt;\n</code></pre> <p>\u2705 Prevents unnecessary submissions. \ud83c\udfaf Helps guide user toward valid input.</p>"},{"location":"react/8.React%20Forms/#5-toast-snackbar-notifications","title":"5\ufe0f\u20e3 Toast / Snackbar Notifications","text":"<p>For non-intrusive feedback, use toast messages or snackbars (like in Material UI or React Hot Toast).</p> <ul> <li>Example using <code>react-hot-toast</code></li> </ul> <pre><code>import toast, { Toaster } from \"react-hot-toast\";\n\nfunction ToastForm() {\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    toast.success(\"Form submitted successfully!\");\n  };\n\n  return (\n    &lt;&gt;\n      &lt;Toaster position=\"top-right\" /&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>\u2705 User-friendly and modern feedback method. \u2699\ufe0f Can show both success and error notifications.</p> Type Description Best For Inline Errors Shown beside the field Field-specific validation Global Errors Shown at form-level API / server / authentication errors Success Messages Confirmation after submit Completion feedback Disabled Button Prevent invalid submit UX improvement Toast / Snackbar Floating notification Quick, non-blocking alerts <p>\u2705 In short: Combine inline and global feedback for better UX, and use toast/snackbar for smooth, user-friendly notifications.</p>"},{"location":"react/8.React%20Forms/#11-form-libraries-in-react","title":"11. Form Libraries in React","text":""},{"location":"react/8.React%20Forms/#react-hook-form","title":"\ud83e\udde9 React Hook Form","text":"<p>React Hook Form is a lightweight, performant library that uses uncontrolled components internally, minimizing re-renders and improving performance.</p> <pre><code>// Import the useForm hook from react-hook-form library\nimport { useForm } from \"react-hook-form\";\n\nexport default function RHFExample() {\n  /**\n   * useForm() initializes the form handling logic.\n   * It returns several helper functions and objects.\n   *\n   * - register \u2192 used to connect input fields to the form.\n   * - handleSubmit \u2192 handles form submission logic.\n   * - formState \u2192 contains useful form states (like errors, touched, dirty, etc.)\n   *   - errors \u2192 stores validation error messages for fields.\n   */\n  const { register, handleSubmit, formState: { errors } } = useForm();\n\n  /**\n   * onSubmit handler will be called when form is successfully validated and submitted.\n   * The `data` parameter contains all form field values as an object.\n   */\n  const onSubmit = (data) =&gt; {\n    console.log(\"\u2705 Form Submitted Data:\", data);\n  };\n\n  return (\n    // handleSubmit() wraps the onSubmit handler and handles validation automatically\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n\n      {/* Username input field connected to form using register */}\n      {/* Validation rule: required */}\n      &lt;input\n        type=\"text\"\n        placeholder=\"Enter username\"\n        {...register(\"username\", { required: \"Username is required\" })}\n      /&gt;\n      {/* Display validation error for username */}\n      {errors.username &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{errors.username.message}&lt;/p&gt;}\n\n      {/* Email input field connected to form */}\n      {/* Validation rule: required */}\n      &lt;input\n        type=\"email\"\n        placeholder=\"Enter email\"\n        {...register(\"email\", { required: \"Email is required\" })}\n      /&gt;\n      {/* Display validation error for email */}\n      {errors.email &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{errors.email.message}&lt;/p&gt;}\n\n      {/* Submit button to trigger validation and submission */}\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> Part Description <code>useForm()</code> Initializes form handling and returns helper methods <code>register()</code> Connects each input field to the React Hook Form system <code>handleSubmit()</code> Wraps your submit function, automatically runs validation <code>formState.errors</code> Object that stores validation errors for all registered inputs <code>onSubmit()</code> Your callback that receives validated form data <code>{...register(\"fieldName\", validationRules)}</code> Binds field name and validation to the input <p>\u2705 Pros  </p> <ul> <li>High performance (uncontrolled by default)  </li> <li>Built-in validation support  </li> <li>Minimal re-renders  </li> </ul> <p>\u26a0\ufe0f Cons  </p> <ul> <li>Slight learning curve for complex dynamic forms  </li> </ul>"},{"location":"react/8.React%20Forms/#formik","title":"\ud83e\udde0 Formik","text":"<p>Formik focuses on controlled components, giving you fine-grained control of every field\u2019s state and validation.</p> <pre><code>// Import useFormik hook from Formik\nimport { useFormik } from \"formik\";\n\nexport default function FormikExample() {\n  /**\n   * useFormik() initializes and manages all the form logic.\n   * It returns an object containing:\n   * - values: the current values of all form fields\n   * - errors: validation error messages\n   * - handleChange: function to handle input changes\n   * - handleSubmit: function to handle form submission\n   */\n  const formik = useFormik({\n    // Initial default values for each input field\n    initialValues: { email: \"\", password: \"\" },\n\n    /**\n     * Custom validation function that checks if form fields are valid.\n     * - `values` contains the current form field values.\n     * - Return an `errors` object where each key matches the input field name.\n     */\n    validate: (values) =&gt; {\n      const errors = {};\n      if (!values.email) errors.email = \"Email required\";\n      if (!values.password) errors.password = \"Password required\";\n      return errors;\n    },\n\n    /**\n     * onSubmit runs only when validation passes successfully.\n     * It receives the current `values` object as its argument.\n     */\n    onSubmit: (values) =&gt; {\n      console.log(\"\u2705 Form Submitted Data:\", values);\n    },\n  });\n\n  return (\n    // handleSubmit handles form submission and runs validation automatically\n    &lt;form onSubmit={formik.handleSubmit}&gt;\n\n      {/* Email Input Field */}\n      &lt;input\n        name=\"email\"\n        type=\"email\"\n        placeholder=\"Enter email\"\n        value={formik.values.email}             // controlled input value\n        onChange={formik.handleChange}          // updates form state\n      /&gt;\n      {/* Display error if validation failed */}\n      {formik.errors.email &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{formik.errors.email}&lt;/p&gt;}\n\n      {/* Password Input Field */}\n      &lt;input\n        name=\"password\"\n        type=\"password\"\n        placeholder=\"Enter password\"\n        value={formik.values.password}          // controlled input value\n        onChange={formik.handleChange}          // updates form state\n      /&gt;\n      {/* Display error if validation failed */}\n      {formik.errors.password &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;{formik.errors.password}&lt;/p&gt;}\n\n      {/* Submit Button */}\n      &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <p>\u2705 Pros  </p> <ul> <li>Intuitive API  </li> <li>Great with Yup for validation  </li> <li>Easy to debug  </li> </ul> <p>\u26a0\ufe0f Cons  </p> <ul> <li>Controlled model can cause re-renders in large forms  </li> </ul>"},{"location":"react/8.React%20Forms/#yup-for-schema-validation","title":"\u2705 Yup for Schema Validation","text":"<p>Yup provides declarative validation with a clean schema-based syntax.</p> <pre><code>import * as Yup from \"yup\";\n\nconst schema = Yup.object().shape({\n  username: Yup.string().required(\"Username is required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Email required\"),\n  password: Yup.string().min(6, \"Minimum 6 chars\").required(\"Required\"),\n});\n</code></pre> <p>\u2705 Pros  </p> <ul> <li>Declarative and readable  </li> <li>Works perfectly with Formik and RHF  </li> </ul> <p>\u26a0\ufe0f Cons  </p> <ul> <li>Not type-safe (use Zod for that)  </li> </ul>"},{"location":"react/8.React%20Forms/#zod-for-type-safe-validation","title":"\ud83d\udd12 Zod for Type-safe Validation","text":"<p>Zod is a TypeScript-first schema validation library. It infers types automatically from your schema.</p> <pre><code>import { z } from \"zod\";\n\nconst schema = z.object({\n  username: z.string().min(1, \"Required\"),\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\n// Type inference\ntype FormData = z.infer&lt;typeof schema&gt;;\n</code></pre> <p>\u2705 Pros  </p> <ul> <li>Type-safe  </li> <li>Works seamlessly with React Hook Form  </li> <li>Auto infers TypeScript types  </li> </ul> <p>\u26a0\ufe0f Cons  </p> <ul> <li>Slightly verbose for simple validations  </li> </ul>"},{"location":"react/8.React%20Forms/#redux-form","title":"\ud83d\udd04 Redux Form","text":"<p>Redux Form stores form data inside the Redux store, making it accessible across the app.</p> <pre><code>// Example concept (modern apps use Final Form instead)\n&lt;form onSubmit={handleSubmit}&gt;\n  &lt;Field name=\"email\" component=\"input\" type=\"email\" /&gt;\n  &lt;Field name=\"password\" component=\"input\" type=\"password\" /&gt;\n  &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>\u2705 Pros  </p> <ul> <li>Centralized form state  </li> <li>Ideal for enterprise apps  </li> </ul> <p>\u26a0\ufe0f Cons  </p> <ul> <li>Heavy; adds Redux complexity  </li> <li>Better alternatives exist now  </li> </ul>"},{"location":"react/8.React%20Forms/#final-form","title":"\u2699\ufe0f Final Form","text":"<p>Final Form is a lightweight alternative to Redux Form without Redux dependency.</p> <pre><code>import { Form, Field } from \"react-final-form\";\n\nexport default function FinalFormExample() {\n  const onSubmit = (values) =&gt; console.log(values);\n\n  return (\n    &lt;Form\n      onSubmit={onSubmit}\n      render={({ handleSubmit }) =&gt; (\n        &lt;form onSubmit={handleSubmit}&gt;\n          &lt;Field name=\"name\" component=\"input\" placeholder=\"Name\" /&gt;\n          &lt;Field name=\"email\" component=\"input\" placeholder=\"Email\" /&gt;\n          &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n      )}\n    /&gt;\n  );\n}\n</code></pre> <p>\u2705 Pros  </p> <ul> <li>Simple API  </li> <li>No Redux needed  </li> <li>Fine control over form rendering  </li> </ul> <p>\u26a0\ufe0f Cons  </p> <ul> <li>Slightly more setup compared to RHF  </li> </ul>"},{"location":"react/8.React%20Forms/#library-comparison","title":"\u2696\ufe0f Library Comparison","text":"Library Type State Management Validation Ideal For React Hook Form Uncontrolled Internal Built-in / Yup / Zod Performance-focused forms Formik Controlled Local State Yup Simpler integration, readable Redux Form Controlled Redux Custom Enterprise apps with shared form state Final Form Controlled Internal Custom Medium-sized apps needing flexibility Zod Schema N/A Type-safe TypeScript-heavy projects Yup Schema N/A Declarative General frontend validation"},{"location":"react/8.React%20Forms/#_1","title":"8.React Forms and Form Handling","text":""},{"location":"react/9.React%20Router/","title":"9.React Router","text":""},{"location":"react/9.React%20Router/#react-router","title":"React Router","text":"<p>React Router is a powerful library that enables client-side routing in React applications. It lets you build single-page applications with navigation, dynamic routing, nested views, and more\u2014all without full page reloads.</p> <p>\ud83d\udcda For more: https://reactrouter.com</p>"},{"location":"react/9.React%20Router/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>npm install react-router\n</code></pre> <p>Wrap your app with <code>&lt;BrowserRouter&gt;</code>:</p> <pre><code>import { BrowserRouter } from 'react-router';\n\nconst Root = () =&gt; (\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;\n);\n</code></pre>"},{"location":"react/9.React%20Router/#routes-and-route","title":"\ud83d\udd01 <code>Routes</code> and <code>Route</code>","text":"<p>Use <code>&lt;Routes&gt;</code> as the parent of all route definitions. It replaces <code>&lt;Switch&gt;</code> in React Router v6. <code>&lt;Route&gt;</code> defines a path and the component that should render when the path matches.</p> <pre><code>import { Routes, Route } from 'react-router';\n\n&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n  &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n&lt;/Routes&gt;\n</code></pre> <p>Each <code>Route</code> requires a <code>path</code> and <code>element</code>. You can also nest <code>Route</code> components for nested layouts.</p>"},{"location":"react/9.React%20Router/#splats-catch-all-routes","title":"\ud83c\udf1f Splats (<code>*</code> Catch-All Routes)","text":"<p>Used to match any sub-path after the base path. This is useful for documentation pages or catch-all blog post slugs.</p> <pre><code>&lt;Route path=\"docs/*\" element={&lt;Docs /&gt;} /&gt;\n</code></pre> <p><code>useParams()</code> will return everything after <code>/docs/</code> in the <code>*</code> key.</p> <pre><code>const { '*': subPath } = useParams();\n</code></pre>"},{"location":"react/9.React%20Router/#notfound-route","title":"\ud83d\udeab NotFound Route","text":"<p>Handle unmatched routes with a <code>*</code> path. Always place it at the end of the <code>Routes</code> block to catch unhandled paths.</p> <pre><code>&lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n</code></pre> <p>Use this for a 404 or \"Page Not Found\" view.</p>"},{"location":"react/9.React%20Router/#path-attribute","title":"\ud83d\udccc <code>path</code> Attribute","text":"<p>The <code>path</code> defines the URL fragment to match. You can include static segments or dynamic variables (e.g., <code>:id</code>).</p> <pre><code>&lt;Route path=\"/product/:id\" element={&lt;Product /&gt;} /&gt;\n</code></pre> <p>Route paths support parameters, optional segments, and splats.</p>"},{"location":"react/9.React%20Router/#link-navigation","title":"\ud83d\udd17 Link Navigation","text":""},{"location":"react/9.React%20Router/#link-component","title":"<code>Link</code> Component","text":"<p>Used for client-side navigation without reloading the page.</p> <pre><code>&lt;Link to=\"/profile\"&gt;Go to Profile&lt;/Link&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#navlink-with-end-and-active","title":"<code>NavLink</code> with <code>end</code> and <code>active</code>","text":"<p><code>NavLink</code> allows styling based on whether the link is active. The <code>end</code> prop makes it match exactly.</p> <pre><code>&lt;NavLink\n  to=\"/\"\n  end\n  className={({ isActive }) =&gt; (isActive ? 'active' : '')}\n&gt;\n  Home\n&lt;/NavLink&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#nested-routing-layouts","title":"\ud83e\udde9 Nested Routing &amp; Layouts","text":"<p>Use <code>Outlet</code> to define where nested child routes render inside a parent layout.</p>"},{"location":"react/9.React%20Router/#layout-with-outlet","title":"Layout with <code>Outlet</code>","text":"<pre><code>import { Outlet } from 'react-router';\n\nconst DashboardLayout = () =&gt; (\n  &lt;div&gt;\n    &lt;Sidebar /&gt;\n    &lt;Outlet /&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"react/9.React%20Router/#nested-route-config","title":"Nested Route Config","text":"<pre><code>&lt;Routes&gt;\n  &lt;Route path=\"dashboard\" element={&lt;DashboardLayout /&gt;}&gt;\n    &lt;Route path=\"stats\" element={&lt;Stats /&gt;} /&gt;\n    &lt;Route path=\"settings\" element={&lt;Settings /&gt;} /&gt;\n  &lt;/Route&gt;\n&lt;/Routes&gt;\n</code></pre> <p>Nested routes automatically prepend their parent path.</p>"},{"location":"react/9.React%20Router/#dynamic-routes","title":"\ud83d\udd04 Dynamic Routes","text":""},{"location":"react/9.React%20Router/#url-parameters","title":"URL Parameters","text":"<p>You can capture values from the URL using parameters.</p> <pre><code>&lt;Route path=\"/users/:userId\" element={&lt;UserProfile /&gt;} /&gt;\n</code></pre> <p>Use <code>useParams()</code> to access them:</p> <pre><code>const { userId } = useParams();\n</code></pre> <p>Useful for dynamic pages like user profiles, articles, etc.</p>"},{"location":"react/9.React%20Router/#relative-paths","title":"\ud83e\udded Relative Paths","text":"<p>Relative paths are resolved based on the parent route. This helps keep navigation modular and reusable.</p> <pre><code>&lt;Link to=\"settings\"&gt;Go to Settings&lt;/Link&gt; // becomes /dashboard/settings if inside dashboard\n</code></pre> <p>Use <code>..</code> to go one level up.</p>"},{"location":"react/9.React%20Router/#route-prefixes","title":"\ud83d\udcc1 Route Prefixes","text":"<p>Nested routes automatically prefix the path with the parent.</p> <pre><code>&lt;Route path=\"admin\" element={&lt;Admin /&gt;}&gt;\n  &lt;Route path=\"users\" element={&lt;AdminUsers /&gt;} /&gt; // becomes /admin/users\n&lt;/Route&gt;\n</code></pre> <p>No need to repeat full paths for children.</p>"},{"location":"react/9.React%20Router/#useparams-example","title":"\ud83d\udd0d <code>useParams()</code> Example","text":"<pre><code>&lt;Route path=\"/blog/:slug\" element={&lt;BlogPost /&gt;} /&gt;\n\nfunction BlogPost() {\n  const { slug } = useParams();\n  return &lt;h1&gt;Reading: {slug}&lt;/h1&gt;;\n}\n</code></pre> <p>Returns an object of matched params from the current URL.</p>"},{"location":"react/9.React%20Router/#route-segments","title":"\ud83e\udde9 Route Segments","text":""},{"location":"react/9.React%20Router/#static-segment","title":"Static Segment","text":"<pre><code>&lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#dynamic-segment","title":"Dynamic Segment","text":"<pre><code>&lt;Route path=\"/blog/:slug\" element={&lt;Blog /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#optional-segment-static","title":"Optional Segment (Static)","text":"<pre><code>&lt;Route path=\"/settings/:tab?\" element={&lt;Settings /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#optional-segment-dynamic","title":"Optional Segment (Dynamic)","text":"<pre><code>&lt;Route path=\"/user/:id/:mode?\" element={&lt;UserDetail /&gt;} /&gt;\n</code></pre>"},{"location":"react/9.React%20Router/#usenavigate","title":"\ud83d\ude80 <code>useNavigate()</code>","text":"<p>Navigate programmatically using this hook.</p> <pre><code>const navigate = useNavigate();\n\n&lt;button onClick={() =&gt; navigate('/dashboard')}&gt;Go&lt;/button&gt;\n</code></pre> <p>Replace history entry:</p> <pre><code>navigate('/login', { replace: true });\n</code></pre> <p>With <code>state</code>:</p> <pre><code>navigate('/checkout', { state: { fromCart: true } });\n</code></pre> <p>Use this for redirections after form submissions or auth logic.</p>"},{"location":"react/9.React%20Router/#route-params-recap","title":"\ud83d\udd27 Route Params Recap","text":"<pre><code>&lt;Route path=\"/product/:category/:id\" element={&lt;ProductPage /&gt;} /&gt;\n</code></pre> <pre><code>const { category, id } = useParams();\n</code></pre>"},{"location":"react/9.React%20Router/#url-search-params","title":"\ud83e\uddf5 URL Search Params","text":"<p>Access query string values from the URL.</p> <pre><code>const [searchParams, setSearchParams] = useSearchParams();\n\nconst sort = searchParams.get('sort');\n</code></pre> <p>Update params dynamically:</p> <pre><code>setSearchParams({ sort: 'price' });\n</code></pre> <p>Useful for filtering, pagination, sorting, etc.</p>"},{"location":"react/9.React%20Router/#location-object","title":"\ud83e\udded Location Object","text":"<p><code>useLocation()</code> gives full access to the current location object.</p> <pre><code>const location = useLocation();\n\nconsole.log(location.pathname);   // /home\nconsole.log(location.search);     // ?ref=nav\nconsole.log(location.state);      // custom state object\n</code></pre> <p>Used when you need to know how the user got to a page or to persist custom data between pages.</p>"},{"location":"react/9.React%20Router/#additional-resources-and-all-the-concepts-to-learn","title":"\ud83d\udcda Additional Resources and All the Concepts to Learn","text":"<ul> <li>React Router Docs</li> </ul>"},{"location":"react/9.React%20Router/#react-router-core-concepts","title":"\ud83e\udded React Router Core Concepts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>BrowserRouter</code> / <code>HashRouter</code> Top-level routers for web apps. <code>BrowserRouter</code> uses the History API (clean URLs), while <code>HashRouter</code> uses <code>#</code> to keep the UI in sync with the URL. <code>Routes</code> &amp; <code>Route</code> Declarative components that define routing configuration. <code>Routes</code> wraps multiple <code>Route</code> elements. <code>Link</code> &amp; <code>NavLink</code> Replace <code>&lt;a&gt;</code> tags. <code>Link</code> navigates declaratively, while <code>NavLink</code> adds styling for active links. <code>Navigate</code> A component that triggers redirect to a different route when rendered. <code>Outlet</code> Placeholder for nested routes. Enables layout composition. <code>index</code> Defines the default child route under a parent route. <code>path='*'</code> Wildcard route used to match any path. Commonly used for 404 pages. <code>errorElement</code> Error boundary UI for route-specific errors. <code>loader</code> Function to fetch data before rendering a route. Available from React Router v6.4+. <code>action</code> Handles form submissions and data mutations. Runs before the route renders. <code>defer()</code> Allows partial data loading and integration with Suspense. <code>lazy()</code> + <code>Suspense</code> Enables code-splitting for routes using dynamic imports."},{"location":"react/9.React%20Router/#react-router-hooks-v64","title":"\ud83e\uddea React Router Hooks (v6.4+)","text":"\ud83e\uddf7 Hook \ud83d\udca1 Purpose <code>useNavigate()</code> Imperative navigation. E.g. go forward, back, or to a specific path. <code>useParams()</code> Access dynamic URL segments (e.g., <code>:id</code>, <code>:slug</code>). <code>useLocation()</code> Get current location object including <code>pathname</code>, <code>search</code>, and <code>hash</code>. <code>useMatch()</code> Match a pattern against the current location pathname. <code>useHref()</code> Generate an HREF string for a given route. <code>useRoutes()</code> Hook-based way to define routes directly inside components. <code>useOutlet()</code> Render the element matched by a child route inside a layout. <code>useLoaderData()</code> Access data returned by the loader. <code>useActionData()</code> Access data returned by a route action after a mutation. <code>useNavigation()</code> Get current navigation state (idle, loading, submitting). <code>useNavigationType()</code> Determine how the navigation was triggered (POP, PUSH, REPLACE). <code>useRevalidator()</code> Manually trigger a loader revalidation. <code>useRouteError()</code> Access the error thrown by a route or its loader. <code>useRouteLoaderData()</code> Access loader data from a specific ancestor route by ID."},{"location":"react/9.React%20Router/#dynamic-routing-concepts","title":"\ud83e\uddec Dynamic Routing Concepts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>:id</code>, <code>:slug</code>, etc. URL parameters used for dynamic matching. Define variables in route paths. <code>useParams()</code> Retrieves current route's dynamic segments. Slug Human-readable, SEO-friendly identifier in the URL. Often derived from titles. Nested Dynamic Routes Combine dynamic paths with <code>&lt;Outlet /&gt;</code> to show nested content. Optional Params Allow parts of the path to be optional using <code>:param?</code>."},{"location":"react/9.React%20Router/#nested-routes-layouts","title":"\ud83c\udfd7\ufe0f Nested Routes &amp; Layouts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description Nested Routes Enables route hierarchy with children inside parent routes. Layout Route A route containing shared UI like navbars and sidebars with an <code>&lt;Outlet /&gt;</code>. Relative Links Use relative paths for nested route linking. Index Routes Child route rendered when the parent route is matched."},{"location":"react/9.React%20Router/#navigation-tools","title":"\ud83d\udea6 Navigation Tools","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>Link</code> Declarative, client-side navigation. Prevents page reloads. <code>NavLink</code> Like <code>Link</code>, but automatically applies <code>active</code> styling. Useful for menus. <code>useNavigate()</code> Programmatically navigate forward, back, or to a specific URL. <code>replace: true</code> Prevents pushing new history entry on navigation. Replaces current entry. <code>scrollRestoration</code> Manages scroll behavior across navigations automatically."},{"location":"react/9.React%20Router/#special-routing-behaviors","title":"\ud83e\uddea Special Routing Behaviors","text":"\ud83d\udd39 Concept \ud83e\udde0 Description <code>Navigate</code> Component redirect. Use in JSX to change routes. <code>redirect()</code> Redirect in loaders or actions before the component is rendered. Wildcard (<code>*</code>) Routes Catch-all route, often used for 404 fallback. Error Boundaries Render fallback UI when a route or its loader throws."},{"location":"react/9.React%20Router/#general-routing-concepts","title":"\u2699\ufe0f General Routing Concepts","text":"\ud83d\udd39 Concept \ud83e\udde0 Description Slug SEO-friendly readable URL string (e.g., blog titles). Query Parameters Use <code>?key=value</code> format. Access via <code>useLocation().search</code> or <code>URLSearchParams</code>. Hash Routing Uses <code>#</code> in URL. Useful for static hosting environments. SSR Routing Server-rendered routing used in frameworks like Next.js or Remix. SPA vs MPA SPAs load one page and update via JS. MPAs reload on every page. Static Routes Predefined paths like <code>/home</code>, <code>/about</code>. Dynamic Routes Parameterized paths like <code>/user/:id</code>. Route Matching Pattern matching engine that maps URLs to route components."},{"location":"react/9.React%20Router/#code-examples","title":"\ud83d\udcda Code Examples","text":"<pre><code>&lt;Route path=\"/products/:slug\" element={&lt;ProductPage /&gt;} /&gt;\n\n// Inside ProductPage.jsx\nconst { slug } = useParams();\n</code></pre> <pre><code>&lt;NavLink\n  to=\"/about\"\n  className={({ isActive }) =&gt; isActive ? 'text-blue-500 underline' : ''}\n&gt;\n  About\n&lt;/NavLink&gt;\n</code></pre> <pre><code>const navigate = useNavigate();\nnavigate('/dashboard'); // push\nnavigate(-1); // go back\nnavigate('/login', { replace: true }); // replace\n</code></pre> <p>\u2705 Best Practice: Structure routes using layout routes with <code>&lt;Outlet /&gt;</code>, organize configuration into route objects, preload with loaders, defer data when needed, and handle mutations with <code>action()</code>. Prefer dynamic routes with semantic slugs for SEO.</p>"},{"location":"react/Important%20Keywords/","title":"Important Keywords","text":""},{"location":"react/Important%20Keywords/#react-ecosystem-comprehensive-keywords-list","title":"React Ecosystem \u2013 Comprehensive Keywords List","text":""},{"location":"react/Important%20Keywords/#react-core-concepts","title":"React Core Concepts","text":""},{"location":"react/Important%20Keywords/#11-virtual-dom-rendering","title":"1.1 Virtual DOM &amp; Rendering","text":"<p>Virtual DOM \u2013 A lightweight copy of the real DOM that React updates efficiently.</p> <p>Diffing Algorithm \u2013 Compares Virtual DOM trees to identify changes.</p> <p>Reconciliation \u2013 Process of updating the real DOM based on Virtual DOM changes.</p> <p>React Fiber \u2013 React's new reconciliation engine for faster updates.</p> <p>Hydration \u2013 Merging server-rendered HTML with client-side React.</p> <p>React Concurrent Mode \u2013 Allows React to work on rendering updates without blocking the main thread.</p> <p>Asynchronous Rendering \u2013 React prioritizes UI updates for a smoother user experience.</p>"},{"location":"react/Important%20Keywords/#12-component-based-architecture","title":"1.2 Component-Based Architecture","text":"<p>Functional Components \u2013 Components that use functions instead of classes.</p> <p>Class Components \u2013 Components defined using ES6 classes with lifecycle methods.</p> <p>Stateless Components \u2013 Components that do not manage their own state.</p> <p>Stateful Components \u2013 Components that hold and manage state.</p> <p>Higher-Order Components (HOC) \u2013 Functions that take a component and return an enhanced version.</p> <p>Controlled Components \u2013 Form elements whose state is controlled by React.</p> <p>Uncontrolled Components \u2013 Form elements that store their state in the DOM.</p>"},{"location":"react/Important%20Keywords/#13-component-lifecycle-class-components","title":"1.3 Component Lifecycle (Class Components)","text":"<p>Mounting Phase constructor \u2013 Initializes state and binds methods.</p> <p>componentDidMount \u2013 Runs after the component is added to the DOM.</p> <p>Updating Phase shouldComponentUpdate \u2013 Determines whether a re-render is needed.</p> <p>componentDidUpdate \u2013 Runs after a component updates.</p> <p>getDerivedStateFromProps \u2013 Updates state based on props before re-render.</p> <p>getSnapshotBeforeUpdate \u2013 Captures the previous DOM state before updates.</p> <p>Unmounting Phase componentWillUnmount \u2013 Cleanup operations like event listeners or timers.</p> <p>Error Handling Error Boundaries \u2013 Special components that catch UI errors.</p>"},{"location":"react/Important%20Keywords/#react-hooks-function-components-lifecycle","title":"React Hooks (Function Components Lifecycle)","text":""},{"location":"react/Important%20Keywords/#21-basic-hooks","title":"2.1 Basic Hooks","text":"<p>useState \u2013 Manages component-level state.</p> <p>useEffect \u2013 Runs side effects like fetching data or subscriptions.</p> <p>useContext \u2013 Accesses global values without prop drilling.</p>"},{"location":"react/Important%20Keywords/#22-performance-optimization-hooks","title":"2.2 Performance Optimization Hooks","text":"<p>useMemo \u2013 Caches computed values to prevent unnecessary calculations.</p> <p>useCallback \u2013 Caches functions to prevent re-renders.</p> <p>React.memo \u2013 Prevents unnecessary re-renders of functional components.</p>"},{"location":"react/Important%20Keywords/#23-advanced-hooks","title":"2.3 Advanced Hooks","text":"<p>useReducer \u2013 Manages complex state logic using a reducer function.</p> <p>useRef \u2013 Creates a reference to store mutable values without triggering re-renders.</p> <p>useLayoutEffect \u2013 Runs synchronously after all DOM updates.</p>"},{"location":"react/Important%20Keywords/#24-concurrent-rendering-hooks","title":"2.4 Concurrent Rendering Hooks","text":"<p>useTransition \u2013 Defers updates for better responsiveness.</p> <p>useDeferredValue \u2013 Postpones non-urgent value updates.</p> <p>useId \u2013 Generates unique IDs for accessibility.</p>"},{"location":"react/Important%20Keywords/#react-performance-optimization","title":"React Performance Optimization","text":""},{"location":"react/Important%20Keywords/#31-rendering-optimizations","title":"3.1 Rendering Optimizations","text":"<p>Event Delegation \u2013 Uses a single event listener for multiple child elements.</p> <p>Lazy Loading \u2013 Loads components only when needed (React.lazy).</p> <p>Code Splitting \u2013 Divides code into smaller chunks to improve load times.</p> <p>Tree Shaking \u2013 Removes unused JavaScript code for optimization.</p>"},{"location":"react/Important%20Keywords/#32-avoiding-re-renders","title":"3.2 Avoiding Re-renders","text":"<p>React.memo \u2013 Prevents re-rendering if props remain the same.</p> <p>useMemo \u2013 Avoids re-computation of expensive calculations.</p> <p>useCallback \u2013 Prevents function recreation on every render.</p> <p>shouldComponentUpdate \u2013 Controls whether a component should re-render.</p>"},{"location":"react/Important%20Keywords/#33-browser-rendering-optimizations","title":"3.3 Browser Rendering Optimizations","text":"<p>Repaints \u2013 Redrawing visible elements when styles change.</p> <p>Reflows \u2013 Layout recalculations when elements change position.</p> <p>Virtualization \u2013 Renders only visible elements to improve performance.</p>"},{"location":"react/Important%20Keywords/#react-state-management","title":"React State Management","text":""},{"location":"react/Important%20Keywords/#41-react-built-in-state-management","title":"4.1 React Built-in State Management","text":"<p>useState \u2013 Local state within a component.</p> <p>useReducer \u2013 Manages complex state changes.</p> <p>useContext \u2013 Shares state globally across components.</p>"},{"location":"react/Important%20Keywords/#42-redux-external-state-management","title":"4.2 Redux (External State Management)","text":"<p>Core Concepts Redux Store \u2013 Centralized state container.</p> <p>Actions \u2013 Describe state changes.</p> <p>Reducers \u2013 Functions that modify the store based on actions.</p> <p>Dispatch \u2013 Sends actions to the reducer.</p> <p>Selectors \u2013 Extracts specific data from the Redux store.</p> <p>Middleware &amp; Enhancers Redux Thunk \u2013 Handles async operations in Redux.</p> <p>Redux Saga \u2013 Uses generator functions for managing side effects.</p> <p>Redux Logger \u2013 Logs dispatched actions and state changes.</p> <p>Redux Toolkit (RTK) createSlice \u2013 Combines reducers and actions in a single function.</p> <p>createAsyncThunk \u2013 Simplifies async logic in Redux.</p> <p>configureStore \u2013 Sets up a Redux store with default middleware.</p>"},{"location":"react/Important%20Keywords/#43-context-api","title":"4.3 Context API","text":"<p>React Context \u2013 Shares state without prop drilling.</p> <p>Provider &amp; Consumer \u2013 Provides and consumes shared state.</p>"},{"location":"react/Important%20Keywords/#44-other-state-management-libraries","title":"4.4 Other State Management Libraries","text":"<p>Zustand \u2013 Simple, minimalistic state management.</p> <p>Recoil \u2013 React\u2019s experimental state management library.</p> <p>Jotai \u2013 Atom-based state management.</p> <p>MobX \u2013 Reactive state management with observables.</p>"},{"location":"react/Important%20Keywords/#react-routing-react-router","title":"React Routing (React Router)","text":""},{"location":"react/Important%20Keywords/#51-routing-essentials","title":"5.1 Routing Essentials","text":"<p>BrowserRouter \u2013 Enables routing in React apps.</p> <p>HashRouter \u2013 Uses URL hash for routing.</p> <p>MemoryRouter \u2013 Stores routes in memory (useful for testing).</p> <p>StaticRouter \u2013 Predefined routes for server-side rendering.</p>"},{"location":"react/Important%20Keywords/#52-navigation","title":"5.2 Navigation","text":"<p>Route \u2013 Defines a route and its component.</p> <p>Link &amp; NavLink \u2013 Navigates between routes.</p> <p>Redirect \u2013 Redirects to another route.</p> <p>useNavigate \u2013 Programmatically navigates users.</p>"},{"location":"react/Important%20Keywords/#53-dynamic-routing","title":"5.3 Dynamic Routing","text":"<p>useParams \u2013 Retrieves URL parameters.</p> <p>useLocation \u2013 Gets the current URL path.</p>"},{"location":"react/Important%20Keywords/#nextjs-react-framework","title":"Next.js (React Framework)","text":""},{"location":"react/Important%20Keywords/#61-rendering-strategies","title":"6.1 Rendering Strategies","text":"<p>SSR (Server-Side Rendering) \u2013 Fetches and renders pages on the server per request.</p> <p>CSR (Client-Side Rendering) \u2013 Renders content dynamically in the browser.</p> <p>SSG (Static Site Generation) \u2013 Pre-builds pages for performance.</p> <p>ISR (Incremental Static Regeneration) \u2013 Updates static pages without full re-builds.</p>"},{"location":"react/Important%20Keywords/#62-data-fetching","title":"6.2 Data Fetching","text":"<p>getServerSideProps \u2013 Fetches data on each request (SSR).</p> <p>getStaticProps \u2013 Fetches data at build time (SSG).</p> <p>getStaticPaths \u2013 Generates dynamic paths for static pages.</p>"},{"location":"react/Important%20Keywords/#63-api-routes","title":"6.3 API Routes","text":"<p>API Middleware \u2013 Runs logic before serving requests.</p> <p>Middleware Functions \u2013 Handles authentication and logging.</p>"},{"location":"react/Important%20Keywords/#react-forms-user-input-handling","title":"React Forms &amp; User Input Handling","text":""},{"location":"react/Important%20Keywords/#71-controlled-components","title":"7.1 Controlled Components","text":"<p>onChange Event \u2013 Updates state whenever an input value changes.</p> <p>value Attribute \u2013 Controls the input field value using state.</p>"},{"location":"react/Important%20Keywords/#72-uncontrolled-components","title":"7.2 Uncontrolled Components","text":"<p>useRef for Form Handling \u2013 Directly accesses form elements without React state.</p>"},{"location":"react/Important%20Keywords/#73-form-libraries","title":"7.3 Form Libraries","text":"<p>React Hook Form \u2013 Lightweight form library with built-in validation.</p> <p>Formik \u2013 Form management library with validation support.</p> <p>Yup \u2013 Schema validation library for form data.</p>"},{"location":"react/Important%20Keywords/#react-apis-for-ui-enhancements","title":"React APIs for UI Enhancements","text":""},{"location":"react/Important%20Keywords/#81-context-api","title":"8.1 Context API","text":"<p>React.createContext \u2013 Creates a shared context for global state.</p> <p>useContext \u2013 Consumes context data in functional components.</p>"},{"location":"react/Important%20Keywords/#82-portals","title":"8.2 Portals","text":"<p>ReactDOM.createPortal \u2013 Renders child components outside the parent hierarchy (useful for modals).</p>"},{"location":"react/Important%20Keywords/#83-suspense-lazy-loading","title":"8.3 Suspense &amp; Lazy Loading","text":"<p>React.lazy \u2013 Loads components dynamically when needed.</p> <p>Suspense \u2013 Displays fallback UI while a component is loading.</p> <p>Fallback UI \u2013 A loading indicator or placeholder displayed during component fetch.</p>"},{"location":"react/Important%20Keywords/#84-fragments","title":"8.4 Fragments (&lt; &gt;...&lt;/ &gt;)","text":"<p>Shorthand Fragment \u2013 Groups multiple elements without adding an extra DOM node.</p>"},{"location":"react/Important%20Keywords/#react-ui-libraries-tools","title":"React UI Libraries &amp; Tools","text":""},{"location":"react/Important%20Keywords/#91-ui-component-libraries","title":"9.1 UI Component Libraries","text":"<p>Material UI \u2013 A popular React UI framework with ready-made components.</p> <p>Ant Design \u2013 Enterprise-level UI design framework for React.</p> <p>Chakra UI \u2013 A flexible and accessible component library.</p> <p>Tailwind CSS \u2013 Utility-first CSS framework for styling React components.</p> <p>Bootstrap \u2013 CSS framework with React support for responsive design.</p>"},{"location":"react/Important%20Keywords/#92-state-data-handling","title":"9.2 State &amp; Data Handling","text":"<p>Apollo Client (GraphQL) \u2013 Manages state with GraphQL queries and mutations.</p> <p>SWR (Stale-While-Revalidate) \u2013 Fetches, caches, and revalidates data automatically.</p> <p>React Query \u2013 Data-fetching and state management library for asynchronous operations.</p>"},{"location":"react/Important%20Keywords/#93-testing-in-react","title":"9.3 Testing in React","text":"<p>Jest \u2013 JavaScript testing framework for unit and integration testing.</p> <p>React Testing Library \u2013 Utility for testing React components in a real-world scenario.</p> <p>Cypress \u2013 End-to-end testing framework for React applications.</p>"},{"location":"react/Important%20Keywords/#advanced-react-concepts","title":"Advanced React Concepts","text":""},{"location":"react/Important%20Keywords/#101-server-side-rendering-ssr-vs-client-side-rendering-csr","title":"10.1 Server-Side Rendering (SSR) vs Client-Side Rendering (CSR)","text":"<p>Server Components \u2013 Components that render on the server and do not require client-side JavaScript.</p> <p>Client Components \u2013 Components that execute in the browser and handle user interactions.</p> <p>Hydration \u2013 Process of attaching event handlers to server-rendered HTML.</p>"},{"location":"react/Important%20Keywords/#102-react-concurrent-mode-features","title":"10.2 React Concurrent Mode Features","text":"<p>Time-Slicing \u2013 Breaks rendering tasks into small chunks to improve responsiveness.</p> <p>Suspense for Data Fetching \u2013 Handles asynchronous data fetching with fallback UI.</p>"},{"location":"react/Important%20Keywords/#103-deployment-optimization","title":"10.3 Deployment &amp; Optimization","text":"<p>Webpack \u2013 Bundles JavaScript files for production.</p> <p>Babel \u2013 Transpiles modern JavaScript (ES6+) to older browser-compatible versions.</p> <p>Code Minification \u2013 Removes unnecessary characters to reduce file size and improve performance.</p>"},{"location":"react/Important%20Keywords/#miscellaneous-react-concepts","title":"Miscellaneous React Concepts","text":""},{"location":"react/Important%20Keywords/#111-event-handling","title":"11.1 Event Handling","text":"<p>Synthetic Events \u2013 React\u2019s wrapper around native browser events for cross-browser compatibility.</p> <p>Event Pooling \u2013 React reuses event objects to improve performance.</p> <p>Event Delegation \u2013 Uses a single event listener to manage multiple child events.</p>"},{"location":"react/Important%20Keywords/#112-render-props-pattern","title":"11.2 Render Props Pattern","text":"<p>Render Props \u2013 Passes a function as a prop to share logic between components.</p>"},{"location":"react/Important%20Keywords/#113-prop-drilling-vs-context-api","title":"11.3 Prop Drilling vs Context API","text":"<p>Prop Drilling \u2013 Passing props through multiple nested components.</p> <p>Context API \u2013 Avoids prop drilling by providing global state management.</p>"},{"location":"react/Important%20Keywords/#114-web-components-react","title":"11.4 Web Components &amp; React","text":"<p>Custom Elements \u2013 HTML elements that can be used inside React components.</p> <p>Shadow DOM \u2013 Encapsulates styles and structure in web components.</p>"},{"location":"react/Important%20Keywords/#important-react-development-patterns","title":"Important React Development Patterns","text":""},{"location":"react/Important%20Keywords/#121-higher-order-components-hoc","title":"12.1 Higher-Order Components (HOC)","text":"<p>Definition \u2013 A function that takes a component and returns an enhanced version.</p> <p>Example \u2013 Used for authentication, logging, or modifying props dynamically.</p>"},{"location":"react/Important%20Keywords/#122-compound-components-pattern","title":"12.2 Compound Components Pattern","text":"<p>Definition \u2013 A pattern where multiple components work together (e.g., a Tabs component).</p>"},{"location":"react/Important%20Keywords/#123-render-props-pattern","title":"12.3 Render Props Pattern","text":"<p>Definition \u2013 Uses a function prop to share logic across multiple components.</p>"},{"location":"react/Important%20Keywords/#124-controlled-vs-uncontrolled-components","title":"12.4 Controlled vs Uncontrolled Components","text":"<p>Controlled Components \u2013 Form inputs controlled by React state.</p> <p>Uncontrolled Components \u2013 Form inputs controlled by the DOM using refs.</p>"},{"location":"react/Important%20Keywords/#progressive-web-apps-pwa-in-react","title":"Progressive Web Apps (PWA) in React","text":""},{"location":"react/Important%20Keywords/#131-pwa-features-in-react","title":"13.1 PWA Features in React","text":"<p>Service Workers \u2013 Caches files for offline usage.</p> <p>Web App Manifest \u2013 Defines metadata like app name, icons, and colors.</p> <p>IndexedDB &amp; Cache API \u2013 Stores data in the browser for offline access.</p>"},{"location":"react/Important%20Keywords/#132-react-libraries-for-pwa","title":"13.2 React Libraries for PWA","text":"<p>Workbox \u2013 Simplifies service worker implementation.</p> <p>Next.js PWA Plugin \u2013 Adds PWA support to Next.js projects.</p>"},{"location":"react/Important%20Keywords/#security-authentication-in-react","title":"Security &amp; Authentication in React","text":""},{"location":"react/Important%20Keywords/#141-common-security-best-practices","title":"14.1 Common Security Best Practices","text":"<p>Cross-Site Scripting (XSS) Prevention \u2013 Avoids injecting malicious scripts into the app.</p> <p>Cross-Site Request Forgery (CSRF) Protection \u2013 Prevents unauthorized actions on behalf of a user.</p> <p>Content Security Policy (CSP) \u2013 Restricts script execution to prevent XSS attacks.</p>"},{"location":"react/Important%20Keywords/#142-authentication-authorization","title":"14.2 Authentication &amp; Authorization","text":"<p>JWT (JSON Web Token) \u2013 Token-based authentication system.</p> <p>OAuth \u2013 Secure authentication standard using third-party providers (Google, Facebook, GitHub).</p> <p>Firebase Authentication \u2013 Google\u2019s authentication solution for React apps.</p> <p>Auth0 \u2013 Authentication-as-a-service provider for React applications.</p>"},{"location":"react/Important%20Keywords/#react-native-for-mobile-development","title":"React Native (For Mobile Development)","text":""},{"location":"react/Important%20Keywords/#151-core-react-native-components","title":"15.1 Core React Native Components","text":"<p>View \u2013 Equivalent to &lt; div&gt; in web applications.</p> <p>Text \u2013 Renders text elements (like &lt; p&gt;).</p> <p>ScrollView \u2013 Enables scrolling content.</p> <p>FlatList \u2013 Optimized for rendering long lists.</p>"},{"location":"react/Important%20Keywords/#152-react-native-apis","title":"15.2 React Native APIs","text":"<p>AsyncStorage \u2013 Local storage API for persisting data.</p> <p>Camera &amp; Location APIs \u2013 Accessing device hardware features.</p> <p>Gesture Handling \u2013 Detecting touch gestures and interactions.</p>"},{"location":"react/Important%20Keywords/#153-navigation-in-react-native","title":"15.3 Navigation in React Native","text":"<p>React Navigation \u2013 Library for routing and navigation in React Native apps.</p> <p>Stack Navigator \u2013 Manages screens in a stack-based navigation.</p> <p>Drawer Navigator \u2013 Creates side menu navigation.</p> <p>Tab Navigator \u2013 Implements bottom tab navigation.</p>"},{"location":"react/Progress/","title":"Progress","text":""},{"location":"react/Progress/#chapter-progress","title":"Chapter Progress","text":""},{"location":"react/Progress/#complete-progress-not-started","title":"\u2705Complete, \ud83d\udfe1Progress , \u274cNot Started","text":"<ol> <li>\u2705 Introduction to React  </li> <li>\u2705 Setting Up the Environment  </li> <li>\u2705 Understanding JSX (JavaScript XML)  </li> <li>\u2705 React Components  </li> <li>\u2705 React State and Data Management  </li> <li>\u2705 Handling Events in React  </li> <li>\ud83d\udfe1 React Hooks (Fundamentals &amp; Advanced)  </li> <li>\ud83d\udfe1 React Forms and Form Handling  </li> <li>\u2705 React Router (Navigation in React)  </li> <li> <p>\u2705 State Management in React (Redux and Zustand)</p> </li> <li> <p>\u274c React Styling Techniques  </p> </li> <li>\u274c React Server-Side Rendering (SSR) &amp; Static Site Generation (SSG)  </li> <li>\u274c React Progressive Web Apps (PWAs)</li> <li>\ud83d\udfe1 API Integration (Axios and React Qqery)</li> <li>\u274c React Performance Optimization</li> <li>\u274c React Testing and Debugging</li> </ol>"},{"location":"react/React%20%26%20Next%20Ecosystem/","title":"React & Next Ecosystem","text":""},{"location":"react/React%20%26%20Next%20Ecosystem/#react-next-ecosystem","title":"React &amp; Next Ecosystem","text":""},{"location":"react/React%20%26%20Next%20Ecosystem/#react-ecosystem","title":"\u269b\ufe0f React Ecosystem","text":"\ud83e\uddf1 Category \ud83e\uddf0 Tools, APIs, Techniques \ud83d\udd39 Core React (Built-in) <code>useState</code>, <code>useEffect</code>, <code>useRef</code>, <code>useContext</code>, <code>useReducer</code>, <code>useCallback</code>, <code>useMemo</code>, <code>useLayoutEffect</code>, <code>useImperativeHandle</code>, <code>useId</code>, <code>useTransition</code>, <code>useDeferredValue</code>, <code>useSyncExternalStore</code>, <code>useInsertionEffect</code> Functional Components, Class Components (legacy), Custom Hooks, Error Boundaries, Portals, <code>React.lazy</code>, <code>Suspense</code>, <code>React.memo</code>, <code>PureComponent</code> \ud83d\udee3\ufe0f Routing React Router : <code>&lt;BrowserRouter&gt;</code>, <code>&lt;Routes&gt;</code>, <code>&lt;Route&gt;</code>, <code>useNavigate</code>, <code>useLocation</code>, <code>useParams</code>, <code>useSearchParams</code>, Nested Routes, Redirects, Loaders, Protected Routes \ud83d\udd01 State Management Built-in: <code>useState</code>, <code>useReducer</code>, <code>useContext</code> External: Redux Toolkit, Zustand, Recoil, Jotai, MobX, Valtio, Effector, Nanostores, Hookstate \ud83d\udce6 Data Fetching &amp; Sync fetch, axios, React Query (TanStack), SWR, Apollo Client, urql, Relay, tRPC \ud83c\udfa8 Styling CSS-in-JS: styled-components, Emotion, Stitches, Linaria, Vanilla Extract Utility CSS: Tailwind CSS, UnoCSS, Windi CSS Traditional: CSS Modules, SCSS/SASS, PostCSS \ud83e\uddea Testing Unit: Jest, React Testing Library, Vitest, Enzyme (legacy) E2E: Cypress, Playwright, Puppeteer Mocking: MSW (Mock Service Worker), jest.fn, jest.mock \ud83d\udcd1 Forms &amp; Validation Form Libraries: React Hook Form, Formik, Final Form Validation: Zod, Yup, Joi, Superstruct, Valibot \ud83d\udd10 Authentication (UI) Context Auth, Protected Routes, JWT/Cookies Services: Firebase Auth, Auth0, Clerk, Magic.link \ud83c\udf0d i18n (Internationalization) react-i18next, LinguiJS, FormatJS/react-intl, rosetta, polyglot.js \ud83c\udf9e\ufe0f Animation Framer Motion, GSAP, React Spring, React Transition Group, Lottie, Motion One \ud83e\udde9 Component Libraries MUI, Chakra UI, ShadCN UI, Ant Design, Radix UI, Headless UI, React Bootstrap, Evergreen, Grommet \ud83d\udcda Component Tooling Storybook, Ladle, Bit.dev, Docz, Styleguidist \u2699\ufe0f Developer Experience React DevTools, Redux DevTools, Zustand Devtools, React Query Devtools, React Profiler ESLint (with react plugin), Prettier, Stylelint TypeScript support: <code>React.FC</code>, <code>JSX.Element</code>, <code>HTMLInputElement</code>, <code>ReactNode</code>, etc. \ud83d\udcc8 Analytics &amp; Monitoring Sentry, LogRocket, Bugsnag, PostHog, Mixpanel, Google Analytics Build Tools Vite, Create React App (CRA), Parcel, Webpack, Turbopack, react-snap \u2601\ufe0f Hosting Tools GitHub Pages, Firebase Hosting, Netlify, Railway \ud83d\udd0c Utilities &amp; Helpers clsx, date-fns, lodash, uuid, dotenv, nanoid, faker.js, classnames, ramda, slugify, dayjs \ud83e\uddf0 CLI &amp; Tooling create-react-app, Vite template, plop.js, hygen, create-react-library \ud83d\udcd8 Learning Resources react.dev, EpicReact.dev, UI.Dev, Kent C. Dodds Blog, reactpatterns.com, beta.reactjs.org"},{"location":"react/React%20%26%20Next%20Ecosystem/#nextjs-ecosystem","title":"\u26a1\ufe0f Next.js Ecosystem","text":"\ud83e\uddf1 Category \ud83e\uddf0 Tools, APIs, Techniques \ud83d\ude80 Core Features File-system routing (<code>pages/</code>, <code>app/</code>), Dynamic routes <code>[slug]</code>, Optional catch-all <code>[...slug]</code>, Layouts (<code>layout.tsx</code>), Metadata, Error &amp; Loading UI \ud83d\udcc1 App Router (New) Server Components (RSC), <code>page.tsx</code>, <code>layout.tsx</code>, <code>loading.tsx</code>, <code>error.tsx</code>, Route Groups <code>(group)/</code>, <code>usePathname()</code>, <code>useSearchParams()</code> \ud83d\udce6 Pages Router (LegacyClassic) <code>getStaticProps</code>, <code>getServerSideProps</code>, <code>getInitialProps</code>, <code>getStaticPaths</code>, <code>useRouter()</code> \ud83e\uddf5 Data Fetching Static Generation (SSG), Server-side Rendering (SSR), Incremental Static Regeneration (ISR), Client-side fetching (SWRTanStack Query/SWR, <code>useEffect</code>) \ud83d\udd17 Routing &amp; Navigation <code>&lt;Link /&gt;</code>, <code>useRouter()</code>, <code>usePathname()</code>, <code>useParams()</code>, <code>next/navigation</code>, Nested Layouts, Client &amp; Server Navigation Separation \ud83d\uddbc\ufe0f Images &amp; Assets <code>next/image</code>, Lazy loading, Blur-up, Responsive images, CDN optimization \ud83d\udd20 Fonts <code>next/font</code>, Google Fonts integration, Local fonts, Automatic optimization \ud83e\udde0 Metadata &amp; SEO <code>Metadata</code> object (App Router), <code>next/head</code> (Pages Router), <code>next-seo</code> \ud83e\uddec API Routes <code>pages/api/</code> (RESTful), <code>app/api/</code> (route handlers), Edge Functions, Middleware \ud83c\udf0d Internationalization Built-in <code>i18n</code> config, Domains &amp; Subpaths, <code>next-i18next</code>, react-intl, LinguiJS \ud83d\udd10 Middleware <code>middleware.ts</code>, Matchers, Auth filters, LoggingObservability, Redirects \ud83d\udd10 Authentication NextAuth.js, Clerk, Auth0, Firebase Auth, JWT + Middleware Consider pairing with context or Zustand \ud83d\udce6 State Management Redux Toolkit, Zustand, Jotai, Recoil, TanStack Query, SWR, tRPC \ud83d\udcda Styling Tailwind CSS, SCSS/SASS, PostCSS, styled-components, Emotion, CSS Modules, Vanilla Extract \ud83c\udf9e\ufe0f Animation Framer Motion, GSAP, React Spring Avoid using heavy animation libraries on server components \ud83e\udde9 Component Libraries ShadCN UI, Radix UI, Headless UI, MUI, Chakra UI, Ant Design \ud83e\uddea Testing Jest, Vitest, React Testing Library, Cypress, Playwright, MSW \ud83d\udcc8 Analytics &amp; Monitoring Vercel Analytics, Google Analytics, PostHog, Mixpanel, Sentry, LogRocket \ud83d\udd27 Dev Tools &amp; Linting ESLint (<code>next/core-web-vitals</code>), Prettier, TypeScript, React DevTools, Vercel Speed Insights \ud83d\udee0\ufe0f Build System SWC (default compiler), Webpack (fallback), Turbopack (experimental)Turbopack (Vercel\u2019s next-gen bundler), Avoid mixing Vite with App Router \ud83d\udce6 Image Providers Cloudinary, ImageKit, Imgix, Akamai \ud83e\uddf0 Deployment Platforms Vercel (official host), Netlify, Railway, Render, Docker \ud83e\uddea Preview &amp; CI/CD Preview Deployments (Vercel), GitHub Actions, GitLab CI, CircleCI, Deployment Hooks \ud83e\uddf1 CMS &amp; Content Sanity.io, Strapi, Contentful, Hygraph, Storyblok, <code>next-mdx-remote</code>, MDX \ud83d\udcd8 Learning Resources nextjs.org/docs, Vercel blog, Next.js GitHub, Lee Robinson\u2019s talks, Frontend Masters \ud83d\udd0c Utilities &amp; Helpers clsx, classnames, dotenv, lodash, dayjs, slugify, uuid, faker"},{"location":"react/React%20%26%20Next%20Ecosystem/#nextjs-ecosystem-alternatives-to-react-tools","title":"\ud83d\ude80 Next.js Ecosystem \u2014 Alternatives to React Tools","text":"\ud83e\uddf1 Category \u2705 React (Best) \ud83d\udd01 Next.js Alternative / Native \ud83d\udee3\ufe0f Routing React Router Built-in File-based Routing (<code>pages/</code> or <code>app/</code> dir) \ud83d\udd01 State Management Redux Toolkit, Zustand \u2705 Same libraries work seamlessly in Next.js \ud83d\udce6 Data Fetching &amp; Sync fetch, axios, React Query <code>getServerSideProps</code>, <code>getStaticProps</code>, <code>app-router</code> fetch + React Query \ud83c\udfa8 Styling Tailwind CSS \u2705 Same (First-class Tailwind support) \ud83e\uddea Testing Jest, React Testing Library, Cypress \u2705 Same (with extra config for SSR/Edge) \ud83d\udcd1 Forms &amp; Validation React Hook Form + Zod \u2705 Same (with server-side Zod validation in actions/API routes) \ud83d\udd10 Authentication Context Auth, Protected Routes, JWT/Cookies, Clerk, Auth0, Firebase Auth NextAuth , Clerk, Auth0 (first-class SSR support) \ud83c\udf0d i18n react-i18next Built-in i18n routing config or use <code>react-i18next</code> \ud83c\udf9e\ufe0f Animation Framer Motion, GSAP \u2705 Same \ud83e\udde9 Component Libraries MUI, Chakra UI, ShadCN UI \u2705 Same (ShadCN recommended in <code>app/</code> dir) \ud83d\udcda Component Tooling Storybook \u2705 Same \u2699\ufe0f Developer Experience React DevTools, Redux DevTools, Zustand Devtools, React Query Devtools, React Profiler, ESLint (with react plugin), Prettier, Stylelint \u2705 Same + Built-in ESLint, TypeScript, SWC compiler \ud83d\udcc8 Analytics &amp; Monitoring Sentry, Google Analytics \u2705 Same + Vercel Analytics++ (first-party)} \ud83d\udd27 Build Tools {Vite} {++Next.js compiler (SWC, Turbopack++)} \u2601\ufe0f Hosting {GitHub Pages, Firebase Hosting, Netlify} {++Vercel (official hosting), Netlify, Railway \ud83d\udd0c Utilities &amp; Helpers clsx, date-fns, lodash, uuid,  dotenv \u2705 Same \ud83e\uddf0 CLI &amp; Tooling Vite template <code>npx create-next-app</code> \ud83d\udcd8 Learning Resources react.dev, EpicReact.dev, UI.Dev nextjs.org/docs, Vercel Blog, Fireship"},{"location":"react/React%20%26%20Next%20Ecosystem/#summary-of-major-nextjs-advantages","title":"\u2705 Summary of Major Next.js Advantages","text":"<ul> <li>Built-in Routing (no need for React Router)</li> <li>Built-in SSR/SSG/ISR (no need for extra data fetching tools in some cases)</li> <li>File-system-based APIs (<code>/api/</code> folder)</li> <li>First-class TypeScript, ESLint, and Tailwind support</li> <li>Optimized deployment with Vercel</li> </ul>"},{"location":"react/react-list/","title":"0.List of Content","text":""},{"location":"react/react-list/#comprehensive-reactjs","title":"Comprehensive React.js","text":""},{"location":"react/react-list/#1-introduction-to-react","title":"1. Introduction to React","text":"<ul> <li>What is React?<ul> <li>History and Evolution</li> <li>Core Philosophy of React</li> <li>Open-Source Community and Contributions</li> </ul> </li> <li>Features and Benefits of React<ul> <li>Declarative UI</li> <li>Component-Based Architecture</li> <li>Unidirectional Data Flow</li> <li>React Fiber Architecture</li> <li>JSX for Templating</li> </ul> </li> <li>React vs Other JavaScript Frameworks<ul> <li>Comparison with Angular, Vue, Svelte</li> <li>Pros and Cons</li> <li>When to Choose React Over Others</li> </ul> </li> <li>Understanding Virtual DOM vs Real DOM<ul> <li>How Virtual DOM Works</li> <li>Performance Benefits</li> <li>Diffing Algorithm in React</li> </ul> </li> <li>React Ecosystem Overview<ul> <li>React, ReactDOM, React Native, Next.js</li> <li>Key Libraries and Tools (Redux, React Router, Material UI, etc.)</li> <li>Server Components vs Client Components</li> </ul> </li> </ul>"},{"location":"react/react-list/#2-setting-up-the-environment","title":"2. Setting Up the Environment","text":"<ul> <li>Installing Node.js &amp; npm<ul> <li>Downloading and Installing Node.js</li> <li>Verifying Installation</li> <li>Understanding Node.js Package Manager (npm)</li> </ul> </li> <li>Installing Yarn (Alternative Package Manager)<ul> <li>npm vs Yarn</li> <li>Setting Up Yarn</li> <li>Using pnpm as an Alternative</li> </ul> </li> <li>Creating a React App using CRA (Create React App)<ul> <li>Creating and Running a New Project</li> <li>Understanding Default Folder Structure</li> <li>Customizing CRA Configuration</li> </ul> </li> <li>Project Structure of a React App<ul> <li>src, public, node_modules, package.json Explained</li> <li>Organizing Components, Hooks, and Utilities</li> <li>Best Practices for Folder Structure</li> </ul> </li> <li>Understanding package.json &amp; node_modules<ul> <li>Managing Dependencies</li> <li>npm Scripts Overview</li> <li>Peer Dependencies and Dev Dependencies</li> </ul> </li> <li>Running and Building a React Application<ul> <li>Development Server and Build Process</li> <li>Using Environment Variables in React</li> </ul> </li> <li>Using Vite as an Alternative to CRA<ul> <li>Benefits of Vite</li> <li>Setting Up Vite</li> <li>Performance Differences Between CRA and Vite</li> </ul> </li> </ul>"},{"location":"react/react-list/#3-understanding-jsx-javascript-xml","title":"3. Understanding JSX (JavaScript XML)","text":"<ul> <li>What is JSX?<ul> <li>Why JSX Exists</li> <li>Writing JSX Syntax</li> <li>JSX Compilation Process</li> </ul> </li> <li>JSX Syntax and Expressions<ul> <li>Embedding JavaScript Expressions</li> <li>Conditional Rendering with JSX</li> <li>Using Ternary Operators and Logical &amp;&amp;</li> </ul> </li> <li>Embedding JavaScript in JSX<ul> <li>Using Variables Inside JSX</li> <li>Inline Functions and Events</li> <li>Template Literals in JSX</li> </ul> </li> <li>JSX vs HTML Differences<ul> <li>Self-Closing Tags, ClassName, and Attributes</li> <li>Using Fragments in JSX</li> </ul> </li> <li>React.createElement() Behind the Scenes<ul> <li>JSX Transpilation</li> <li>Babel and Compilation Process</li> <li>How JSX Converts to React Elements</li> </ul> </li> </ul>"},{"location":"react/react-list/#4-react-components","title":"4. React Components","text":"<ul> <li>Functional Components<ul> <li>Stateless Components</li> <li>Writing Function-Based Components</li> <li>Arrow Functions vs Regular Functions in Components</li> </ul> </li> <li>Class Components<ul> <li>Understanding Component Classes</li> <li>Lifecycle Methods in Class Components</li> </ul> </li> <li>Props and Prop Drilling<ul> <li>Passing Data Between Components</li> <li>Avoiding Prop Drilling with Context API</li> <li>Default Props and PropTypes</li> </ul> </li> <li>Component Reusability and Composition<ul> <li>Best Practices for Reusable Components</li> <li>Composing Components</li> <li>Smart (Container) vs Dumb (Presentational) Components</li> </ul> </li> <li>Stateless vs Stateful Components<ul> <li>When to Use State in Components</li> <li>Converting Class Components to Functional Components</li> <li>State-driven UI Rendering</li> </ul> </li> <li>Default and Named Exports in Components<ul> <li>Exporting and Importing Components Correctly</li> <li>Common Mistakes with Import/Export</li> </ul> </li> <li>Dynamic Rendering with Props<ul> <li>Using Props to Change Component Behavior</li> <li>Conditional Rendering Based on Props</li> </ul> </li> <li>Higher-Order Components (HOC)<ul> <li>What are HOCs?</li> <li>Implementing an HOC</li> <li>Common Use Cases for HOCs</li> <li>Alternatives to HOCs (Render Props, Hooks)</li> </ul> </li> </ul>"},{"location":"react/react-list/#5-react-state-and-data-management","title":"5. React State and Data Management","text":"<ul> <li>Understanding State in React<ul> <li>What is State?</li> <li>State vs Props</li> <li>Why State is Immutable</li> </ul> </li> <li>useState Hook for State Management<ul> <li>Using useState to Handle Local State</li> <li>Functional Updates in useState</li> </ul> </li> <li>Class Component State vs Functional Component State<ul> <li>Managing State in Class Components</li> <li>Managing State in Functional Components with Hooks</li> <li>Migrating from Class to Functional Components</li> </ul> </li> <li>State Updates and Batch Processing<ul> <li>setState Behavior and Batch Updates</li> <li>Optimizing State Changes</li> <li>How React 18 Improves State Updates</li> </ul> </li> <li>Lifting State Up for Shared State Management<ul> <li>Why Lift State Up?</li> <li>Sharing State Between Components</li> <li>When to Use Context API vs Lifting State Up</li> </ul> </li> <li>Derived State from Props<ul> <li>When to Derive State from Props</li> <li>Avoiding Anti-Patterns</li> <li>Memoization for Derived State</li> </ul> </li> <li>React Context API for Global State Management<ul> <li>Creating and Using Context Providers</li> <li>Avoiding Unnecessary Renders with useMemo</li> <li>When to Use Context vs Redux</li> </ul> </li> <li>Advanced State Management Patterns<ul> <li>State Reducers with useReducer Hook</li> <li>Using Custom Hooks for State Management</li> <li>Comparison of Context API vs Redux vs Zustand</li> </ul> </li> </ul>"},{"location":"react/react-list/#6-handling-events-in-react","title":"6. Handling Events in React","text":"<ul> <li>Adding Event Listeners in JSX<ul> <li>Handling Click Events</li> <li>Handling Keyboard Events</li> <li>Handling Form Events</li> </ul> </li> <li>Handling Events with Functions<ul> <li>Inline Event Handlers</li> <li>Function References as Event Handlers</li> </ul> </li> <li>Synthetic Events in React<ul> <li>What are Synthetic Events?</li> <li>Differences Between Synthetic and Native Events</li> <li>event.persist()</li> </ul> </li> <li>Event Binding Methods (Arrow Functions, bind())<ul> <li>Using Arrow Functions</li> <li>Using bind() in Constructor</li> <li>Performance Considerations</li> </ul> </li> <li>Passing Arguments to Event Handlers<ul> <li>Using Inline Functions</li> <li>Using bind() Method</li> </ul> </li> <li>Preventing Default Behavior and Event Bubbling<ul> <li>Preventing Default Actions (e.g., form submission, links)</li> <li>Stopping Event Propagation</li> <li>Event Delegation in React</li> </ul> </li> </ul>"},{"location":"react/react-list/#7-react-hooks-fundamentals-advanced","title":"7. React Hooks (Fundamentals &amp; Advanced)","text":"<ul> <li>Introduction to Hooks<ul> <li>Why Hooks Were Introduced</li> <li>Rules of Hooks</li> <li>Migrating from Class Components to Hooks</li> </ul> </li> <li>useState Hook<ul> <li>Initializing State</li> <li>Updating State Correctly</li> <li>Functional Updates</li> <li>Lazy Initialization</li> </ul> </li> <li>useEffect Hook<ul> <li>Running Side Effects After Rendering</li> <li>Cleaning Up Effects</li> <li>Dependencies in useEffect</li> <li>Avoiding Infinite Loops</li> </ul> </li> <li>useRef Hook<ul> <li>Accessing DOM Elements</li> <li>Persisting Values Without Re-renders</li> <li>Storing Previous State Values</li> </ul> </li> <li>useContext Hook<ul> <li>Consuming Context Without Wrapper Components</li> <li>Avoiding Prop Drilling</li> <li>Best Practices for Context API</li> </ul> </li> <li>useReducer Hook<ul> <li>Alternative to useState for Complex State</li> <li>Understanding Actions and Reducers</li> <li>Combining Reducers</li> </ul> </li> <li>useMemo Hook<ul> <li>Performance Optimization for Expensive Calculations</li> <li>Dependency Array Best Practices</li> </ul> </li> <li>useCallback Hook<ul> <li>Preventing Unnecessary Function Re-Creation</li> <li>Memoizing Callback Functions</li> </ul> </li> <li>Custom Hooks in React<ul> <li>When to Create Custom Hooks</li> <li>Sharing Logic Between Components</li> <li>Best Practices for Custom Hooks</li> </ul> </li> </ul>"},{"location":"react/react-list/#8-react-forms-and-form-handling","title":"8. React Forms and Form Handling","text":"<ul> <li>Controlled Components vs Uncontrolled Components<ul> <li>What are Controlled Components?</li> <li>Managing Input State</li> <li>Using Refs for Uncontrolled Components</li> </ul> </li> <li>Handling Form Submission<ul> <li>Using onSubmit Event</li> <li>Preventing Default Behavior</li> <li>Handling Async Submissions</li> </ul> </li> <li>Handling Multiple Inputs<ul> <li>Using a Single Handler Function</li> <li>Managing State for Multiple Inputs</li> </ul> </li> <li>Validation in Forms<ul> <li>Client-Side Form Validation</li> <li>Custom Validation Functions</li> <li>Displaying Validation Messages</li> </ul> </li> <li>React Hook Form Library<ul> <li>Benefits of React Hook Form</li> <li>Registering Inputs</li> <li>Handling Errors</li> </ul> </li> <li>Third-party Form Libraries (Formik, Yup)<ul> <li>Setting Up Formik</li> <li>Schema Validation with Yup</li> <li>Handling Form Submission with Formik</li> </ul> </li> </ul>"},{"location":"react/react-list/#9-react-router-navigation-in-react","title":"9. React Router (Navigation in React)","text":"<ul> <li>Introduction to React Router<ul> <li>Why Use a Router?</li> <li>Key Features of React Router</li> </ul> </li> <li>Setting Up React Router<ul> <li>Installing React Router</li> <li>Configuring BrowserRouter</li> </ul> </li> <li>Route, Switch, and Link Components<ul> <li>Defining Routes</li> <li>Navigating with Link and NavLink</li> <li>Using Switch for Exclusive Routes</li> </ul> </li> <li>Dynamic Routing &amp; Nested Routes<ul> <li>Creating Dynamic Routes with URL Parameters</li> <li>Rendering Nested Routes</li> <li>Using useParams Hook</li> </ul> </li> <li>Programmatic Navigation (useNavigate, useHistory)<ul> <li>Navigating Programmatically</li> <li>Using useNavigate in React Router v6</li> <li>Handling Navigation State</li> </ul> </li> <li>Redirects and 404 Handling<ul> <li>Implementing Redirects</li> <li>Handling 404 Pages</li> <li>Custom Error Pages</li> </ul> </li> <li>Protected Routes &amp; Authentication Handling<ul> <li>Creating Protected Routes</li> <li>Implementing Authentication and Authorization</li> <li>Redirecting Unauthorized Users</li> </ul> </li> </ul>"},{"location":"react/react-list/#10-state-management-in-react","title":"10. State Management in React","text":""},{"location":"react/react-list/#1-context-api-and-usecontext-hook","title":"1. Context API and useContext Hook","text":"<ul> <li>What is Context API?</li> <li>When to Use Context API</li> <li>Creating a Context</li> <li>Providing and Consuming Context</li> <li>Using useContext Hook</li> <li>Avoiding Performance Issues with Context API</li> <li>Optimizing Context API with useMemo</li> </ul>"},{"location":"react/react-list/#2-when-to-use-context-api-vs-other-solutions","title":"2. When to Use Context API vs Other Solutions","text":"<ul> <li>Small-Scale vs Large-Scale Applications</li> <li>When Context API is Sufficient</li> <li>When to Use Redux or Other State Management Libraries</li> <li>Performance Considerations and Trade-offs</li> </ul>"},{"location":"react/react-list/#3-prop-drilling-vs-context-api","title":"3. Prop Drilling vs Context API","text":"<ul> <li>What is Prop Drilling?</li> <li>How Context API Solves Prop Drilling</li> <li>Alternatives to Context API (Component Composition, Render Props)</li> <li>Best Practices for Avoiding Unnecessary Re-renders</li> </ul>"},{"location":"react/react-list/#4-redux-state-management","title":"4. Redux (State Management)","text":""},{"location":"react/react-list/#41-introduction-to-redux","title":"4.1 Introduction to Redux","text":"<ul> <li>What is Redux?</li> <li>Why Use Redux?</li> <li>Redux Principles (Single Source of Truth, Read-Only State, Pure Functions)</li> <li>Comparing Redux with Context API</li> </ul>"},{"location":"react/react-list/#42-redux-store-actions-and-reducers","title":"4.2 Redux Store, Actions, and Reducers","text":"<ul> <li>Creating a Redux Store</li> <li>Defining Actions and Action Creators</li> <li>Writing Reducers</li> <li>Dispatching Actions</li> <li>Understanding Immutability in Redux</li> <li>Structuring Redux State</li> </ul>"},{"location":"react/react-list/#43-connecting-redux-with-react","title":"4.3 Connecting Redux with React","text":"<ul> <li>Installing Redux and React-Redux</li> <li>Using Provider and Store</li> <li>Connecting Components with useSelector and useDispatch</li> <li>Using mapStateToProps and mapDispatchToProps (Class Components)</li> <li>Optimizing Performance with Reselect</li> </ul>"},{"location":"react/react-list/#44-middleware-in-redux-redux-thunk-redux-saga","title":"4.4 Middleware in Redux (Redux Thunk &amp; Redux Saga)","text":"<ul> <li>What is Middleware?</li> <li>Introduction to Redux Thunk<ul> <li>Handling Asynchronous Logic</li> <li>Dispatching Multiple Actions</li> <li>Fetching Data with Redux Thunk</li> </ul> </li> <li>Introduction to Redux Query</li> </ul>"},{"location":"react/react-list/#5-zustand","title":"5. Zustand","text":"<ul> <li>What is Zustand?</li> <li>Advantages of Zustand Over Redux</li> <li>Creating a Zustand Store</li> <li>Managing State in a Minimalist Way</li> <li>Using Middleware with Zustand</li> </ul>"},{"location":"react/react-list/#_1","title":"0.List of Content","text":""},{"location":"react/react-list/#11-react-styling-techniques","title":"11. React Styling Techniques","text":""},{"location":"react/react-list/#1-css-in-react","title":"1. CSS in React","text":"<ul> <li>Inline Styles in React<ul> <li>How to Apply Inline Styles</li> <li>Pros and Cons of Inline Styles</li> <li>Handling Dynamic Styles with Inline Styles</li> </ul> </li> <li>External CSS Stylesheets<ul> <li>Importing and Using External CSS Files</li> <li>Structuring CSS for Large Projects</li> <li>Naming Conventions (BEM, SMACSS)</li> </ul> </li> <li>CSS Modules<ul> <li>What are CSS Modules?</li> <li>Using CSS Modules in React</li> <li>Scope Isolation and Benefits</li> </ul> </li> </ul>"},{"location":"react/react-list/#2-styled-components-css-in-js","title":"2. Styled Components (CSS-in-JS)","text":"<ul> <li>Introduction to Styled Components</li> <li>Installing and Setting Up Styled Components</li> <li>Writing Styled Components</li> <li>Using Props to Modify Styles Dynamically</li> <li>Theming with Styled Components</li> <li>Global Styles in Styled Components</li> <li>Best Practices for Styled Components</li> </ul>"},{"location":"react/react-list/#3-tailwind-css-with-react","title":"3. Tailwind CSS with React","text":"<ul> <li>What is Tailwind CSS?</li> <li>Installing Tailwind CSS in a React Project</li> <li>Using Utility Classes for Styling</li> <li>Customizing Tailwind Configurations</li> <li>Optimizing Performance with PurgeCSS</li> <li>Comparing Tailwind with Traditional CSS Approaches</li> </ul>"},{"location":"react/react-list/#4-emotionjs-for-css-in-js","title":"4. Emotion.js for CSS-in-JS","text":"<ul> <li>Introduction to Emotion.js</li> <li>Setting Up Emotion in React</li> <li>Writing CSS with Emotion</li> <li>Theming with Emotion</li> <li>Performance Considerations with Emotion</li> </ul>"},{"location":"react/react-list/#5-bootstrap-material-ui-with-react","title":"5. Bootstrap &amp; Material UI with React","text":"<ul> <li>Installing and Using Bootstrap in React</li> <li>Using Material UI Components</li> <li>Customizing Bootstrap and Material UI Themes</li> <li>Performance Considerations for UI Libraries</li> <li>When to Use UI Component Libraries vs Custom Styling</li> </ul>"},{"location":"react/react-list/#12-react-server-side-rendering-ssr-static-site-generation-ssg","title":"12. React Server-Side Rendering (SSR) &amp; Static Site Generation (SSG)","text":""},{"location":"react/react-list/#1-introduction-to-ssr-ssg","title":"1. Introduction to SSR &amp; SSG","text":"<ul> <li>Difference Between SSR, SSG, and CSR (Client-Side Rendering)</li> <li>Use Cases for SSR and SSG</li> <li>Performance Benefits and SEO Considerations</li> </ul>"},{"location":"react/react-list/#2-benefits-of-ssr-and-ssg","title":"2. Benefits of SSR and SSG","text":"<ul> <li>Improved SEO with Pre-rendering</li> <li>Faster Initial Page Load</li> <li>Caching and Performance Optimization</li> <li>Reduced Client-Side JavaScript Load</li> </ul>"},{"location":"react/react-list/#3-implementing-ssr-with-nextjs","title":"3. Implementing SSR with Next.js","text":"<ul> <li>What is Next.js?</li> <li>Setting Up a Next.js Project</li> <li>Using <code>getServerSideProps()</code> for Server Rendering</li> <li>Hydration and Client-Side Interactivity</li> <li>API Fetching in SSR Mode</li> <li>Common Pitfalls and Debugging SSR Issues</li> </ul>"},{"location":"react/react-list/#4-static-site-generation-ssg-with-nextjs","title":"4. Static Site Generation (SSG) with Next.js","text":"<ul> <li>What is SSG and How It Works?</li> <li>Using <code>getStaticProps()</code> for Static Site Generation</li> <li>Incremental Static Regeneration (ISR)</li> <li>Combining SSG with Client-Side Rendering</li> <li>Best Practices for Static Sites</li> </ul>"},{"location":"react/react-list/#5-api-routes-in-nextjs","title":"5. API Routes in Next.js","text":"<ul> <li>Creating API Endpoints in Next.js</li> <li>Serverless Functions in Next.js</li> <li>Authentication and Middleware in API Routes</li> <li>Fetching Data from API Routes in Next.js</li> <li>Deployment Considerations for API Routes</li> </ul>"},{"location":"react/react-list/#13-react-progressive-web-apps-pwas","title":"13. React Progressive Web Apps (PWAs)","text":""},{"location":"react/react-list/#what-are-pwas","title":"What are PWAs?","text":"<ul> <li>Definition and Characteristics</li> <li>Benefits of Building PWAs</li> </ul>"},{"location":"react/react-list/#adding-service-workers-in-react","title":"Adding Service Workers in React","text":"<ul> <li>What is a Service Worker?</li> <li>Registering a Service Worker in React</li> <li>Lifecycle of a Service Worker</li> </ul>"},{"location":"react/react-list/#offline-support-in-react-apps","title":"Offline Support in React Apps","text":"<ul> <li>Caching Assets for Offline Access</li> <li>Handling Offline Requests</li> <li>Implementing Offline Fallbacks</li> </ul>"},{"location":"react/react-list/#caching-and-background-sync","title":"Caching and Background Sync","text":"<ul> <li>Using Cache API for Asset Caching</li> <li>Background Sync for Deferred Requests</li> <li>Strategies for Managing Cached Data</li> </ul>"},{"location":"react/react-list/#web-push-notifications-in-react","title":"Web Push Notifications in React","text":"<ul> <li>Introduction to Web Push Notifications</li> <li>Setting Up Push Notifications in React</li> <li>Sending Push Notifications via a Server</li> <li>Handling Push Events in Service Workers</li> </ul>"},{"location":"react/react-list/#15-react-performance-optimization","title":"15. React Performance Optimization","text":""},{"location":"react/react-list/#1-reactmemo-for-component-optimization","title":"1. React.memo for Component Optimization","text":"<ul> <li>What is React.memo?</li> <li>When to Use React.memo</li> <li>Preventing Unnecessary Renders</li> <li>Limitations of React.memo</li> </ul>"},{"location":"react/react-list/#2-usecallback-usememo-hooks","title":"2. useCallback &amp; useMemo Hooks","text":"<ul> <li>How useCallback Prevents Unnecessary Function Recreation</li> <li>How useMemo Optimizes Computation-heavy Operations</li> <li>Practical Examples of useCallback and useMemo</li> <li>When Not to Use useCallback and useMemo</li> </ul>"},{"location":"react/react-list/#3-lazy-loading-react-suspense","title":"3. Lazy Loading &amp; React Suspense","text":"<ul> <li>What is Lazy Loading?</li> <li>Implementing React.lazy for Component Splitting</li> <li>Using Suspense for Fallback UI</li> <li>Best Practices for Lazy Loading</li> </ul>"},{"location":"react/react-list/#4-code-splitting-dynamic-imports","title":"4. Code Splitting &amp; Dynamic Imports","text":"<ul> <li>Introduction to Code Splitting</li> <li>Using React.lazy and Import() for Code Splitting</li> <li>Route-based Code Splitting with React Router</li> <li>Performance Benefits of Code Splitting</li> </ul>"},{"location":"react/react-list/#5-avoiding-unnecessary-re-renders","title":"5. Avoiding Unnecessary Re-renders","text":"<ul> <li>Understanding React's Reconciliation Process</li> <li>Key Techniques to Reduce Re-renders</li> <li>Using shouldComponentUpdate in Class Components</li> <li>Using PureComponent in Class Components</li> <li>Using React.memo and useMemo in Functional Components</li> <li>Avoiding Unnecessary State and Prop Changes</li> </ul>"},{"location":"react/react-list/#6-virtualization-with-react-virtualized","title":"6. Virtualization with React Virtualized","text":"<ul> <li>What is Virtualization?</li> <li>Using React Virtualized for Large Lists</li> <li>Windowing for Performance Optimization</li> <li>When to Use Virtualization</li> </ul>"},{"location":"react/react-list/#16-react-testing-and-debugging","title":"16. React Testing and Debugging","text":""},{"location":"react/react-list/#introduction-to-testing-in-react","title":"Introduction to Testing in React","text":"<ul> <li>Importance of Testing in React Applications</li> <li>Types of Testing: Unit, Integration, and E2E</li> </ul>"},{"location":"react/react-list/#unit-testing-with-jest","title":"Unit Testing with Jest","text":"<ul> <li>Setting Up Jest in a React Project</li> <li>Writing and Running Basic Unit Tests</li> <li>Mocking Functions and Modules</li> <li>Snapshot Testing with Jest</li> </ul>"},{"location":"react/react-list/#react-testing-library","title":"React Testing Library","text":"<ul> <li>Why Use React Testing Library?</li> <li>Rendering Components for Testing</li> <li>Simulating User Events</li> <li>Asserting DOM Changes</li> <li>Testing Asynchronous Operations</li> </ul>"},{"location":"react/react-list/#enzyme-for-component-testing","title":"Enzyme for Component Testing","text":"<ul> <li>Introduction to Enzyme</li> <li>Shallow Rendering vs Full Rendering</li> <li>Simulating Events and Interactions</li> <li>Comparing Enzyme with React Testing Library</li> </ul>"},{"location":"react/react-list/#end-to-end-e2e-testing-with-cypress","title":"End-to-End (E2E) Testing with Cypress","text":"<ul> <li>Introduction to Cypress</li> <li>Setting Up Cypress in React</li> <li>Writing Basic E2E Tests</li> <li>Testing Navigation and Form Submissions</li> <li>Mocking API Responses in Cypress</li> </ul>"},{"location":"react/react-list/#debugging-react-applications-with-react-developer-tools","title":"Debugging React Applications with React Developer Tools","text":"<ul> <li>Installing React Developer Tools</li> <li>Inspecting Components and State</li> <li>Debugging Performance Issues</li> <li>Profiling Component Renders</li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/","title":"14.0.JSON Server","text":""},{"location":"reactapi/14.0.JSON%20Server/#json-server-create-your-own-api-locally","title":"JSON Server (Create Your Own API Locally)","text":""},{"location":"reactapi/14.0.JSON%20Server/#why","title":"Why?","text":"<ul> <li>Lets you build the frontend before the backend exists.</li> <li>Quick mock API with real HTTP requests.</li> <li>No need to set up databases.</li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#install-json-server","title":"\ud83d\udd39 Install JSON Server","text":"<p>Make sure you have Node.js installed, then run:</p> <pre><code>npm install json-server\n</code></pre> <p>\ud83d\udca1 If you want a global install, you can use</p> <pre><code>npx install -g json-server\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#create-a-dbjson-file","title":"\ud83d\udd39 Create a <code>db.json</code> File","text":"<p>This will be your mock database.</p> <pre><code>{\n  \"users\": [\n    { \"id\": 1, \"name\": \"Soumya\", \"email\": \"soumya@example.com\", \"age\": 28, \"role\": \"admin\" },\n    { \"id\": 2, \"name\": \"Anya\", \"email\": \"anya@example.com\", \"age\": 24, \"role\": \"editor\" },\n    { \"id\": 3, \"name\": \"Rajesh\", \"email\": \"rajesh@example.com\", \"age\": 32, \"role\": \"viewer\" },\n    { \"id\": 4, \"name\": \"Priya\", \"email\": \"priya@example.com\", \"age\": 26, \"role\": \"editor\" },\n    { \"id\": 5, \"name\": \"Karan\", \"email\": \"karan@example.com\", \"age\": 35, \"role\": \"admin\" }\n  ],\n  \"posts\": [\n    { \"id\": 1, \"userId\": 1, \"title\": \"Hello World\", \"content\": \"This is my first post\", \"likes\": 10 },\n    { \"id\": 2, \"userId\": 2, \"title\": \"React Tips\", \"content\": \"Some useful React tricks and tips\", \"likes\": 25 },\n    { \"id\": 3, \"userId\": 3, \"title\": \"GraphQL Basics\", \"content\": \"Introduction to GraphQL\", \"likes\": 15 },\n    { \"id\": 4, \"userId\": 1, \"title\": \"Node.js Streams\", \"content\": \"Understanding streams in Node.js\", \"likes\": 8 },\n    { \"id\": 5, \"userId\": 4, \"title\": \"CSS Grid Magic\", \"content\": \"Making layouts with CSS Grid\", \"likes\": 12 }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"postId\": 1, \"userId\": 2, \"content\": \"Nice post!\" },\n    { \"id\": 2, \"postId\": 1, \"userId\": 3, \"content\": \"Thanks for sharing\" },\n    { \"id\": 3, \"postId\": 2, \"userId\": 1, \"content\": \"Great tips!\" },\n    { \"id\": 4, \"postId\": 3, \"userId\": 4, \"content\": \"Very helpful\" },\n    { \"id\": 5, \"postId\": 5, \"userId\": 5, \"content\": \"Love CSS Grid\" }\n  ],\n  \"products\": [\n    { \"id\": 1, \"name\": \"Laptop\", \"price\": 1200, \"inStock\": true },\n    { \"id\": 2, \"name\": \"Smartphone\", \"price\": 800, \"inStock\": true },\n    { \"id\": 3, \"name\": \"Headphones\", \"price\": 150, \"inStock\": false },\n    { \"id\": 4, \"name\": \"Monitor\", \"price\": 300, \"inStock\": true },\n    { \"id\": 5, \"name\": \"Keyboard\", \"price\": 70, \"inStock\": true }\n  ],\n  \"orders\": [\n    { \"id\": 1, \"userId\": 1, \"productId\": 1, \"quantity\": 1, \"status\": \"shipped\" },\n    { \"id\": 2, \"userId\": 2, \"productId\": 2, \"quantity\": 2, \"status\": \"processing\" },\n    { \"id\": 3, \"userId\": 3, \"productId\": 3, \"quantity\": 1, \"status\": \"delivered\" },\n    { \"id\": 4, \"userId\": 4, \"productId\": 5, \"quantity\": 3, \"status\": \"pending\" },\n    { \"id\": 5, \"userId\": 5, \"productId\": 4, \"quantity\": 1, \"status\": \"shipped\" }\n  ]\n}\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#start-the-json-server","title":"\ud83d\udd39 Start the JSON Server","text":""},{"location":"reactapi/14.0.JSON%20Server/#basic-start-command","title":"\ud83d\udccc Basic Start Command","text":"<pre><code>json-server --watch db.json --port 5000\n</code></pre> <ul> <li><code>--watch</code> \u2192 automatically reloads when you edit <code>db.json</code></li> <li><code>--port 5000</code> \u2192 runs API at <code>http://localhost:5000</code></li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#using-npx-without-global-install","title":"\ud83d\udccc Using <code>npx</code> (without global install)","text":"<pre><code>npx json-server --watch db.json --port 5000\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#changing-host","title":"\ud83d\udccc Changing Host","text":"<pre><code>json-server --watch db.json --host 0.0.0.0 --port 5000\n</code></pre> <p>This allows access from other devices on your network.</p>"},{"location":"reactapi/14.0.JSON%20Server/#using-a-custom-routes-file","title":"\ud83d\udccc Using a Custom Routes File","text":"<p>You can rewrite endpoints using <code>routes.json</code>:</p> <pre><code>{\n  \"/api/*\": \"/$1\",\n  \"/users/list\": \"/users\"\n}\n</code></pre> <p>Run with:</p> <pre><code>json-server --watch db.json --routes routes.json --port 5000\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#run-with-a-different-database-file","title":"\ud83d\udccc Run with a Different Database File","text":"<pre><code>json-server --watch data/mydb.json --port 5000\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#run-with-delay-simulate-slow-network","title":"\ud83d\udccc Run with Delay (Simulate Slow Network)","text":"<pre><code>json-server --watch db.json --delay 1000 --port 5000\n</code></pre> <p>Delay is in milliseconds.</p>"},{"location":"reactapi/14.0.JSON%20Server/#try-the-api","title":"\ud83d\udd39 Try the API","text":""},{"location":"reactapi/14.0.JSON%20Server/#basic-crud","title":"\ud83d\udccc Basic CRUD","text":"<ul> <li> <p>Get all users: <code>GET http://localhost:5000/users</code></p> </li> <li> <p>Get single user: <code>GET http://localhost:5000/users/1</code></p> </li> <li> <p>Add a new user: <code>POST http://localhost:5000/users</code> (with JSON body)</p> </li> <li> <p>Update a user (replace all fields): <code>PUT http://localhost:5000/users/1</code></p> </li> <li> <p>Update a user (partial update): <code>PATCH http://localhost:5000/users/1</code></p> </li> <li> <p>Delete a user: <code>DELETE http://localhost:5000/users/1</code></p> </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#filtering","title":"\ud83d\udccc Filtering","text":"<ul> <li> <p>By exact match: <code>GET /users?name=Soumya</code></p> </li> <li> <p>By multiple fields: <code>GET /users?name=Soumya&amp;email=Soumya@example.com</code></p> </li> <li> <p>Full-text search: <code>GET /users?q=anya</code></p> </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#pagination","title":"\ud83d\udccc Pagination","text":"<ul> <li> <p>First page, 5 results per page: <code>GET /users?_page=1&amp;_limit=5</code></p> </li> <li> <p>Second page, 10 results per page: <code>GET /users?_page=2&amp;_limit=10</code></p> </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#sorting","title":"\ud83d\udccc Sorting","text":"<ul> <li> <p>Sort by name (ascending): <code>GET /users?_sort=name&amp;_order=asc</code></p> </li> <li> <p>Sort by name (descending): <code>GET /users?_sort=name&amp;_order=desc</code></p> </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#nested-resources","title":"\ud83d\udccc Nested Resources","text":"<ul> <li>Get posts of a user: <code>GET /posts?userId=1</code></li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#operators","title":"\ud83d\udccc Operators","text":"<ul> <li> <p>Greater than: <code>GET /users?age_gte=18</code></p> </li> <li> <p>Less than: <code>GET /users?age_lte=30</code></p> </li> <li> <p>Not equal: <code>GET /users?name_ne=Anya</code></p> </li> <li> <p>Multiple values (OR logic): <code>GET /users?id=1&amp;id=2</code></p> </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#relationships-embed-expand","title":"\ud83d\udccc Relationships (Embed &amp; Expand)","text":"<ul> <li> <p>Embed related data: <code>GET /users?_embed=posts</code> (returns each user with their posts array)</p> </li> <li> <p>Expand foreign key: <code>GET /posts?_expand=user</code> (returns each post with full user data)</p> </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#special-routes","title":"\ud83d\udccc Special Routes","text":"<ul> <li> <p>Get all database data: <code>GET /db</code></p> </li> <li> <p>List all routes: <code>GET /</code></p> </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#example-post-body","title":"\ud83d\udccc Example POST Body","text":"<pre><code>{\n  \"name\": \"New User\",\n  \"email\": \"newuser@example.com\"\n}\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#example-patch-body","title":"\ud83d\udccc Example PATCH Body","text":"<pre><code>{\n  \"email\": \"updated@example.com\"\n}\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#use-it-in-your-frontend","title":"\ud83d\udd39 Use It in Your Frontend","text":"<p>Example with Axios:</p> <pre><code>import axios from 'axios';\n\naxios.get('http://localhost:5000/users')\n  .then(res =&gt; console.log(res.data))\n  .catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#pro-tips","title":"\ud83d\udd39 Pro Tips","text":"<ul> <li>Create nested routes or pagination easily:</li> </ul> <pre><code>GET /users?_page=1&amp;_limit=5\nGET /posts?userId=1\n</code></pre>"},{"location":"reactapi/14.0.JSON%20Server/#hosting-a-json-server-on-render-platform","title":"\ud83d\udd39 Hosting a JSON Server on Render Platform","text":"<ul> <li>create a file and inside of it add a db.json file with your data inside it.</li> <li>in that folder terminal run <code>npm init -y</code>, it will create a package.json</li> <li> <p>then install the JSON server with <code>npx install json-server@0.17.4</code> command</p> </li> <li> <p>change the package.json file's scripts object</p> </li> </ul> <pre><code>{\n  \"name\": \"json-server-hosting\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"json-server --watch db.json --host 0.0.0.0 --port $PORT\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"json-server\": \"^0.17.4\"\n  }\n}\n</code></pre> <ul> <li>then create a github repo and push this code their</li> <li>then host it at  render  by connecting your github to render</li> <li> <p><code>https://dashboard.render.com/</code></p> </li> <li> <p>then you will get an api link somthing like this</p> </li> <li><code>https://json-server-hosting-235k.onrender.com/</code></li> <li>it's fake btw</li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#will-it-update-the-github-repo-aswell-when-dbjson-changes","title":"Will it update the github repo aswell when db.json changes?","text":"<p>No \u2014 updating your Render-deployed JSON server will not update your GitHub repo\u2019s db.json file.</p> <ul> <li> And also keep in mind that the render server will stop after 5-10 min of inactivity it goes to sleep and when we make another request after sometime it wakes up but the data will be updated again from the github repo copy that it stored while building the server. </li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#heres-why","title":"Here\u2019s why","text":"<ul> <li>When you deploy to Render, it copies your GitHub repo into its own environment at deployment time.</li> <li>After deployment, Render runs your app independently of GitHub \u2014 the server\u2019s db.json file is stored on Render\u2019s filesystem, not GitHub\u2019s.</li> <li>Any data you POST, PUT, or DELETE will only affect the live server\u2019s db.json in Render\u2019s environment.</li> <li>GitHub is only updated when you manually commit &amp; push changes from your local machine \u2014 it doesn\u2019t sync automatically with Render.</li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#in-short","title":"In short","text":"<ul> <li>Render db.json \u2192 Changes in production (live data).</li> <li>GitHub db.json \u2192 Stays the same unless you manually update it.</li> </ul>"},{"location":"reactapi/14.0.JSON%20Server/#keep-it-sync","title":"Keep it sync","text":"<ul> <li> <p>If you want both to stay in sync, you\u2019d need a process like:</p> <ul> <li>Download the updated db.json from Render.</li> <li>Replace it in your local project.</li> <li>Commit &amp; push to GitHub.</li> </ul> </li> <li> <p>To download and update your db.json in local github repo,</p> </li> <li>first go to your repo folder and open terminal then,</li> <li> <p>use this command <code>curl https://json-server-hosting-235k.onrender.com/db &gt; db.json</code></p> </li> <li> <p>How it works</p> <ul> <li>curl fetches the entire database from the /db endpoint. <p>writes it to db.json, overwriting your local file.</p> </li> <li>You can now git add db.json, git commit -m \"Update db.json from Render\",</li> <li>and git push to update GitHub.</li> </ul> </li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/","title":"14.1.Core Fundamentals","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#core-fundamentals","title":"Core Fundamentals","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#0-api","title":"0. API","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#what-is-an-api","title":"What is an API?","text":"<p>An API (Application Programming Interface) is a set of rules and protocols that allows different software applications to communicate with each other. It defines how requests should be made, what data should be sent, and how responses should be structured.</p> <p>Example use cases:</p> <ul> <li>A frontend web app fetching data from a backend server.</li> <li>A mobile app retrieving weather updates from a weather API.</li> <li>Payment gateways processing transactions through APIs.</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#what-is-an-api-request","title":"What is an API Request?","text":"<p>An API request is when a client (such as a browser, mobile app, or server) sends a request to an API to either:</p> <ul> <li>Retrieve data (e.g., get user profile)</li> <li>Send data (e.g., submit a form)</li> <li>Update data (e.g., edit a profile)</li> <li>Delete data (e.g., remove an account)</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#components-of-an-api-request","title":"Components of an API Request","text":"<p>Endpoint (URL) The specific address where the API is hosted.</p> <ul> <li>https://restful-booker.herokuapp.com/user/123</li> </ul> <p>HTTP Method Defines the action to perform:</p> <ul> <li><code>GET</code> \u2192 Retrieve data</li> <li><code>POST</code> \u2192 Send data</li> <li><code>PUT/PATCH</code> \u2192 Update data</li> <li><code>DELETE</code> \u2192 Remove data</li> </ul> <p>Headers Extra information sent with the request, such as:</p> <ul> <li>Authorization: Access tokens, API keys <code>Authorization: Bearer &lt;token&gt;</code></li> <li>Content-Type: Format of the request body (e.g., JSON) <code>Content-Type: application/json</code></li> <li>Accept: Expected response format <code>Accept: application/json</code></li> </ul> <p>Parameters Extra information to customize the request.</p> <ul> <li>Types:<ul> <li>Path Parameters \u2192 Part of the endpoint (e.g., <code>/users/{id}</code>)</li> <li>Query Parameters \u2192 Added to URL (e.g., <code>?page=2&amp;limit=10</code>)</li> <li>Body Parameters \u2192 Sent inside the request body (for <code>POST</code>, <code>PUT</code>, <code>PATCH</code>).</li> </ul> </li> </ul> <p>Body (Payload) The actual data sent with <code>POST</code>, <code>PUT</code>, or <code>PATCH</code> requests. Example (JSON):</p> <pre><code>{\n  \"firstname\": \"Kinvu\",\n  \"lastname\": \"Rathor\",\n  \"email\": \"kinvurathor123@example.com\",\n  \"totalprice\": 111,\n  \"depositpaid\": true,\n  \"bokingdates\":\n  {\n    \"chekin\":\"2018-01-01\",\n    \"checkout\":\"2019-01-01\"\n  },\n  \"additionalneeds\":\"Breakfast\"\n}\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#components-of-an-api-response","title":"Components of an API Response","text":"<p>An API response is the message the server sends back to the client after processing a request.</p> <ul> <li> <p>Status Code</p> </li> <li> <p>Indicates the result of the request.</p> </li> <li> <p>Examples:</p> <ul> <li><code>200 OK</code>: Request successful.</li> <li><code>201 Created</code>: Resource successfully created.</li> <li><code>400 Bad Request</code>: Invalid request.</li> <li><code>401 Unauthorized</code>: Missing/invalid credentials.</li> <li><code>404 Not Found</code>: Resource doesn\u2019t exist.</li> <li><code>500 Internal Server Error</code>: Server-side issue.</li> </ul> </li> <li> <p>Headers</p> </li> <li> <p>Metadata about the response.</p> </li> <li> <p>Examples:</p> <ul> <li><code>Content-Type</code>: Type of the returned content (e.g., <code>application/json</code>).</li> <li><code>Cache-Control</code>: How the response should be cached.</li> </ul> </li> <li> <p>Body (Payload)</p> </li> <li> <p>The main content/data returned by the API.</p> <ul> <li>Usually in JSON, XML, or other formats.</li> <li>Example JSON:</li> </ul> <pre><code>{\n  \"id\": 123,\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\"\n}\n</code></pre> </li> <li> <p>Message</p> </li> <li> <p>Optional text explaining the result or error.</p> </li> <li>Often included in the response body for clarity.</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#request-flow","title":"Request Flow","text":"<ul> <li> <p>Request flow</p> <ul> <li><code>Client sends</code> an <code>API request</code> (method, URL, headers, optional body).</li> <li><code>Server</code> processes the <code>request</code>.</li> <li><code>Server sends</code> back a <code>response</code> (status code, headers, and data).</li> </ul> </li> <li> <p>Common Response Elements</p> <ul> <li>Status Code: HTTP status (e.g., 200 OK, 404 Not Found, 500 Internal Server Error).</li> <li>Headers: Metadata about the response.</li> <li>Body: The actual returned data (usually in JSON or XML format).</li> </ul> </li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#1-http-basics","title":"1. HTTP Basics","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#11-http-methods","title":"1.1 HTTP Methods","text":"<p>HTTP methods define the type of action you want to perform on a resource.</p> <ul> <li>GET \u2013 Retrieve data from the server (read-only, no side effects).</li> <li>POST \u2013 Send new data to the server (creates a new resource).</li> <li>PUT \u2013 Update an entire resource on the server.</li> <li>PATCH \u2013 Update part of a resource (partial update).</li> <li>DELETE \u2013 Remove a resource from the server.</li> <li>OPTIONS \u2013 Check which HTTP methods are available for a resource.</li> <li>HEAD \u2013 Same as GET, but returns only headers (no response body).</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#12-http-status-codes","title":"1.2 HTTP Status Codes","text":"<p>Status codes indicate the result of the HTTP request and are grouped by their first digit.</p> <ul> <li> <p>2xx (Success)</p> </li> <li> <p><code>200 OK</code> \u2013 Request processed successfully.</p> </li> <li><code>201 Created</code> \u2013 Resource created successfully.</li> <li><code>202 Accepted</code> \u2013 Request accepted for processing, but not completed yet.</li> <li><code>204 No Content</code> \u2013 Request succeeded, but no data returned.</li> </ul> <ul> <li> <p>3xx (Redirection)</p> </li> <li> <p><code>301 Moved Permanently</code> \u2013 Resource has been permanently moved to a new URL.</p> </li> <li><code>302 Found</code> \u2013 Temporary redirect.</li> <li><code>304 Not Modified</code> \u2013 Resource has not changed since last request (used in caching).</li> </ul> <ul> <li> <p>4xx (Client Errors)</p> </li> <li> <p><code>400 Bad Request</code> \u2013 Invalid request syntax or parameters.</p> </li> <li><code>401 Unauthorized</code> \u2013 Authentication required or failed.</li> <li><code>403 Forbidden</code> \u2013 Client is authenticated but not allowed to access the resource.</li> <li><code>404 Not Found</code> \u2013 Resource not found.</li> <li><code>405 Method Not Allowed</code> \u2013 Request method is not supported for the resource.</li> <li><code>429 Too Many Requests</code> \u2013 Client sent too many requests in a short period (rate limiting).</li> </ul> <ul> <li> <p>5xx (Server Errors)</p> </li> <li> <p><code>500 Internal Server Error</code> \u2013 Generic server-side error.</p> </li> <li><code>502 Bad Gateway</code> \u2013 Server received an invalid response from an upstream server.</li> <li><code>503 Service Unavailable</code> \u2013 Server is temporarily down or overloaded.</li> <li><code>504 Gateway Timeout</code> \u2013 Server did not receive a timely response from another server.</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#13-http-headers","title":"1.3 HTTP Headers","text":"<p>HTTP headers provide metadata about a request or response. They are sent as key-value pairs and can control how data is processed, cached, authenticated, or presented.</p>"},{"location":"reactapi/14.1.Core%20Fundamentals/#a-request-headers","title":"A. Request Headers","text":"<p>Headers sent from client to server.</p> <ol> <li> <p>Content-Type</p> <ul> <li>Describes the format of the request body.</li> <li>Common values:<ul> <li><code>application/json</code> \u2013 JSON data</li> <li><code>application/x-www-form-urlencoded</code> \u2013 Form data</li> <li><code>multipart/form-data</code> \u2013 File uploads</li> <li><code>text/plain</code> \u2013 Plain text</li> </ul> </li> <li>Example:</li> </ul> <pre><code>Content-Type: application/json\n</code></pre> </li> <li> <p>Authorization</p> <ul> <li>Sends authentication credentials.</li> <li>Common schemes:<ul> <li><code>Bearer &lt;token&gt;</code> \u2013 Token-based authentication (JWT, OAuth)</li> <li><code>Basic &lt;base64&gt;</code> \u2013 Username and password (less secure)</li> <li><code>ApiKey &lt;key&gt;</code> \u2013 Custom API key</li> </ul> </li> <li>Example:</li> </ul> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIs...\n</code></pre> </li> <li> <p>Accept</p> <ul> <li>Specifies the content format the client expects from the server.</li> <li>Example:</li> </ul> <pre><code>Accept: application/json\n</code></pre> </li> <li> <p>User-Agent</p> <ul> <li>Identifies the client application or browser making the request.</li> <li>Example:</li> </ul> <pre><code>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\n</code></pre> </li> <li> <p>Cookie</p> <ul> <li>Sends cookies from the browser to the server for session tracking.</li> <li>Example:</li> </ul> <pre><code>Cookie: sessionId=abc123; theme=dark\n</code></pre> </li> </ol>"},{"location":"reactapi/14.1.Core%20Fundamentals/#b-response-headers","title":"B. Response Headers","text":"<p>Headers sent from server to client.</p> <ol> <li> <p>Content-Type</p> <ul> <li>Specifies the format of the response body.</li> <li>Example:</li> </ul> <pre><code>Content-Type: application/json\n</code></pre> </li> <li> <p>Content-Length</p> <ul> <li>The size of the response body in bytes.</li> <li>Example:</li> </ul> <pre><code>Content-Length: 256\n</code></pre> </li> <li> <p>Cache-Control</p> <ul> <li>Controls caching behavior.</li> <li>Examples:</li> </ul> <pre><code>Cache-Control: no-cache\nCache-Control: max-age=3600\n</code></pre> </li> <li> <p>Set-Cookie</p> <ul> <li>Sends cookies from the server to the client.</li> <li>Example:</li> </ul> <pre><code>Set-Cookie: sessionId=abc123; HttpOnly; Secure\n</code></pre> </li> <li> <p>Access-Control-Allow-Origin (CORS)</p> <ul> <li>Defines which origins are allowed to access the resource.</li> <li>Example:</li> </ul> <pre><code>Access-Control-Allow-Origin: *\n</code></pre> </li> </ol>"},{"location":"reactapi/14.1.Core%20Fundamentals/#c-custom-headers","title":"C. Custom Headers","text":"<ul> <li>Developers can create custom headers prefixed with <code>X-</code> or any name.</li> <li>Example:<ul> <li>X-Request-ID \u2013 Track requests across systems.</li> <li>X-API-Version \u2013 Indicate API version used.</li> <li>X-Client-Type \u2013 Identify app type (mobile, web, etc.).</li> </ul> </li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#2-parameters-path-query-and-body-param","title":"2. Parameters (Path, Query and Body Param)","text":"<p>Parameters provide additional information for the server to process a request. They can be sent in the URL or request body, depending on the API design.</p>"},{"location":"reactapi/14.1.Core%20Fundamentals/#21-path-parameters","title":"2.1 Path Parameters","text":"<ul> <li>Definition \u2013 Variable parts of the URL path used to identify specific resources. Defined in API documentation with placeholders like <code>/users/{id}</code>.</li> <li>Purpose \u2013 Ideal for resource identification when the parameter is essential to the path.</li> <li>Visibility \u2013 Always visible in the URL.</li> <li>Characteristics:<ul> <li>Fixed position in the URL</li> <li>Usually required</li> <li>Cannot contain spaces (must be URL-encoded if special characters are needed)</li> </ul> </li> <li>Example:</li> </ul> <pre><code>GET /users/123  \n</code></pre> <p>Breakdown:       - <code>123</code> \u2192 ID of the user to fetch.  </p> <p>Path parameters are often defined in API documentation like: <code>/users/{id}</code></p>"},{"location":"reactapi/14.1.Core%20Fundamentals/#22-query-parameters","title":"2.2 Query Parameters","text":"<ul> <li>Definition \u2013 Appended to the end of a URL after a <code>?</code>, with multiple parameters separated by <code>&amp;</code>.</li> <li>Purpose \u2013 Commonly used for:<ul> <li>Filtering results (e.g., <code>status=active</code>)</li> <li>Searching (e.g., <code>search=keyword</code>)</li> <li>Pagination (e.g., <code>page=2&amp;limit=10</code>)</li> <li>Sorting (e.g., <code>sort=asc</code>)</li> <li>Optional configuration settings</li> </ul> </li> <li>Visibility \u2013 Visible in the browser's address bar and easy to share or bookmark.</li> <li>Data Types \u2013 Strings, numbers, booleans, arrays (comma-separated or repeated keys).</li> <li>Example:</li> </ul> <pre><code>GET /users?page=2&amp;limit=10&amp;sort=desc&amp;status=active\n</code></pre> <ul> <li>Breakdown:<ul> <li><code>page=2</code> \u2192 Second page of results</li> <li><code>limit=10</code> \u2192 Limit each page to 10 results</li> <li><code>sort=desc</code> \u2192 Sort results in descending order</li> <li><code>status=active</code> \u2192 Return only active users</li> </ul> </li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#23-request-body","title":"2.3 Request Body","text":"<ul> <li>Definition \u2013 The main content payload sent with HTTP requests (mainly POST, PUT, PATCH) containing data for processing.</li> <li>Purpose \u2013 Used when sending:<ul> <li>Structured data (e.g., user profile details)</li> <li>Bulk data (e.g., file uploads)</li> <li>Sensitive data (avoiding URL exposure)</li> </ul> </li> <li>Formats \u2013 Commonly <code>application/json</code>, <code>application/xml</code>, <code>multipart/form-data</code> (file uploads), <code>application/x-www-form-urlencoded</code> (HTML form submissions).</li> <li>Visibility \u2013 Not visible in the URL; sent as the request payload.</li> <li>Structure \u2013 Can contain:         - Strings, numbers, booleans         - Arrays and nested objects</li> <li>Example (JSON):</li> </ul> <pre><code>POST /users\nContent-Type: application/json\n\n{\n\"name\": \"John Doe\",\n\"email\": \"john@example.com\",\n\"age\": 29,\n\"roles\": [\"admin\", \"editor\"],\n\"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"zip\": \"10001\"\n  }\n}\n</code></pre> <p>Breakdown:       - <code>\"name\"</code> and <code>\"email\"</code> \u2192 Basic user info       - <code>\"age\"</code> \u2192 Integer field       - <code>\"roles\"</code> \u2192 Array of role names       - <code>\"address\"</code> \u2192 Nested object for location details</p>"},{"location":"reactapi/14.1.Core%20Fundamentals/#key-differences","title":"Key Differences","text":"Parameter Type Location Common Use Cases Visible in URL? Query Parameters After <code>?</code> in URL Filtering, sorting, pagination \u2705 Yes Path Parameters Inside the URL path Resource identification \u2705 Yes Request Body HTTP request payload Sending structured or large data \u274c No"},{"location":"reactapi/14.1.Core%20Fundamentals/#3-api-types","title":"3. API Types","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#31-rest-apis-restful-apis","title":"3.1 REST APIs (RESTful Apis)","text":"<ul> <li>What is REST \u2013 Representational State Transfer is an architectural style that defines a set of constraints and principles for designing web services.</li> <li>Format \u2013 Primarily use JSON for data exchange, though XML and other formats are also possible.</li> <li>Structure \u2013 Built around standard HTTP methods (GET, POST, PUT, PATCH, DELETE) and clearly defined resource URLs.</li> <li>Resource Based \u2013 resources, which can be data or services available on the server have a unique identifier, URI(Uniform Resource Identifier)</li> <li>Statelessness \u2013 Each request is independent and contains all necessary information; the server does not store client session data between requests.</li> <li>Client-Server Architecture \u2013 Client and server operate independently, allowing each other to be developed and replaced independently.</li> <li>Scalability \u2013 REST APIs are widely used due to their simplicity and scalability in distributed systems.</li> <li>Common Usage \u2013 Suitable for most CRUD operations, integrations, and data-driven applications.</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#32-websockets","title":"3.2 WebSockets","text":"<ul> <li>Purpose \u2013 Enables full-duplex, real-time communication between client and server.</li> <li>How it Works \u2013 Establishes a persistent connection after an initial HTTP handshake, allowing both sides to send and receive messages at any time without re-establishing connections.</li> <li>Advantages \u2013 Low latency, efficient for continuous data exchange, reduces the overhead of repeated HTTP requests.</li> <li>Common Usage \u2013 Ideal for use cases that require instant updates, such as:</li> <li>Chat and messaging applications</li> <li>Live notifications or alerts</li> <li>Multiplayer online games</li> <li>Real-time analytics dashboards</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#4-fetch-api-vs-axios-for-http-requests","title":"4. Fetch API vs Axios for HTTP Requests","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#introduction-to-fetch-api","title":"\ud83d\udd39 Introduction to Fetch API","text":"<pre><code>useEffect(() =&gt; {\n  fetch('https://api.example.com/data')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error(error));\n}, []);\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#using-axios-for-api-requests","title":"\ud83d\udd39 Using Axios for API Requests","text":"<pre><code>npm install axios\n</code></pre> <pre><code>import axios from 'axios';\n\nuseEffect(() =&gt; {\n  axios.get('https://api.example.com/data')\n    .then(response =&gt; console.log(response.data))\n    .catch(error =&gt; console.error(error));\n}, []);\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#pros-and-cons-of-fetch-api-vs-axios","title":"\ud83d\udd39 Pros and Cons of Fetch API vs Axios","text":"Feature Fetch API Axios Default in browser \u2705 Yes \u274c No Interceptors \u274c No \u2705 Yes JSON auto transform \u274c No \u2705 Yes Error handling Manual Built-in"},{"location":"reactapi/14.1.Core%20Fundamentals/#setting-up-axios-interceptors","title":"\ud83d\udd39 Setting Up Axios Interceptors","text":"<pre><code>axios.interceptors.request.use(config =&gt; {\n  config.headers.Authorization = `Bearer token`;\n  return config;\n});\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#5-handling-promises-asyncawait","title":"5. Handling Promises &amp; Async/Await","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#using-promises-with-then","title":"\ud83d\udd39 Using Promises with <code>.then()</code>","text":"<pre><code>fetch(url)\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#writing-asynchronous-code-with-asyncawait","title":"\ud83d\udd39 Writing Asynchronous Code with <code>async/await</code>","text":"<pre><code>const fetchData = async () =&gt; {\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n};\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#error-handling-in-async-functions","title":"\ud83d\udd39 Error Handling in Async Functions","text":"<pre><code>try {\n  // code\n} catch (error) {\n  console.error('API error:', error);\n}\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#best-practices","title":"\ud83d\udd39 Best Practices","text":"<ul> <li>Always handle errors</li> <li>Use <code>try/catch</code> inside async functions</li> <li>Keep async logic out of render</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#6-useeffect-with-api-calls","title":"6. useEffect with API Calls","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#fetching-data-inside-useeffect","title":"\ud83d\udd39 Fetching Data Inside <code>useEffect</code>","text":"<pre><code>useEffect(() =&gt; {\n  async function loadData() {\n    const res = await fetch(url);\n    const data = await res.json();\n    setData(data);\n  }\n  loadData();\n}, []);\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#dependency-array-and-performance","title":"\ud83d\udd39 Dependency Array and Performance","text":"<ul> <li>Use dependencies wisely to avoid infinite loops</li> <li>Avoid unnecessary re-renders</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#cleanup-functions","title":"\ud83d\udd39 Cleanup Functions","text":"<pre><code>useEffect(() =&gt; {\n  const controller = new AbortController();\n  fetch(url, { signal: controller.signal });\n  return () =&gt; controller.abort();\n}, []);\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#preventing-memory-leaks","title":"\ud83d\udd39 Preventing Memory Leaks","text":"<ul> <li>Use <code>AbortController</code></li> <li>Track component mounted state with <code>let isMounted = true</code></li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#7-handling-api-errors-and-loading-states","title":"7. Handling API Errors and Loading States","text":""},{"location":"reactapi/14.1.Core%20Fundamentals/#error-handling-best-practices","title":"\ud83d\udd39 Error Handling Best Practices","text":"<ul> <li>Graceful fallbacks</li> <li>Display user-friendly messages</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#showing-loading-spinners","title":"\ud83d\udd39 Showing Loading Spinners","text":"<pre><code>{loading ? &lt;Spinner /&gt; : &lt;DataView data={data} /&gt;}\n</code></pre>"},{"location":"reactapi/14.1.Core%20Fundamentals/#retry-logic","title":"\ud83d\udd39 Retry Logic","text":"<ul> <li>Use exponential backoff strategy</li> <li>Retry with a maximum count</li> </ul>"},{"location":"reactapi/14.1.Core%20Fundamentals/#handling-rate-limits","title":"\ud83d\udd39 Handling Rate Limits","text":"<ul> <li>Respect API rate limits</li> <li>Use headers like <code>Retry-After</code></li> </ul>"},{"location":"reactapi/14.2.0.Axios/","title":"14.2.0.Axios","text":""},{"location":"reactapi/14.2.0.Axios/#intoduction-to-axios","title":"Intoduction to  Axios","text":""},{"location":"reactapi/14.2.0.Axios/#introduction-to-axios","title":"Introduction to Axios","text":""},{"location":"reactapi/14.2.0.Axios/#what-is-axios","title":"What is Axios?","text":"<p>Axios is a promise-based HTTP client for the browser and Node.js. It allows you to send asynchronous HTTP requests to REST endpoints and perform CRUD operations (Create, Read, Update, Delete) easily.</p> <ul> <li>Works in both frontend (browser) and backend (Node.js) environments.</li> <li>Supports modern JavaScript features like <code>async/await</code>.</li> <li>Handles JSON data automatically.</li> </ul> <p>Example:</p> <pre><code>import axios from \"axios\";\n\naxios.get(\"https://api.example.com/data\")\n  .then(response =&gt; console.log(response.data))\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Supports GET, POST, PUT, PATCH, DELETE requests.</li> <li>\u2705 Promise-based and works with async/await.</li> <li>\u2705 Automatic JSON data transformation.</li> <li>\u2705 Request &amp; response interceptors.</li> <li>\u2705 Cancels requests to prevent race conditions.</li> <li>\u2705 Supports file upload &amp; download.</li> <li>\u2705 Works in Node.js and browsers.</li> <li>\u2705 Allows custom headers &amp; default configurations.</li> </ul>"},{"location":"reactapi/14.2.0.Axios/#axios-vs-fetch-api","title":"Axios vs Fetch API","text":"Feature Axios Fetch API Syntax Short &amp; simple More verbose, manual steps required Browser Support Supports older browsers (with polyfill) Modern browsers only JSON Handling Automatically parses JSON Must call <code>.json()</code> manually Error Handling Rejects for HTTP errors (status \u2265 400) Only rejects on network failure Timeouts Built-in timeout option Requires <code>AbortController</code> implementation Interceptors Yes (request &amp; response) No (must be implemented manually) Upload/Download Easy file handling More boilerplate required Node.js Support Works out of the box Needs <code>node-fetch</code> or similar package"},{"location":"reactapi/14.2.0.Axios/#when-to-use-axios","title":"When to Use Axios","text":"<ul> <li>You should prefer Axios over Fetch when:</li> <li>You need automatic JSON parsing and simpler syntax.</li> <li>You want built-in error handling for HTTP errors (status \u2265 400).</li> <li>You require interceptors for logging, auth tokens, or request modifications.</li> <li>You\u2019re making repeated requests to the same API and want a custom instance with defaults.</li> <li>You want request cancellation to avoid duplicate or outdated requests.</li> <li>You need Node.js compatibility without extra polyfills.</li> </ul>"},{"location":"reactapi/14.2.0.Axios/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"reactapi/14.2.0.Axios/#installation-via-npm","title":"Installation via npm","text":"<pre><code>npm install axios\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#cdn-usage","title":"CDN Usage","text":"<p>If you don\u2019t want to install via npm/yarn, you can use Axios directly in the browser via a CDN link</p> <pre><code>&lt;!-- jsDelivr CDN --&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"&gt;&lt;/script&gt;\n\n&lt;!-- or unpkg CDN --&gt;\n&lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\"&gt;&lt;/script&gt;\n\n&lt;script&gt;\n  axios.get(\"https://api.example.com/data\")\n    .then(response =&gt; console.log(response.data))\n    .catch(error =&gt; console.error(error));\n&lt;/script&gt;\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#basic-usage","title":"Basic Usage","text":""},{"location":"reactapi/14.2.0.Axios/#in-javascript","title":"In JavaScript","text":"<pre><code>// Example of making a GET request\n// Used to retrieve data from a server.\nimport axios from \"axios\";\n\naxios.get(\"https://api.example.com/posts\")\n  .then(response =&gt; {console.log(response.data)})\n  .catch(error =&gt; {console.error(error)});\n</code></pre> <pre><code>// Example of making a POST request\n// Used to send data to the server, often for creating new resources.\nimport axios from \"axios\";\n\naxios.post(\"https://api.example.com/posts\", {\n  title: \"New Post\",\n  body: \"This is the content of the post\",\n  userId: 1\n})\n  .then(response =&gt; {console.log(response.data)})\n  .catch(error =&gt; {console.error(error)});\n</code></pre> <pre><code>// PUT Request\n// Used to update an existing resource by replacing it completely.\nimport axios from \"axios\";\n\naxios.put(\"https://api.example.com/posts/1\", {\n  id: 1,\n  title: \"Updated Post\",\n  body: \"Updated content\",\n  userId: 1\n})\n  .then(response =&gt; {console.log(response.data)})\n  .catch(error =&gt; {console.error(error)});\n</code></pre> <pre><code>// PATCH Request\n// Used to partially update an existing resource.\nimport axios from \"axios\";\n\naxios.patch(\"https://api.example.com/posts/1\", {\n  title: \"Partially Updated Post\"\n})\n  .then(response =&gt; {console.log(response.data)})\n  .catch(error =&gt; {console.error(error)});\n</code></pre> <pre><code>// DELETE Request\n// Used to remove a resource.\nimport axios from \"axios\";\n\naxios.delete(\"https://api.example.com/posts/1\")\n  .then(response =&gt; {console.log(\"Deleted:\", response.status}))\n  .catch(error =&gt; {console.error(error)});\n</code></pre> <pre><code>// Sending Query Parameters\n// Axios provides two ways to send query parameters:\n\n// Inline in the URL\naxios.get(\"https://api.example.com/posts?userId=1&amp;limit=5\")\n  .then(response =&gt; console.log(response.data))\n  .catch(error =&gt; console.error(error));\n\n// OR\n\n// Using params option\naxios.get(\"https://api.example.com/posts\", {\n  params: {\n    userId: 1,\n    limit: 5\n  }\n})\n  .then(response =&gt; console.log(response.data))\n  .catch(error =&gt; console.error(error));\n</code></pre> <pre><code>// All Axios methods return a Promise, so you can also use async/await:\nasync function getPosts() {\n  try {\n    const response = await axios.get(\"https://api.example.com/posts\");\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetPosts();\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#in-typescript","title":"In TypeScript","text":"<ul> <li>TypeScript allows you to define the expected shape of the response data for type safety.</li> </ul> <pre><code>import axios, { AxiosResponse } from \"axios\";\n\n// Define API response types\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n  userId: number;\n}\ninterface NewPost {\n  title: string;\n  body: string;\n  userId: number;\n}\ntype PostsResponse = Post[];\ntype SinglePostResponse = Post;\n\n\n// Example of making a GET request\n// Used to retrieve data from a server.\nasync function getPosts(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;PostsResponse&gt; = await axios.get(\"https://api.example.com/posts\");\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\ngetPosts();\n\n\n// Example of making a POST request\n// Used to send data to the server, often for creating new resources.\nasync function createPost(): Promise&lt;void&gt; {\n  try {\n    const newPost: NewPost = {\n      title: \"New Post\",\n      body: \"This is the content of the post\",\n      userId: 1\n    };\n    const response: AxiosResponse&lt;SinglePostResponse&gt; = await axios.post(\"https://api.example.com/posts\", newPost);\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\ncreatePost();\n\n\n// PUT Request\n// Used to update an existing resource by replacing it completely.\nasync function updatePost(): Promise&lt;void&gt; {\n  try {\n    const updatedPost: Post = {\n      id: 1,\n      title: \"Updated Post\",\n      body: \"Updated content\",\n      userId: 1\n    };\n    const response: AxiosResponse&lt;SinglePostResponse&gt; = await axios.put(\"https://api.example.com/posts/1\", updatedPost);\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\nupdatePost();\n\n\n// PATCH Request\n// Used to partially update an existing resource.\nasync function patchPost(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;SinglePostResponse&gt; = await axios.patch(\"https://api.example.com/posts/1\", {\n      title: \"Partially Updated Post\"\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\npatchPost();\n\n\n// DELETE Request\n// Used to remove a resource.\nasync function deletePost(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;void&gt; = await axios.delete(\"https://api.example.com/posts/1\");\n    console.log(\"Deleted:\", response.status);\n  } catch (error) {\n    console.error(error);\n  }\n}\ndeletePost();\n\n\n// Sending Query Parameters\n// Inline in the URL\nasync function getPostsWithQuery1(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;PostsResponse&gt; = await axios.get(\"https://api.example.com/posts?userId=1&amp;limit=5\");\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\n// Using params option\nasync function getPostsWithQuery2(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;PostsResponse&gt; = await axios.get(\"https://api.example.com/posts\", {\n      params: {\n        userId: 1,\n        limit: 5\n      }\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetPostsWithQuery1();\ngetPostsWithQuery2();\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#request-configuration","title":"Request Configuration","text":"<pre><code>import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\n\n// Define API response type\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n  userId: number;\n}\n\n/* ---------------------------\n   1. Axios Config Object\n--------------------------- */\n// The Axios config object allows you to set method, URL, headers, params, timeout, etc.\nasync function getPostsWithConfig(): Promise&lt;void&gt; {\n  const config: AxiosRequestConfig = {\n    method: \"GET\",\n    url: \"https://api.example.com/posts\",\n    params: { userId: 1 },\n    headers: { \"Accept\": \"application/json\" }\n  };\n\n  try {\n    const response: AxiosResponse&lt;Post[]&gt; = await axios(config);\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetPostsWithConfig();\n\n/* ---------------------------\n   2. Base URLs\n--------------------------- */\n// Instead of writing full URLs, set a baseURL for all requests\nconst api = axios.create({\n  baseURL: \"https://api.example.com\",\n});\n\nasync function getPostsFromBaseURL(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;Post[]&gt; = await api.get(\"/posts\");\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetPostsFromBaseURL();\n\n/* ---------------------------\n   3. Headers\n--------------------------- */\n// You can set custom headers for authentication or other requirements\nasync function getPostsWithHeaders(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;Post[]&gt; = await axios.get(\"https://api.example.com/posts\", {\n      headers: {\n        Authorization: \"Bearer YOUR_TOKEN_HERE\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetPostsWithHeaders();\n\n/* ---------------------------\n   4. Timeouts\n--------------------------- */\n// Set a timeout in milliseconds; request will fail if it takes longer\nasync function getPostsWithTimeout(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;Post[]&gt; = await axios.get(\"https://api.example.com/posts\", {\n      timeout: 3000 // 3 seconds\n    });\n    console.log(response.data);\n  } catch (error) {\n    console.error(\"Request timed out or failed:\", error);\n  }\n}\n\ngetPostsWithTimeout();\n\n/* ---------------------------\n   5. Transforming Requests &amp; Responses\n--------------------------- */\n// Transform request before sending and transform response before handling\nasync function getPostsWithTransforms(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;Post[]&gt; = await axios.get(\"https://api.example.com/posts\", {\n      transformRequest: [(data, headers) =&gt; {\n        console.log(\"Original Headers:\", headers);\n        return data; // Can modify data before sending\n      }],\n      transformResponse: [(data) =&gt; {\n        const parsedData: Post[] = JSON.parse(data);\n        return parsedData.map(post =&gt; ({\n          ...post,\n          title: post.title.toUpperCase() // Transform titles to uppercase\n        }));\n      }]\n    });\n    console.log(\"Transformed Data:\", response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetPostsWithTransforms();\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#response-handling","title":"Response Handling","text":"<pre><code>import axios, { AxiosResponse, AxiosError } from \"axios\";\n\n// Define API response type\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n  userId: number;\n}\n\n/* ---------------------------\n   1. Response Structure\n--------------------------- */\n// Every Axios response contains these main properties:\n// - data: The response body (already parsed if JSON)\n// - status: HTTP status code (e.g., 200, 404)\n// - statusText: HTTP status message (e.g., \"OK\")\n// - headers: Response headers object\n// - config: The request configuration used\n// - request: The actual request object\n\nasync function getPostById(id: number): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;Post&gt; = await axios.get(`https://api.example.com/posts/${id}`);\n    console.log(\"Data:\", response.data);       // Parsed response body\n    console.log(\"Status:\", response.status);   // e.g., 200\n    console.log(\"Headers:\", response.headers); // e.g., content-type\n    console.log(\"Config:\", response.config);   // Original request config\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetPostById(1);\n\n/* ---------------------------\n   2. Handling JSON Data\n--------------------------- */\n// Axios automatically parses JSON responses, so no need for response.json() like Fetch API\nasync function getAllPosts(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;Post[]&gt; = await axios.get(\"https://api.example.com/posts\");\n    // Directly work with parsed JSON\n    response.data.forEach(post =&gt; {\n      console.log(`${post.id}: ${post.title}`);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetAllPosts();\n\n/* ---------------------------\n   3. Error Handling\n--------------------------- */\n// Use try...catch with axios.isAxiosError() to safely identify Axios errors\nasync function getInvalidPost(): Promise&lt;void&gt; {\n  try {\n    const response: AxiosResponse&lt;Post&gt; = await axios.get(\"https://api.example.com/posts/9999\");\n    console.log(response.data);\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error(\"Axios error message:\", error.message);\n      if (error.response) {\n        // Server responded with a status code outside 2xx range\n        console.error(\"Status:\", error.response.status);\n        console.error(\"Data:\", error.response.data);\n      } else if (error.request) {\n        // Request was made but no response received\n        console.error(\"No response received:\", error.request);\n      } else {\n        // Something else caused the error\n        console.error(\"Error setting up request:\", error.message);\n      }\n    } else {\n      // Non-Axios error (unexpected)\n      console.error(\"Unexpected error:\", error);\n    }\n  }\n}\n\ngetInvalidPost();\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#advanced-axios-features","title":"Advanced Axios Features","text":"<pre><code>import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError, CancelTokenSource } from \"axios\";\n\n/* ---------------------------\n   1. Creating Axios Instances\n--------------------------- */\n// Instead of using axios.get/post directly, create an instance with shared settings\nconst apiClient: AxiosInstance = axios.create({\n  baseURL: \"https://api.example.com\",\n  timeout: 5000,\n  headers: { \"Content-Type\": \"application/json\" }\n});\n\nasync function fetchPosts() {\n  const response: AxiosResponse = await apiClient.get(\"/posts\");\n  console.log(\"Posts:\", response.data);\n}\n\n/* ---------------------------\n   2. Default Configurations\n--------------------------- */\n// Set defaults globally (affects all requests)\naxios.defaults.baseURL = \"https://api.example.com\";\naxios.defaults.timeout = 5000;\naxios.defaults.headers.common[\"Authorization\"] = \"Bearer your-token\";\n\n/* ---------------------------\n   3. Interceptors (Request &amp; Response)\n--------------------------- */\n// Request Interceptor: modify requests before they are sent\napiClient.interceptors.request.use(\n  (config: AxiosRequestConfig) =&gt; {\n    console.log(\"Request sent at:\", new Date().toISOString());\n    // Example: Add auth token\n    config.headers = { ...config.headers, Authorization: \"Bearer token-123\" };\n    return config;\n  },\n  (error: AxiosError) =&gt; Promise.reject(error)\n);\n\n// Response Interceptor: modify responses before they reach `.then()` or `await`\napiClient.interceptors.response.use(\n  (response: AxiosResponse) =&gt; {\n    console.log(\"Response received:\", response.status);\n    return response;\n  },\n  (error: AxiosError) =&gt; {\n    console.error(\"Global Axios Error:\", error.message);\n    return Promise.reject(error);\n  }\n);\n\n/* ---------------------------\n   4. Canceling Requests\n--------------------------- */\n// Option A: Using CancelToken (deprecated in favor of AbortController but still widely used)\nconst source: CancelTokenSource = axios.CancelToken.source();\n\nasync function getDataWithCancel() {\n  try {\n    const request = apiClient.get(\"/posts\", { cancelToken: source.token });\n    // Cancel request after 100ms\n    setTimeout(() =&gt; {\n      source.cancel(\"Request canceled by user\");\n    }, 100);\n    const response = await request;\n    console.log(response.data);\n  } catch (error) {\n    if (axios.isAxiosError(error) &amp;&amp; axios.isCancel(error)) {\n      console.warn(\"Request canceled:\", error.message);\n    }\n  }\n}\n\n// Option B: Using AbortController (modern approach)\nasync function getDataWithAbort() {\n  const controller = new AbortController();\n  try {\n    const request = apiClient.get(\"/posts\", { signal: controller.signal });\n    // Cancel after 100ms\n    setTimeout(() =&gt; controller.abort(), 100);\n    const response = await request;\n    console.log(response.data);\n  } catch (error) {\n    if ((error as Error).name === \"CanceledError\") {\n      console.warn(\"Request aborted\");\n    }\n  }\n}\n\n/* ---------------------------\n   5. Uploading Files\n--------------------------- */\nasync function uploadFile(file: File) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await apiClient.post(\"/upload\", formData, {\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n    onUploadProgress: (progressEvent: ProgressEvent) =&gt; {\n      const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));\n      console.log(`Upload progress: ${percentCompleted}%`);\n    }\n  });\n  console.log(\"Upload complete:\", response.data);\n}\n\n/* ---------------------------\n   6. Downloading Files\n--------------------------- */\nasync function downloadFile() {\n  const response = await apiClient.get(\"/file.zip\", { responseType: \"blob\" });\n  const url = URL.createObjectURL(response.data);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = \"file.zip\";\n  document.body.appendChild(link);\n  link.click();\n  link.remove();\n  URL.revokeObjectURL(url);\n}\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#working-with-asyncawait","title":"Working with Async/Await","text":"<pre><code>import axios, { AxiosResponse } from \"axios\";\n\n/* ---------------------------\n   1. Axios with Promises\n--------------------------- */\n// Basic usage with `.then()` and `.catch()`\naxios.get(\"https://jsonplaceholder.typicode.com/posts/1\")\n  .then((response: AxiosResponse) =&gt; {\n    console.log(\"Promise Example (then):\", response.data);\n  })\n  .catch((error) =&gt; {\n    console.error(\"Promise Example (catch):\", error.message);\n  });\n\n/* ---------------------------\n   2. Axios with Async/Await\n--------------------------- */\n// Cleaner syntax, easier to read for multiple calls\nasync function getPostAsync() {\n  try {\n    const response: AxiosResponse = await axios.get(\"https://jsonplaceholder.typicode.com/posts/1\");\n    console.log(\"Async/Await Example:\", response.data);\n  } catch (error) {\n    console.error(\"Async/Await Error:\", (error as Error).message);\n  }\n}\ngetPostAsync();\n\n/* ---------------------------\n   3. Parallel Requests\n--------------------------- */\n// Option A: axios.all() (specific to Axios)\nasync function getParallelData_AxiosAll() {\n  try {\n    const [posts, users] = await axios.all([\n      axios.get(\"https://jsonplaceholder.typicode.com/posts\"),\n      axios.get(\"https://jsonplaceholder.typicode.com/users\")\n    ]);\n    console.log(\"Posts:\", posts.data.length);\n    console.log(\"Users:\", users.data.length);\n  } catch (error) {\n    console.error(\"Parallel Requests Error:\", (error as Error).message);\n  }\n}\ngetParallelData_AxiosAll();\n\n// Option B: Promise.all() (JavaScript-native)\nasync function getParallelData_PromiseAll() {\n  try {\n    const [posts, users] = await Promise.all([\n      axios.get(\"https://jsonplaceholder.typicode.com/posts\"),\n      axios.get(\"https://jsonplaceholder.typicode.com/users\")\n    ]);\n    console.log(\"Posts:\", posts.data.length);\n    console.log(\"Users:\", users.data.length);\n  } catch (error) {\n    console.error(\"Parallel Requests Error:\", (error as Error).message);\n  }\n}\ngetParallelData_PromiseAll();\n\n/* ---------------------------\n   Notes:\n---------------------------\n- Use `.then()` when you prefer chainable syntax or don't need async/await.\n- Async/Await improves readability for multiple sequential calls.\n- `axios.all()` is a helper for `Promise.all()`; both achieve the same goal.\n- Prefer `Promise.all()` for flexibility, since it's native to JavaScript.\n*/\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#security-best-practices","title":"Security &amp; Best Practices","text":"<pre><code>/* ---------------------------\n   1. Preventing XSS (Cross-Site Scripting)\n--------------------------- */\n// - Never directly inject API responses into the DOM without sanitization.\n// - Use libraries like DOMPurify for HTML sanitization.\n// Example:\nimport DOMPurify from \"dompurify\";\n\nasync function fetchAndDisplayContent() {\n  const response = await axios.get(\"https://example.com/content\");\n  const safeHTML = DOMPurify.sanitize(response.data.content);\n  document.getElementById(\"output\")!.innerHTML = safeHTML; // Safe rendering\n}\n\n/* ---------------------------\n   2. Preventing CSRF (Cross-Site Request Forgery)\n--------------------------- */\n// - Use CSRF tokens provided by the backend.\n// - Send tokens as a header with each request.\naxios.defaults.headers.common[\"X-CSRF-Token\"] = getCSRFTokenFromMeta();\n\nfunction getCSRFTokenFromMeta(): string {\n  return document.querySelector&lt;HTMLMetaElement&gt;(\"meta[name='csrf-token']\")?.content || \"\";\n}\n\n/* ---------------------------\n   3. Securing API Keys\n--------------------------- */\n// \u274c DON'T expose API keys in frontend code.\n// \u2705 Use environment variables &amp; server-side proxies.\n// Example (client calls backend instead of API directly):\n// Frontend:\nawait axios.get(\"/api/weather\"); // Hits your server\n\n// Backend (Node.js):\napp.get(\"/api/weather\", async (req, res) =&gt; {\n  const weather = await axios.get(`https://weatherapi.com/data?key=${process.env.WEATHER_KEY}`);\n  res.json(weather.data);\n});\n\n/* ---------------------------\n   4. Error &amp; Retry Strategies\n--------------------------- */\n// - Handle errors gracefully.\n// - Use retry logic for transient failures.\nimport axiosRetry from \"axios-retry\";\n\naxiosRetry(axios, { retries: 3, retryDelay: axiosRetry.exponentialDelay });\n\nasync function fetchDataWithRetry() {\n  try {\n    const response = await axios.get(\"https://unstable-api.com/data\");\n    console.log(\"Data:\", response.data);\n  } catch (error) {\n    console.error(\"Request failed after retries:\", (error as Error).message);\n  }\n}\n\n/* ---------------------------\n   5. Rate Limiting\n--------------------------- */\n// - Prevent overwhelming the API with too many requests.\n// - Use throttling or debouncing on frequent calls.\nimport pThrottle from \"p-throttle\";\n\nconst throttledGet = pThrottle({ limit: 2, interval: 1000 })(axios.get);\n\nasync function makeLimitedRequests() {\n  await throttledGet(\"https://api.example.com/data1\");\n  await throttledGet(\"https://api.example.com/data2\");\n}\n\n/* ---------------------------\n   Notes:\n---------------------------\n- Always sanitize user-facing content to prevent XSS.\n- Always use CSRF tokens if backend supports them.\n- Keep sensitive keys on the server only.\n- Implement retries with exponential backoff for reliability.\n- Throttle requests to avoid hitting API rate limits.\n*/\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#axios-in-different-environments","title":"Axios in Different Environments","text":"<pre><code>/* ---------------------------\n   1. Axios in React\n--------------------------- */\n// - Commonly used for data fetching inside useEffect.\n// - Handle cleanup to prevent memory leaks.\n// Example:\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction UserList() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    let isMounted = true;\n\n    axios.get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) =&gt; {\n        if (isMounted) {\n          setUsers(response.data);\n          setLoading(false);\n        }\n      })\n      .catch((error) =&gt; console.error(\"Error:\", error));\n\n    return () =&gt; {\n      isMounted = false; // Cleanup flag\n    };\n  }, []);\n\n  return loading ? &lt;p&gt;Loading...&lt;/p&gt; : &lt;ul&gt;{users.map(u =&gt; &lt;li key={u.id}&gt;{u.name}&lt;/li&gt;)}&lt;/ul&gt;;\n}\n\n/* ---------------------------\n   2. Axios in Next.js\n--------------------------- */\n// - Can be used in getServerSideProps (SSR), getStaticProps (SSG), or API routes.\n// - On server side, no CORS issues since requests are server-to-server.\n\n// Example: Fetching in getServerSideProps\nimport { GetServerSideProps } from \"next\";\n\nexport const getServerSideProps: GetServerSideProps = async () =&gt; {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n  return { props: { posts: response.data } };\n};\n\nfunction Blog({ posts }: { posts: any[] }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Blog Posts&lt;/h1&gt;\n      {posts.map((post) =&gt; (\n        &lt;article key={post.id}&gt;\n          &lt;h2&gt;{post.title}&lt;/h2&gt;\n          &lt;p&gt;{post.body}&lt;/p&gt;\n        &lt;/article&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default Blog;\n\n// Example: Using Axios in API Routes (Next.js server)\nimport type { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const response = await axios.get(\"https://api.github.com/users/octocat\");\n  res.status(200).json(response.data);\n}\n\n/* ---------------------------\n   Notes:\n---------------------------\n- In React, handle component unmount to avoid memory leaks.\n- In Next.js, prefer server-side fetching to hide API keys and avoid CORS.\n- For reusability, create a centralized Axios instance for your app.\n*/\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#testing-axios-calls","title":"Testing Axios Calls","text":"<pre><code>/* ---------------------------\n   1. Mocking with Jest\n--------------------------- */\n// - Jest can mock axios to simulate API responses without hitting real endpoints.\n// - Useful for unit testing React components or utility functions.\n\nimport axios from \"axios\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport UserList from \"./UserList\"; // Example component\njest.mock(\"axios\");\n\ntest(\"renders users from API\", async () =&gt; {\n  (axios.get as jest.Mock).mockResolvedValue({\n    data: [{ id: 1, name: \"John Doe\" }],\n  });\n\n  render(&lt;UserList /&gt;);\n\n  await waitFor(() =&gt; {\n    expect(screen.getByText(\"John Doe\")).toBeInTheDocument();\n  });\n});\n\n/* ---------------------------\n   2. Mocking with MSW (Mock Service Worker)\n--------------------------- */\n// - MSW intercepts requests on network level (works in browser &amp; Node).\n// - More realistic than jest.mock because it keeps Axios logic intact.\n\nimport { rest } from \"msw\";\nimport { setupServer } from \"msw/node\";\nimport axios from \"axios\";\n\nconst server = setupServer(\n  rest.get(\"https://jsonplaceholder.typicode.com/users\", (req, res, ctx) =&gt; {\n    return res(ctx.status(200), ctx.json([{ id: 1, name: \"Jane Doe\" }]));\n  })\n);\n\nbeforeAll(() =&gt; server.listen());\nafterEach(() =&gt; server.resetHandlers());\nafterAll(() =&gt; server.close());\n\ntest(\"fetches mocked users with MSW\", async () =&gt; {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n  expect(response.data[0].name).toBe(\"Jane Doe\");\n});\n\n/* ---------------------------\n   3. Integration Testing\n--------------------------- */\n// - Ensures Axios calls integrate correctly with UI and backend.\n// - Often uses tools like Cypress or Playwright.\n\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"displays API data in UI\", async ({ page }) =&gt; {\n  await page.goto(\"http://localhost:3000/users\");\n\n  // Assuming UI fetches data from API\n  await expect(page.locator(\"text=John Doe\")).toBeVisible();\n});\n\n/* ---------------------------\n   Notes:\n---------------------------\n- For unit tests, jest.mock is faster but less realistic.\n- For realistic network behavior, prefer MSW.\n- For end-to-end flows, use integration tools like Cypress/Playwright.\n*/\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#performance-optimization","title":"Performance Optimization","text":"<pre><code>/* ---------------------------\n   1. Request Deduplication\n--------------------------- */\n// - Prevents sending the same request multiple times before a response arrives.\n// - Can be implemented using a custom request map or libraries like `axios-cache-adapter`.\n\nimport axios from \"axios\";\n\nconst pendingRequests = new Map();\n\nfunction getRequestKey(config: any) {\n  return `${config.method}:${config.url}:${JSON.stringify(config.params || {})}:${JSON.stringify(config.data || {})}`;\n}\n\naxios.interceptors.request.use((config) =&gt; {\n  const requestKey = getRequestKey(config);\n  if (pendingRequests.has(requestKey)) {\n    return Promise.reject({ message: \"Duplicate request canceled\" });\n  }\n  pendingRequests.set(requestKey, true);\n  return config;\n});\n\naxios.interceptors.response.use(\n  (response) =&gt; {\n    const requestKey = getRequestKey(response.config);\n    pendingRequests.delete(requestKey);\n    return response;\n  },\n  (error) =&gt; {\n    if (error.config) {\n      const requestKey = getRequestKey(error.config);\n      pendingRequests.delete(requestKey);\n    }\n    return Promise.reject(error);\n  }\n);\n\n/* ---------------------------\n   2. Caching Responses\n--------------------------- */\n// - Cache GET responses to avoid redundant network calls.\n// - Example: Using axios-cache-adapter\n\nimport { setup } from \"axios-cache-adapter\";\n\nconst api = setup({\n  cache: {\n    maxAge: 15 * 60 * 1000 // 15 minutes\n  }\n});\n\nasync function fetchData() {\n  const res = await api.get(\"https://jsonplaceholder.typicode.com/posts\");\n  console.log(res.data);\n}\n\n/* ---------------------------\n   3. Optimizing Payloads\n--------------------------- */\n// - Send only necessary fields to reduce payload size.\n// - Use compression where applicable (e.g., gzip, brotli).\n\nasync function createUser(user: { name: string; email: string; password: string; extraData?: any }) {\n  // Remove large unused data before sending\n  const { name, email, password } = user;\n  return axios.post(\"/users\", { name, email, password });\n}\n\n// Server side: enable gzip/brotli compression (e.g., using Express compression middleware)\n\nimport compression from \"compression\";\nimport express from \"express\";\nconst app = express();\napp.use(compression());\n\napp.listen(3000, () =&gt; console.log(\"Server running with compression\"));\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#troubleshooting","title":"Troubleshooting","text":"<pre><code>/* ---------------------------\n   1. Common Errors &amp; Fixes\n--------------------------- */\n// Error: \"Network Error\" \u2192 Usually CORS issue, DNS failure, or server is down.\n// Error: \"Request failed with status code 404\" \u2192 Wrong endpoint.\n// Error: \"Request failed with status code 500\" \u2192 Server error (check API logs).\n\nimport axios from \"axios\";\n\nasync function fetchData() {\n  try {\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n    console.log(res.data);\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error(\"Axios Error:\", error.message);\n      if (error.response) {\n        console.error(\"Status:\", error.response.status);\n        console.error(\"Data:\", error.response.data);\n      } else if (error.request) {\n        console.error(\"No response received. Possible network error.\");\n      }\n    } else {\n      console.error(\"Unexpected Error:\", error);\n    }\n  }\n}\n\n/* ---------------------------\n   2. Debugging Requests\n--------------------------- */\n// Enable request/response logging for debugging.\n\naxios.interceptors.request.use((config) =&gt; {\n  console.log(`[Request] ${config.method?.toUpperCase()} \u2192 ${config.url}`, config);\n  return config;\n});\n\naxios.interceptors.response.use(\n  (response) =&gt; {\n    console.log(`[Response] ${response.status} from ${response.config.url}`, response.data);\n    return response;\n  },\n  (error) =&gt; {\n    console.error(\"[Error Response]\", error);\n    return Promise.reject(error);\n  }\n);\n\n/* ---------------------------\n   3. Handling Network Failures\n--------------------------- */\n// Retry failed requests (e.g., using axios-retry library)\n\nimport axiosRetry from \"axios-retry\";\n\naxiosRetry(axios, {\n  retries: 3,\n  retryDelay: (retryCount) =&gt; retryCount * 1000, // 1s, 2s, 3s\n  retryCondition: (error) =&gt; axiosRetry.isNetworkOrIdempotentRequestError(error)\n});\n\n// Example usage:\naxios.get(\"https://example.com/api\").then(console.log).catch(console.error);\n</code></pre>"},{"location":"reactapi/14.2.0.Axios/#useful-patterns-real-world-examples","title":"Useful Patterns &amp; Real-world Examples","text":"<pre><code>/* ---------------------------\n   1. REST API Integration\n--------------------------- */\nimport axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n});\n\nasync function getPosts() {\n  const { data } = await api.get(\"/posts\");\n  console.log(data);\n}\n\nasync function createPost(post) {\n  const { data } = await api.post(\"/posts\", post);\n  console.log(data);\n}\n\n/* ---------------------------\n   2. Authentication with JWT &amp; Cookies\n--------------------------- */\nconst authApi = axios.create({\n  baseURL: \"https://api.example.com\",\n  withCredentials: true, // send cookies\n});\n\nauthApi.interceptors.request.use((config) =&gt; {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nasync function login(credentials) {\n  const { data } = await authApi.post(\"/auth/login\", credentials);\n  localStorage.setItem(\"token\", data.token);\n}\n\n/* ---------------------------\n   3. Pagination\n--------------------------- */\nasync function getPaginatedPosts(page = 1, limit = 10) {\n  const { data } = await api.get(\"/posts\", {\n    params: { _page: page, _limit: limit },\n  });\n  console.log(`Page ${page}:`, data);\n}\n\n/* ---------------------------\n   4. Infinite Scrolling\n--------------------------- */\nlet currentPage = 1;\nlet isLoading = false;\n\nasync function loadMorePosts() {\n  if (isLoading) return;\n  isLoading = true;\n  try {\n    const { data } = await getPaginatedPosts(currentPage);\n    renderPosts(data);\n    currentPage++;\n  } finally {\n    isLoading = false;\n  }\n}\n\nfunction renderPosts(posts) {\n  posts.forEach((post) =&gt; {\n    const el = document.createElement(\"div\");\n    el.textContent = post.title;\n    document.body.appendChild(el);\n  });\n}\n\n// Attach to scroll event\nwindow.addEventListener(\"scroll\", () =&gt; {\n  if (window.innerHeight + window.scrollY &gt;= document.body.offsetHeight - 50) {\n    loadMorePosts();\n  }\n});\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/","title":"14.2.1.Axios Industry Standards","text":""},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#axios-industry-standards","title":"Axios Industry Standards","text":""},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#setup-axioscreate-with-baseurl","title":"Setup \u2014 axios.create with baseURL","text":"<pre><code>// api.js\nimport axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.example.com\", // Replace with your API base URL\n  timeout: 10000, // optional timeout\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#get-methods-without-params","title":"GET Methods \u2014 Without Params","text":"<ul> <li>Use when fetching entire collections without filtering or dynamic params.</li> </ul> <pre><code>// services/dataService.js\nimport api from \"./api\";\n\n// 1. Simple GET \u2014 All users\nexport const getUsers = async () =&gt; {\n  try {\n    const res = await api.get(\"/users\");\n    return res.data;\n  } catch (err) {\n    console.error(\"Error fetching users:\", err.message);\n    throw err;\n  }\n};\n\n// 2. All posts\nexport const getPosts = async () =&gt; {\n  try {\n    const { data } = await api.get(\"/posts\");\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    throw error;\n  }\n};\n\n// 3. All products (inline return)\nexport const getProducts = async () =&gt; {\n  try {\n    return (await api.get(\"/products\")).data;\n  } catch (e) {\n    throw new Error(`Products fetch failed: ${e.message}`);\n  }\n};\n\n// 4. All orders\nexport const getOrders = async () =&gt; {\n  try {\n    const res = await api.get(\"/orders\");\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n\n// 5. Generic fetch \u2014 pass endpoint string\nexport const getAll = async (endpoint) =&gt; {\n  try {\n    const res = await api.get(`/${endpoint}`);\n    return res.data;\n  } catch (err) {\n    console.error(`Error fetching ${endpoint}:`, err);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#get-methods-with-params","title":"GET Methods \u2014 With Params","text":"<ul> <li>Covers Path Params, Query Params, Multiple Params, Conditional Params, and Dynamic Filtering.</li> </ul>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#a-path-params-rest-style","title":"A. Path Params (REST style)","text":"<pre><code>// Get user by ID\nexport const getUserById = async (id) =&gt; {\n  try {\n    const res = await api.get(`/users/${id}`);\n    return res.data;\n  } catch (err) {\n    console.error(`Error fetching user ${id}:`, err);\n    throw err;\n  }\n};\n\n// Get post by ID\nexport const getPostById = async (id) =&gt; {\n  try {\n    return (await api.get(`/posts/${id}`)).data;\n  } catch (e) {\n    throw e;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#b-query-params-axios-params-object","title":"B. Query Params (axios params object)","text":"<pre><code>// Get posts by userId\nexport const getPostsByUser = async (userId) =&gt; {\n  try {\n    const res = await api.get(\"/posts\", { params: { userId } });\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n\n// Search products by name\nexport const searchProducts = async (name) =&gt; {\n  try {\n    const res = await api.get(\"/products\", { params: { name } });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#c-multiple-query-params","title":"C. Multiple Query Params","text":"<pre><code>// Get orders by userId &amp; status\nexport const getOrdersByUserAndStatus = async (userId, status) =&gt; {\n  try {\n    const res = await api.get(\"/orders\", {\n      params: { userId, status },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#d-conditional-params-optional-filters","title":"D. Conditional Params (optional filters)","text":"<pre><code>export const getFilteredPosts = async ({ userId, minLikes }) =&gt; {\n  try {\n    const params = {};\n    if (userId) params.userId = userId;\n    if (minLikes) params.likes_gte = minLikes; // example for JSON-server filtering\n    const res = await api.get(\"/posts\", { params });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#e-array-complex-params","title":"E. Array &amp; Complex Params","text":"<pre><code>// Get multiple products by IDs\nexport const getProductsByIds = async (ids = []) =&gt; {\n  try {\n    const res = await api.get(\"/products\", {\n      params: { id: ids }, // axios will serialize as id=1&amp;id=2\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#f-pagination","title":"F. Pagination","text":"<pre><code>export const getPaginatedPosts = async (page = 1, limit = 10) =&gt; {\n  try {\n    const res = await api.get(\"/posts\", {\n      params: { _page: page, _limit: limit }, // JSON-server pagination\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#g-sorting","title":"G. Sorting","text":"<pre><code>export const getSortedProducts = async (sortBy = \"price\", order = \"asc\") =&gt; {\n  try {\n    const res = await api.get(\"/products\", {\n      params: { _sort: sortBy, _order: order },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#h-combined-search-sort-pagination","title":"H. Combined: Search + Sort + Pagination","text":"<pre><code>export const searchPosts = async ({\n  query,\n  sortBy = \"likes\",\n  order = \"desc\",\n  page = 1,\n  limit = 5,\n}) =&gt; {\n  try {\n    const res = await api.get(\"/posts\", {\n      params: {\n        q: query,\n        _sort: sortBy,\n        _order: order,\n        _page: page,\n        _limit: limit,\n      },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#post-methods-without-params","title":"POST Methods \u2014 Without Params","text":"<ul> <li>Used when sending data to create a resource but without dynamic inputs (static payload or predefined object).</li> </ul> <pre><code>// services/dataService.js\nimport api from \"./api\";\n\n// 1. Create a sample user (fixed data)\nexport const createDefaultUser = async () =&gt; {\n  try {\n    const payload = {\n      name: \"Default User\",\n      email: \"default@example.com\",\n      age: 25,\n      role: \"viewer\",\n    };\n    const res = await api.post(\"/users\", payload);\n    return res.data;\n  } catch (err) {\n    console.error(\"Error creating default user:\", err);\n    throw err;\n  }\n};\n\n// 2. Create a default product\nexport const createDefaultProduct = async () =&gt; {\n  try {\n    const product = {\n      name: \"Default Product\",\n      price: 100,\n      inStock: true,\n    };\n    return (await api.post(\"/products\", product)).data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#post-methods-with-params","title":"POST Methods \u2014 With Params","text":"<ul> <li>The params are usually the payload data passed into the function.</li> </ul>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#a-basic-payload","title":"A. Basic Payload","text":"<pre><code>// Create a new user with dynamic data\nexport const createUser = async (userData) =&gt; {\n  try {\n    const res = await api.post(\"/users\", userData);\n    return res.data;\n  } catch (err) {\n    console.error(\"Error creating user:\", err);\n    throw err;\n  }\n};\n\n// Create a new post\nexport const createPost = async ({ userId, title, content, likes = 0 }) =&gt; {\n  try {\n    const res = await api.post(\"/posts\", {\n      userId,\n      title,\n      content,\n      likes,\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#b-path-params-body","title":"B. Path Params + Body","text":"<ul> <li>Useful when the resource belongs to another resource (nested routes).</li> </ul> <pre><code>// Create a comment for a specific post\nexport const createComment = async (postId, { userId, content }) =&gt; {\n  try {\n    const res = await api.post(`/posts/${postId}/comments`, {\n      userId,\n      content,\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#c-query-params-body","title":"C. Query Params + Body","text":"<ul> <li>Sending additional filtering info via query params.</li> </ul> <pre><code>// Create a product with special flag\nexport const createProductWithFlag = async (productData, isFeatured) =&gt; {\n  try {\n    const res = await api.post(\"/products\", productData, {\n      params: { featured: isFeatured },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#d-multipartform-data-for-file-uploads","title":"D. Multipart/Form-Data (for file uploads)","text":"<ul> <li>Needed for images, PDFs, etc.</li> </ul> <pre><code>export const uploadProductImage = async (productId, file) =&gt; {\n  try {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    const res = await api.post(`/products/${productId}/upload`, formData, {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#e-array-of-objects-as-payload","title":"E. Array of Objects as Payload","text":"<pre><code>// Bulk create products\nexport const createMultipleProducts = async (products) =&gt; {\n  try {\n    const res = await api.post(\"/products/bulk\", products);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#f-complex-nested-payload","title":"F. Complex Nested Payload","text":"<pre><code>export const createOrderWithDetails = async ({\n  userId,\n  items,\n  shippingAddress,\n  paymentMethod,\n}) =&gt; {\n  try {\n    const payload = {\n      userId,\n      items, // [{ productId, quantity }]\n      shippingAddress,\n      paymentMethod,\n      status: \"pending\",\n    };\n    const res = await api.post(\"/orders\", payload);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#g-post-with-default-override-logic","title":"G. POST with Default + Override Logic","text":"<pre><code>export const createPostWithDefaults = async (data) =&gt; {\n  try {\n    const defaultPost = {\n      likes: 0,\n      content: \"\",\n    };\n    const payload = { ...defaultPost, ...data }; // Override defaults\n    const res = await api.post(\"/posts\", payload);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#put-methods-without-params","title":"PUT Methods \u2014 Without Params","text":"<ul> <li>Static update (rare in production, but possible for test/dummy updates)</li> </ul> <pre><code>// Update a fixed user (id: 1) with static data\nexport const updateDefaultUser = async () =&gt; {\n  try {\n    const payload = {\n      name: \"Updated Name\",\n      email: \"updated@example.com\",\n      age: 30,\n      role: \"admin\",\n    };\n    const res = await api.put(\"/users/1\", payload);\n    return res.data;\n  } catch (err) {\n    console.error(\"Error updating default user:\", err);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#put-methods-with-params","title":"PUT Methods \u2014 With Params","text":""},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#a-path-params-full-payload","title":"A. Path Params + Full Payload","text":"<pre><code>// Update user by ID (replace full object)\nexport const updateUser = async (id, userData) =&gt; {\n  try {\n    const res = await api.put(`/users/${id}`, userData);\n    return res.data;\n  } catch (err) {\n    console.error(`Error updating user ${id}:`, err);\n    throw err;\n  }\n};\n\n// Update post by ID\nexport const updatePost = async (id, postData) =&gt; {\n  try {\n    const res = await api.put(`/posts/${id}`, postData);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#b-query-params-full-payload","title":"B. Query Params + Full Payload","text":"<pre><code>// Update product by passing query instead of path\nexport const updateProductByQuery = async (productId, productData) =&gt; {\n  try {\n    const res = await api.put(`/products`, productData, {\n      params: { id: productId },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#c-bulk-update-with-array-payload","title":"C. Bulk Update with Array Payload","text":"<pre><code>export const bulkUpdateProducts = async (products) =&gt; {\n  try {\n    const res = await api.put(\"/products/bulk\", products);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#d-nested-resource-update","title":"D. Nested Resource Update","text":"<pre><code>// Update a comment in a specific post\nexport const updateComment = async (postId, commentId, commentData) =&gt; {\n  try {\n    const res = await api.put(`/posts/${postId}/comments/${commentId}`, commentData);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#e-complex-object-update","title":"E. Complex Object Update","text":"<pre><code>// Update order with nested shipping &amp; items\nexport const updateOrderDetails = async (orderId, details) =&gt; {\n  try {\n    const payload = {\n      ...details,\n      updatedAt: new Date().toISOString(),\n    };\n    const res = await api.put(`/orders/${orderId}`, payload);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#f-conditional-put-with-merged-defaults","title":"F. Conditional PUT with Merged Defaults","text":"<pre><code>export const updatePostWithDefaults = async (id, data) =&gt; {\n  try {\n    const defaults = { likes: 0, content: \"\" };\n    const payload = { ...defaults, ...data };\n    const res = await api.put(`/posts/${id}`, payload);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#g-put-with-file-upload-multipart","title":"G. PUT with File Upload (Multipart)","text":"<pre><code>export const updateProductImage = async (productId, file) =&gt; {\n  try {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    const res = await api.put(`/products/${productId}/upload`, formData, {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#patch-without-params","title":"PATCH \u2014 Without Params","text":"<ul> <li>Rare, but possible for a static partial update on a fixed resource.</li> </ul> <pre><code>// Update only the role of user with id 1\nexport const patchDefaultUserRole = async () =&gt; {\n  try {\n    const payload = { role: \"editor\" };\n    const res = await api.patch(\"/users/1\", payload);\n    return res.data;\n  } catch (err) {\n    console.error(\"Error patching default user role:\", err);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#patch-with-params","title":"PATCH \u2014 With Params","text":""},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#a-path-params-partial-payload","title":"A. Path Params + Partial Payload","text":"<pre><code>// Partially update user by ID\nexport const patchUser = async (id, updates) =&gt; {\n  try {\n    const res = await api.patch(`/users/${id}`, updates);\n    return res.data;\n  } catch (err) {\n    console.error(`Error patching user ${id}:`, err);\n    throw err;\n  }\n};\n\n// Partially update post\nexport const patchPost = async (id, updates) =&gt; {\n  try {\n    return (await api.patch(`/posts/${id}`, updates)).data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#b-query-params-partial-payload","title":"B. Query Params + Partial Payload","text":"<pre><code>// Update product price using query param\nexport const patchProductPrice = async (productId, price) =&gt; {\n  try {\n    const res = await api.patch(\"/products\", { price }, { params: { id: productId } });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#c-bulk-partial-updates","title":"C. Bulk Partial Updates","text":"<pre><code>// Update multiple products' prices\nexport const patchMultipleProducts = async (products) =&gt; {\n  try {\n    const res = await api.patch(\"/products/bulk\", products);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#d-nested-resource-partial-update","title":"D. Nested Resource Partial Update","text":"<pre><code>// Update only the content of a comment\nexport const patchCommentContent = async (postId, commentId, content) =&gt; {\n  try {\n    const res = await api.patch(`/posts/${postId}/comments/${commentId}`, { content });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#e-conditional-field-updates","title":"E. Conditional Field Updates","text":"<pre><code>// Only send fields that are truthy\nexport const patchOrderStatus = async (orderId, status, trackingId) =&gt; {\n  try {\n    const payload = {};\n    if (status) payload.status = status;\n    if (trackingId) payload.trackingId = trackingId;\n\n    const res = await api.patch(`/orders/${orderId}`, payload);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#f-patch-with-defaults-merge","title":"F. PATCH with Defaults Merge","text":"<pre><code>// Merge defaults and only override specific fields\nexport const patchPostWithDefaults = async (id, updates) =&gt; {\n  try {\n    const defaults = { likes: 0 };\n    const payload = { ...defaults, ...updates };\n    const res = await api.patch(`/posts/${id}`, payload);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#g-patch-with-multipartform-data","title":"G. PATCH with Multipart/Form-Data","text":"<pre><code>export const patchProductImage = async (productId, file) =&gt; {\n  try {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    const res = await api.patch(`/products/${productId}/upload`, formData, {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#delete-without-params","title":"DELETE \u2014 Without Params","text":"<ul> <li>Rare in production, but could be used for clearing all data in a resource (admin-level operation).</li> </ul> <pre><code>// Delete ALL posts (dangerous)\nexport const deleteAllPosts = async () =&gt; {\n  try {\n    const res = await api.delete(\"/posts\");\n    return res.data;\n  } catch (err) {\n    console.error(\"Error deleting all posts:\", err);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#delete-with-params","title":"DELETE \u2014 With Params","text":""},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#a-path-params","title":"A. Path Params","text":"<pre><code>// Delete user by ID\nexport const deleteUser = async (id) =&gt; {\n  try {\n    const res = await api.delete(`/users/${id}`);\n    return res.data;\n  } catch (err) {\n    console.error(`Error deleting user ${id}:`, err);\n    throw err;\n  }\n};\n\n// Delete post by ID\nexport const deletePost = async (id) =&gt; {\n  try {\n    return (await api.delete(`/posts/${id}`)).data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#b-query-params","title":"B. Query Params","text":"<pre><code>// Delete product by passing query param\nexport const deleteProductByQuery = async (productId) =&gt; {\n  try {\n    const res = await api.delete(\"/products\", { params: { id: productId } });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#c-bulk-delete-via-array-payload","title":"C. Bulk Delete via Array Payload","text":"<pre><code>// Delete multiple products at once\nexport const bulkDeleteProducts = async (ids) =&gt; {\n  try {\n    const res = await api.delete(\"/products/bulk\", {\n      data: { ids }, // axios DELETE supports \"data\" for payload\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#d-nested-resource-delete","title":"D. Nested Resource Delete","text":"<pre><code>// Delete a comment from a post\nexport const deleteComment = async (postId, commentId) =&gt; {\n  try {\n    const res = await api.delete(`/posts/${postId}/comments/${commentId}`);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#e-conditional-delete-with-filters","title":"E. Conditional Delete with Filters","text":"<pre><code>// Delete orders by status\nexport const deleteOrdersByStatus = async (status) =&gt; {\n  try {\n    const res = await api.delete(\"/orders\", { params: { status } });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#f-authenticated-delete-with-token","title":"F. Authenticated Delete (with token)","text":"<pre><code>// Delete product with authorization\nexport const deleteProductWithAuth = async (productId, token) =&gt; {\n  try {\n    const res = await api.delete(`/products/${productId}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#g-soft-delete-mark-as-deleted-instead-of-removing","title":"G. Soft Delete (Mark as Deleted Instead of Removing)","text":"<pre><code>// Soft delete a post by patching a deleted flag\nexport const softDeletePost = async (postId) =&gt; {\n  try {\n    const res = await api.patch(`/posts/${postId}`, { deleted: true });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#advanced-complex-api-usage-patterns","title":"Advanced &amp; Complex API usage patterns","text":""},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#1-axios-request-cancellation-abortcontroller","title":"1\ufe0f\u20e3 Axios Request Cancellation (AbortController)","text":"<ul> <li>Avoids race conditions when multiple requests are fired rapidly (e.g., live search).</li> </ul> <pre><code>let controller;\n\nexport const searchPostsLive = async (query) =&gt; {\n  if (controller) controller.abort(); // cancel previous request\n  controller = new AbortController();\n\n  try {\n    const res = await api.get(\"/posts\", {\n      params: { q: query },\n      signal: controller.signal,\n    });\n    return res.data;\n  } catch (err) {\n    if (err.name === \"CanceledError\") {\n      console.log(\"Request canceled\");\n    } else {\n      throw err;\n    }\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#2-axios-interceptors-auth-logging-error-handling","title":"2\ufe0f\u20e3 Axios Interceptors (Auth, Logging, Error Handling)","text":"<ul> <li>Global handling for tokens, logs, and error transformations.</li> </ul> <pre><code>api.interceptors.request.use((config) =&gt; {\n  const token = localStorage.getItem(\"token\");\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\n\napi.interceptors.response.use(\n  (response) =&gt; response,\n  (error) =&gt; {\n    if (error.response?.status === 401) {\n      console.warn(\"Unauthorized, redirecting to login...\");\n    }\n    return Promise.reject(error);\n  }\n);\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#3-parallel-api-calls-promiseall","title":"3\ufe0f\u20e3 Parallel API Calls (Promise.all)","text":"<ul> <li>Fetch multiple resources at once for better performance.</li> </ul> <pre><code>export const getDashboardData = async () =&gt; {\n  try {\n    const [users, posts, products] = await Promise.all([\n      api.get(\"/users\"),\n      api.get(\"/posts\"),\n      api.get(\"/products\"),\n    ]);\n\n    return {\n      users: users.data,\n      posts: posts.data,\n      products: products.data,\n    };\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#4-dependent-sequential-requests","title":"4\ufe0f\u20e3 Dependent (Sequential) Requests","text":"<ul> <li>Where the second request depends on the first request\u2019s data.</li> </ul> <pre><code>export const getUserWithPosts = async (userId) =&gt; {\n  try {\n    const user = await api.get(`/users/${userId}`);\n    const posts = await api.get(\"/posts\", { params: { userId } });\n    return { ...user.data, posts: posts.data };\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#5-retry-failed-requests-with-exponential-backoff","title":"5\ufe0f\u20e3 Retry Failed Requests with Exponential Backoff","text":"<ul> <li>Handles flaky network/API failures.</li> </ul> <pre><code>export const fetchWithRetry = async (endpoint, retries = 3, delay = 1000) =&gt; {\n  try {\n    const res = await api.get(endpoint);\n    return res.data;\n  } catch (err) {\n    if (retries &gt; 0) {\n      await new Promise((resolve) =&gt; setTimeout(resolve, delay));\n      return fetchWithRetry(endpoint, retries - 1, delay * 2); // exponential backoff\n    }\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#6-request-timeouts","title":"6\ufe0f\u20e3 Request Timeouts","text":"<ul> <li>Abort request if it takes too long.</li> </ul> <pre><code>export const getFastResponse = async () =&gt; {\n  try {\n    const res = await api.get(\"/products\", { timeout: 3000 });\n    return res.data;\n  } catch (err) {\n    if (err.code === \"ECONNABORTED\") {\n      console.warn(\"Request timed out\");\n    }\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#7-pagination-infinite-scroll-loader","title":"7\ufe0f\u20e3 Pagination &amp; Infinite Scroll Loader","text":"<ul> <li>Advanced API with stateful pagination.</li> </ul> <pre><code>export const getPaginatedUsers = async (page, limit = 10) =&gt; {\n  try {\n    const res = await api.get(\"/users\", { params: { _page: page, _limit: limit } });\n    return {\n      data: res.data,\n      totalCount: parseInt(res.headers[\"x-total-count\"], 10) || 0,\n    };\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#8-batch-request-processing","title":"8\ufe0f\u20e3 Batch Request Processing","text":"<ul> <li>Send multiple related changes in one API call.</li> </ul> <pre><code>export const batchUpdateOrders = async (updates) =&gt; {\n  try {\n    return (await api.patch(\"/orders/batch\", updates)).data;\n  } catch (err) {\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#9-file-upload-with-progress-tracking","title":"9\ufe0f\u20e3 File Upload with Progress Tracking","text":"<ul> <li>Common for dashboards and CMS systems.</li> </ul> <pre><code>export const uploadFileWithProgress = async (file, onProgress) =&gt; {\n  try {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    const res = await api.post(\"/upload\", formData, {\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n      onUploadProgress: (progressEvent) =&gt; {\n        const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n        onProgress(percent);\n      },\n    });\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#optimistic-ui-updates","title":"\ud83d\udd1f Optimistic UI Updates","text":"<ul> <li>Update UI instantly before API confirmation.</li> </ul> <pre><code>export const likePostOptimistic = async (postId, currentLikes, setLikes) =&gt; {\n  // Instantly update UI\n  setLikes(currentLikes + 1);\n\n  try {\n    await api.patch(`/posts/${postId}`, { likes: currentLikes + 1 });\n  } catch (err) {\n    // Revert if failed\n    setLikes(currentLikes);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#11-cache-localstorage-fallback","title":"1\ufe0f\u20e31\ufe0f\u20e3 Cache + LocalStorage Fallback","text":"<ul> <li>Reduces API calls by caching results.</li> </ul> <pre><code>export const getCachedUsers = async () =&gt; {\n  const cache = localStorage.getItem(\"usersCache\");\n  if (cache) return JSON.parse(cache);\n\n  const res = await api.get(\"/users\");\n  localStorage.setItem(\"usersCache\", JSON.stringify(res.data));\n  return res.data;\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#12-axios-instance-per-feature","title":"1\ufe0f\u20e32\ufe0f\u20e3 Axios Instance per Feature","text":"<ul> <li>Multiple axios.create instances for microservice APIs.</li> </ul> <pre><code>export const authApi = axios.create({ baseURL: \"https://auth.example.com\" });\nexport const productApi = axios.create({ baseURL: \"https://products.example.com\" });\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#api-folder-structure","title":"API Folder Structure","text":""},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#react-vite-cra","title":"React (Vite / CRA)","text":"<pre><code>src/\n\u2502\n\u251c\u2500\u2500 api/                     # Central place for axios instances &amp; API calls\n\u2502   \u251c\u2500\u2500 axiosClient.js       # axios.create base instance\n\u2502   \u251c\u2500\u2500 users.api.js         # User-related API calls\n\u2502   \u251c\u2500\u2500 posts.api.js         # Post-related API calls\n\u2502   \u251c\u2500\u2500 comments.api.js      # Comment-related API calls\n\u2502   \u251c\u2500\u2500 products.api.js      # Product-related API calls\n\u2502   \u251c\u2500\u2500 orders.api.js        # Order-related API calls\n\u2502   \u2514\u2500\u2500 index.js             # Export all APIs from one place\n\u2502\n\u251c\u2500\u2500 services/                # Optional: business logic using API calls\n\u2502   \u2514\u2500\u2500 order.service.js\n\u2502\n\u251c\u2500\u2500 components/\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 pages/                   # Page-level components (if not using Next.js)\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u2514\u2500\u2500 App.jsx\n</code></pre> <ul> <li>axiosClient.js holds your baseURL, interceptors, and defaults.</li> </ul> <pre><code>// src/api/axiosClient.js\nimport axios from 'axios';\n\nconst axiosClient = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || 'https://api.example.com',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // if needed for cookies/auth\n});\n\n// Request interceptor\naxiosClient.interceptors.request.use(\n  (config) =&gt; {\n    // Example: attach token\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) =&gt; Promise.reject(error)\n);\n\n// Response interceptor\naxiosClient.interceptors.response.use(\n  (response) =&gt; response.data,\n  (error) =&gt; {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosClient;\n</code></pre> <ul> <li>Each *.api.js file contains only functions that call APIs.</li> </ul> <pre><code>// src/api/users.api.js\nimport axiosClient from './axiosClient';\n\nexport const getAllUsers = () =&gt; axiosClient.get('/users');\nexport const getUserById = (id) =&gt; axiosClient.get(`/users/${id}`);\nexport const createUser = (data) =&gt; axiosClient.post('/users', data);\nexport const updateUser = (id, data) =&gt; axiosClient.put(`/users/${id}`, data);\nexport const deleteUser = (id) =&gt; axiosClient.delete(`/users/${id}`);\n</code></pre> <pre><code>// src/api/posts.api.js\nimport axiosClient from './axiosClient';\n\nexport const getAllPosts = () =&gt; axiosClient.get('/posts');\nexport const getPostById = (id) =&gt; axiosClient.get(`/posts/${id}`);\nexport const createPost = (data) =&gt; axiosClient.post('/posts', data);\nexport const updatePost = (id, data) =&gt; axiosClient.put(`/posts/${id}`, data);\nexport const deletePost = (id) =&gt; axiosClient.delete(`/posts/${id}`);\n</code></pre> <ul> <li>index.js for export them from one file</li> </ul> <pre><code>// src/api/index.js\nimport * as UsersAPI from './users.api';\nimport * as PostsAPI from './posts.api';\nimport * as CommentsAPI from './comments.api';\nimport * as ProductsAPI from './products.api';\nimport * as OrdersAPI from './orders.api';\n\nexport {\n  UsersAPI,\n  PostsAPI,\n  CommentsAPI,\n  ProductsAPI,\n  OrdersAPI\n};\n</code></pre> <ul> <li>services/ layer is optional \u2014 use it if you want to combine multiple API calls or apply business logic before sending to UI.</li> </ul> <pre><code>// src/services/user.service.js\nimport { getUser, createUser } from \"../api/users.api\";\n\nexport const registerAndFetchUser = async (userData) =&gt; {\n  const newUser = await createUser(userData);\n  return await getUser(newUser.data.id);\n};\n</code></pre>"},{"location":"reactapi/14.2.1.Axios%20Industry%20Standards/#nextjs-app-router-pages-router","title":"Next.js (App Router / Pages Router)","text":"<p>Frontend API calls</p> <pre><code>src/\n\u2502\n\u251c\u2500\u2500 lib/                     # Shared utilities\n\u2502   \u2514\u2500\u2500 axiosClient.js       # axios.create base instance\n\u2502\n\u251c\u2500\u2500 api/                     # API call functions\n\u2502   \u251c\u2500\u2500 users.api.js\n\u2502   \u251c\u2500\u2500 posts.api.js\n\u2502   \u251c\u2500\u2500 comments.api.js\n\u2502   \u251c\u2500\u2500 products.api.js\n\u2502   \u251c\u2500\u2500 orders.api.js\n\u2502   \u2514\u2500\u2500 index.js\n\u2502\n\u251c\u2500\u2500 app/                     # App Router structure\n\u2502   \u251c\u2500\u2500 page.jsx\n\u2502   \u2514\u2500\u2500 dashboard/\n\u2502       \u2514\u2500\u2500 page.jsx\n\u2502\n\u2514\u2500\u2500 components/\n</code></pre>"},{"location":"reactapi/14.3.Authentication/","title":"14.3.Authentication","text":""},{"location":"reactapi/14.4.Advanced%20API%20Scenarios/","title":"14.4.Advanced API Scenarios","text":""},{"location":"reactapi/14.5.1.State%20Management%20with%20API%20Data/","title":"14.5.1.State Management with API Data","text":""},{"location":"reactapi/14.5.1.State%20Management%20with%20API%20Data/#state-management-with-api-data-react-query","title":"State Management with API Data (React Query)","text":""},{"location":"reactapi/14.5.1.State%20Management%20with%20API%20Data/#1-without-libraries-vanilla-react","title":"1\ufe0f\u20e3 Without Libraries (Vanilla React)","text":"<ul> <li>Store API Response in Component State</li> <li>Use <code>useState</code> and <code>useEffect</code> to fetch and store data.</li> <li> <p>Example:</p> <pre><code>const [users, setUsers] = useState([]);\nconst [loading, setLoading] = useState(true);\nconst [error, setError] = useState(null);\n\nuseEffect(() =&gt; {\n  fetch(\"https://api.example.com/users\")\n    .then(res =&gt; res.json())\n    .then(data =&gt; setUsers(data))\n    .catch(err =&gt; setError(err))\n    .finally(() =&gt; setLoading(false));\n}, []);\n</code></pre> </li> <li> <p>Lift State Up to Parent</p> </li> <li>If multiple child components need the same data, store it in the parent and pass as props.</li> <li> <p>Example:</p> <pre><code>function ParentComponent() {\n  const [users, setUsers] = useState([]);\n  // fetch data here and pass users to children\n  return &lt;ChildComponent users={users} /&gt;;\n}\n</code></pre> </li> </ul>"},{"location":"reactapi/14.5.1.State%20Management%20with%20API%20Data/#2-with-react-query","title":"2\ufe0f\u20e3 With React Query","text":"<ul> <li>Automatic State Management</li> <li><code>useQuery</code> handles loading, error, and data states automatically.</li> <li> <p>Example:</p> <pre><code>import { useQuery } from \"@tanstack/react-query\";\n\nconst fetchUsers = async () =&gt; {\n  const res = await fetch(\"https://api.example.com/users\");\n  if (!res.ok) throw new Error(\"Failed to fetch\");\n  return res.json();\n};\n\nexport default function UsersList() {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: [\"users\"],\n    queryFn: fetchUsers\n  });\n\n  if (isLoading) return &lt;p&gt;Loading...&lt;/p&gt;;\n  if (isError) return &lt;p&gt;Error: {error.message}&lt;/p&gt;;\n\n  return (\n    &lt;ul&gt;\n      {data.map(user =&gt; (\n        &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> </li> <li> <p>Key Advantages</p> </li> <li>Caching \u2013 Data is stored and reused automatically.</li> <li>Background Updates \u2013 React Query refetches stale data in the background.</li> <li>Automatic Error Handling \u2013 <code>isError</code> and <code>error</code> state provided.</li> <li>Optimistic UI Updates \u2013 Can update UI immediately before server confirmation (with mutations).</li> <li>Dependent Queries \u2013 Fetch one query only after another completes.</li> </ul>"},{"location":"reactapi/14.5.1.State%20Management%20with%20API%20Data/#3-comparison","title":"3\ufe0f\u20e3 Comparison","text":"Feature Vanilla React React Query Loading / Error State Manual Automatic Caching \u274c None \u2705 Built-in Refetch / Polling Manual \u2705 Configurable Optimistic Updates Manual \u2705 Built-in with mutations Dependent Queries Manual \u2705 Supported Global DevTools \u274c \u2705 React Query DevTools"},{"location":"reactapi/14.5.2.React%20Query/","title":"14.5.2.React Query","text":""},{"location":"reactapi/14.5.2.React%20Query/#react-query-comprehensive-topics","title":"React Query Comprehensive Topics","text":""},{"location":"reactapi/14.5.2.React%20Query/#0-introduction","title":"0\ufe0f\u20e3 Introduction","text":""},{"location":"reactapi/14.5.2.React%20Query/#problem-statement","title":"Problem Statement","text":"<ul> <li>Since React is a UI library, there is no specific pattern for data fetching</li> <li>We typically use the useEffect hook for data fetching and useState hook to maintain component state like loading, error state or the resulting data</li> <li>If the data is needed throughout the app, then we tend to use state management libraries like Redux</li> <li>Most of the state management libraries are good for working with client state. Ex. 'theme' for an application / whether a modal is open</li> <li>State Management Libraries are not great for working with asynchronous or server state</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#client-vs-server-state","title":"Client vs server state","text":"<ul> <li>Client state:</li> <li> <p>Persisted in your app memory and accessing or updating it is synchronous</p> </li> <li> <p>Server state:</p> </li> <li>Persisted remotely and requires asynchronous APIs for fetching or updating</li> <li>Has shared ownership</li> <li>Data can be updated by someone else without your knowledge</li> <li>UI data may not be in sync with the remote server/database data</li> <li>Challenging when you have to deal with caching, deduplication of multiple requests for thsame data, updating stale data in the background, performance optimizations in pagination and lazy-loading, etc</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#what-is-react-query","title":"What is React Query?","text":"<ul> <li>React Query is a powerful data-fetching and state management library for React applications.</li> <li>It provides a set of hooks for fetching, caching, synchronizing, and updating server state in your UI, without needing complex global state management solutions like Redux.</li> </ul> <p>Created by Tanner Linsley, React Query simplifies remote data management by:</p> <ul> <li>Automatically caching fetched data</li> <li>Keeping data fresh via background refetching</li> <li>Avoiding duplicate network requests</li> <li>Simplifying pagination, infinite scrolling, and optimistic updates</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#why-use-react-query","title":"Why Use React Query?","text":"<p>Traditionally, managing server state involved juggling global stores (Redux, MobX), side effects (Redux-Thunk, Redux-Saga), and manual caching logic. React Query eliminates this complexity by abstracting most of this away, offering:</p> <ul> <li>\u2705 Auto caching and background syncing</li> <li>\ud83d\udd01 Refetch on focus or reconnect</li> <li>\ud83d\udca1 Stale-while-revalidate logic</li> <li>\ud83d\ude80 Performance optimization out of the box</li> <li>\ud83d\udd04 Support for paginated and infinite queries</li> <li>\ud83d\udca5 Built-in retry and error recovery</li> <li>\ud83d\udd27 DevTools for debugging query states</li> </ul> <p>React Query is especially useful in apps with a lot of asynchronous data (like dashboards, admin panels, and data-heavy UIs).</p>"},{"location":"reactapi/14.5.2.React%20Query/#core-concepts-overview","title":"Core Concepts Overview","text":"<p>Here are the fundamental building blocks of React Query:</p> <ul> <li>Query (useQuery): Used to fetch and cache server data. Handles loading, error, and success states.</li> <li>Declarative Data Fetching: React Query promotes a declarative approach to data fetching. You define queries and mutations using hooks like <code>useQuery</code> and <code>useMutation</code>. This leads to cleaner and more organized code.</li> <li>Mutation (useMutation): Used to send data to the server (e.g., POST, PUT, DELETE). Supports optimistic updates.</li> <li>Query Keys: Unique identifiers for queries; essential for caching and invalidation.</li> <li>Query Client: A central manager for all queries/mutations. Configures global settings like retry count and cache time.</li> <li>Automatic Caching: React Query includes a built-in cache that stores query results. It automatically updates data when mutations occur, ensuring your UI remains consistent.</li> <li>Background Data Sync: It can automatically refetch data in the background, keeping your data fresh without manual intervention.</li> <li>Pagination and Infinite Scrolling: React Query provides utilities for handling pagination and infinite scrolling effortlessly.</li> <li>Optimistic Updates: You can implement optimistic updates with ease, making your app feel more responsive.</li> <li>DevTools: Visual debugging tool to inspect the query cache, query states, and performance.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#comparison-with-redux-swr","title":"Comparison with Redux &amp; SWR","text":"Feature React Query Redux SWR Purpose Server state mgmt Global app &amp; server state mgmt Server state mgmt Data Caching \u2705 Built-in \u274c Manual \u2705 Built-in Background Refetching \u2705 Yes \u274c No \u2705 Yes DevTools \u2705 Yes \u2705 (via Redux DevTools) \u274c No (community-based) Boilerplate Minimal High Minimal Optimistic Updates \u2705 Yes \u274c Manual \ud83d\udea7 Limited Pagination Support \u2705 Yes \u274c Manual \ud83d\udea7 Basic support Learning Curve Medium High Low <p>Summary: React Query is ideal when your app heavily interacts with remote data and you want to avoid over-engineering with global state libraries like Redux. It's more full-featured than SWR and offers deep control and performance optimizations for serious production use.</p>"},{"location":"reactapi/14.5.2.React%20Query/#react-query-setup","title":"React Query - Setup","text":""},{"location":"reactapi/14.5.2.React%20Query/#1-install-dependencies","title":"1. Install Dependencies","text":"<p>Go to react query docs for installation -- https://tanstack.com/query/latest/docs/framework/react/installation</p> <pre><code># Install React Query\nnpm install @tanstack/react-query\n\n# Optional: React Query Devtools\nnpm install @tanstack/react-query-devtools\n</code></pre> <p>also install react-router for routing in React</p> <pre><code>npm install react-router\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#2-set-up-query-client","title":"2. Set Up Query Client","text":"<p>Create a <code>QueryClient</code> and wrap your app with <code>QueryClientProvider</code> in <code>main.jsx</code>.</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\n// Create a client\nconst queryClient = new QueryClient();\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  &lt;React.StrictMode&gt;\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;App /&gt;\n      &lt;ReactQueryDevtools initialIsOpen={false} /&gt;\n    &lt;/QueryClientProvider&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#3-create-a-fetcher-function","title":"3. Create a Fetcher Function","text":"<p>Define a function that fetches data from your API. You can use <code>fetch</code> or <code>axios</code>.</p> <pre><code>// api/posts.js\nexport const fetchPosts = async () =&gt; {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  return response.json();\n};\n</code></pre> <pre><code>// api/posts.js\nimport axios from \"axios\";\nexport const fetchPosts = async () =&gt; {\n  try {\n    const response = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.statusText || \"Network request failed\");\n  }\n};\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#4-use-react-query-in-a-component","title":"4. Use React Query in a Component","text":"<p>Use <code>useQuery</code> to fetch data and handle loading, error, and success states automatically.</p> <pre><code>import { useQuery } from \"@tanstack/react-query\";\nimport { fetchPosts } from \"./api/posts\";\n\nexport default function PostsList() {\n  const { data, isLoading, isError, error } = useQuery({\n    // the path becomes the queryKey here,\n      // /posts --&gt; [\"posts\"]\n      // /posts/1 --&gt; [\"posts\", 1]\n      // /posts/2 --&gt; [\"posts\", 2]\n      // or for dynamic route\n      // /posts/:id --&gt; [\"posts\", post.id]\n      // /posts/:id/comments --&gt; [\"posts\", post.id, \"comments\"]\n    queryKey: [\"posts\"],\n    // the queryFn is a Callback Function that returns a promise\n    queryFn: fetchPosts,\n  });\n\n  if (isLoading) return &lt;p&gt;Loading...&lt;/p&gt;;\n  if (isError) return &lt;p&gt;Error: {error.message}&lt;/p&gt;;\n\n  return (\n    &lt;ul&gt;\n      {data.map((post) =&gt; (\n        &lt;li key={post.id}&gt;\n          &lt;h3&gt;{post.title}&lt;/h3&gt;\n          &lt;p&gt;{post.body}&lt;/p&gt;\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#5-key-concepts","title":"5. Key Concepts","text":"<ul> <li>queryKey \u2192 Unique key for caching and refetching.</li> <li>queryFn \u2192 Function returning a promise (fetcher).</li> <li>Automatic caching \u2192 Data is cached and updated automatically.</li> <li>Stale time &amp; refetch \u2192 Configurable to control updates.</li> <li>Devtools \u2192 Visualize query cache and state in the browser.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#1-core-concepts","title":"1\ufe0f\u20e3 Core Concepts","text":""},{"location":"reactapi/14.5.2.React%20Query/#queryclient","title":"QueryClient","text":"<ul> <li>Purpose: Central object that manages queries, mutations, cache, and default configurations.  </li> <li> <p>Key Options:</p> <ul> <li><code>staleTime</code> \u2013 The time during which cached data is considered fresh. While data is \u201cfresh,\u201d React Query will not automatically refetch it when a component mounts or window refocuses.</li> <li><code>cacheTime</code> \u2013The time after which unused (inactive) cached data is garbage-collected. \u201cUnused\u201d means no active queries or components are currently subscribing to it.</li> <li><code>refetchOnWindowFocus</code> \u2013 Refetch queries when window regains focus.  </li> <li>More key options are listed below</li> </ul> </li> <li> <p>Example:</p> </li> </ul> <pre><code>// src/main.jsx\nimport { QueryClient } from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient({\n  // Default options: `staleTime`, `cacheTime`, `refetchOnWindowFocus`.\n  // here we are just create a QueryClient with Default Options\n  defaultOptions: {\n    queries: {\n      // Configure how long the data should remain fresh, or won't turn into stale value.\n      // Default staleTime = 0 ms\n      // lets keep the value fresh for one minute\n      staleTime: 1000 * 60, // 1 minute\n\n      //The default value of cacheTime in React Query is: 5 minutes (1000 * 60 * 5 ms)\n      cacheTime: 1000 * 60 * 5, // 5 minutes\n\n      // Fires when the browser window/tab regains focus. \n      // When the user switches to another tab or window and comes back, React Query will refetch queries that are stale.\n      // This ensures the UI shows the most up-to-date data without the user needing to refresh manually.\n      refetchOnWindowFocus: true,   // default, refetch when window refocuses\n      // refetchOnWindowFocus: false  // never refetch automatically on focus\n      // refetchOnWindowFocus: 'always' // always refetch even if data is fresh\n\n      // Fires when a component mounts that uses the query.\n      // On component mount, React Query decides whether to refetch based on the staleness of the data.\n      // refetchOnMount: true        // Refetch if the data is stale\n      // refetchOnMount: false       // Never refetch on mount\n      refetchOnMount: 'always'    // default, Always refetch, even if data is fresh\n      // Useful when you want to ensure the component always shows up-to-date data on mount.\n      // Can be set to false if you trust the cached data and want instant UI without unnecessary network requests.\n    },\n  },\n});\n</code></pre> <ul> <li> <p>staleTime = 1 min</p> <ul> <li>During this time, data is \u201cfresh.\u201d</li> <li>React Query will never show a loading state if a component mounts \u2014 it just serves the cached data.</li> </ul> </li> <li> <p>After 1 min \u2192 data becomes stale</p> <ul> <li>React Query considers it stale and can refetch it in the background if refetchOnMount or refetchOnWindowFocus is enabled.</li> <li>But the cached data is still available, so the UI can display stale data immediately instead of showing Loading....</li> </ul> </li> <li> <p>cacheTime = 5 min</p> <ul> <li>Even if no component is using the query, React Query keeps the data in memory for 5 minutes.</li> <li>If a component mounts within that 5 minutes, it gets stale data immediately while the background refetch happens.</li> <li>Only after 5 minutes of inactivity is the cache removed \u2014 then a new fetch will show Loading....</li> </ul> </li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#queryclientprovider","title":"QueryClientProvider","text":"<ul> <li>Purpose: Wrap your app to provide the QueryClient instance globally.</li> <li>Example:</li> </ul> <pre><code>import { QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\n// Create a Client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // every defalut query you want to give goes here.\n    }\n  }\n});\n\nfunction App() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;MyAppComponents /&gt;\n      {/* if you want to use react query devtools */}\n      &lt;ReactQueryDevtools initialIsOpen={false} /&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#usequery","title":"useQuery","text":"<ul> <li>Purpose: Fetch and cache data from an API. Handles loading, error, and success automatically.</li> <li>Key Options: same Key Options as before</li> <li>Example:</li> </ul> <pre><code>import { useQuery } from \"@tanstack/react-query\";\n\nconst fetchUsers = async () =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  if (!res.ok) throw new Error(\"Failed to fetch users\");\n  return res.json();\n};\n\nexport default function UsersList() {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: [\"users\"],\n    queryFn: fetchUsers,\n    staleTime: 1000 * 60, // 1 min\n    retry: 2,\n  });\n\n  if (isLoading) return &lt;p&gt;Loading...&lt;/p&gt;;\n  if (isError) return &lt;p&gt;Error: {error.message}&lt;/p&gt;;\n\n  return (\n    &lt;ul&gt;\n      {data.map(user =&gt; &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;)}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>To know more: useQuery Reference</p>"},{"location":"reactapi/14.5.2.React%20Query/#usemutation","title":"useMutation","text":"<ul> <li>Purpose: Perform POST, PUT, PATCH, DELETE operations with automatic cache updates.</li> <li>Key Options:<ul> <li><code>onSuccess</code> \u2013 Called after successful mutation.</li> <li><code>onError</code> \u2013 Called if mutation fails.</li> <li><code>onSettled</code> \u2013 Called after either success or error.</li> </ul> </li> <li>Example:</li> </ul> <pre><code>import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\nconst addUser = async (user) =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  });\n  if (!res.ok) throw new Error(\"Failed to add user\");\n  return res.json();\n};\n\nexport default function AddUserForm() {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(addUser, {\n    onSuccess: () =&gt; {\n      // Invalidate and refetch users query\n      queryClient.invalidateQueries([\"users\"]);\n    },\n    onError: (error) =&gt; console.error(\"Error:\", error),\n  });\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    const user = { name: \"John Doe\" };\n    mutation.mutate(user);\n  };\n\n  return &lt;button onClick={handleSubmit}&gt;Add User&lt;/button&gt;;\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#usequeryclient","title":"useQueryClient","text":"<ul> <li>Purpose: Access and manipulate the query cache manually.</li> <li>Common Use Cases:<ul> <li>Invalidate queries</li> <li>Prefetch queries</li> <li>Update cached data optimistically</li> </ul> </li> <li>Example:</li> </ul> <pre><code>import { useQueryClient } from \"@tanstack/react-query\";\n\nconst queryClient = useQueryClient();\n// refetch users\nqueryClient.invalidateQueries([\"users\"]); \n// optimistic update\nqueryClient.setQueryData([\"users\"], oldData =&gt; [...oldData, newUser]); \n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#react-query-achitecture-map","title":"React Query Achitecture Map","text":"<pre><code>               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502      UI Component (Hook)   \u2502\n               \u2502   e.g. useQuery/useMutation\u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502 QueryClient (central brain)\u2502\n               \u2502 - Stores all queries       \u2502\n               \u2502 - Caches results           \u2502\n               \u2502 - Manages observers        \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u25bc                                          \u25bc\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 Query Cache          \u2502                  \u2502 Mutation Cache        \u2502\n \u2502 - Data (stale/fresh) \u2502                  \u2502 - Pending mutations   \u2502\n \u2502 - Status (loading...)\u2502                  \u2502 - Retry/failure state \u2502\n \u2502 - Timestamps         \u2502                  \u2502 - Garbage collection  \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502                                          \u2502\n             \u25bc                                          \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Query Observer            \u2502              \u2502 Mutation Observer         \u2502\n   \u2502 - Subscribes to cache     \u2502              \u2502 - Subscribes to mutation  \u2502\n   \u2502 - Notifies components     \u2502              \u2502 - Triggers UI updates     \u2502\n   \u2502 - Applies retry logic     \u2502              \u2502 - Retries if configured   \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502                                           \u2502\n                 \u25bc                                           \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 Query Function (async)\u2502                   \u2502 Mutation Function      \u2502\n        \u2502 - fetch('/api/data')  \u2502                   \u2502 - POST/PUT/DELETE reqs \u2502\n        \u2502 - Axios/Fetch/GraphQL \u2502                   \u2502 - Sends updates        \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502                                           \u2502\n                     \u25bc                                           \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 Server / API / Database \u2502                  \u2502 Server / API / Database \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502        QueryClient         \u2502\n                \u2502  (Central Manager/Cache)   \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502                  \u2502                        \u2502\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Query Cache      \u2502 \u2502 Mutation Cache  \u2502 \u2502 Devtools (UI)    \u2502\n   \u2502 - Stores queries \u2502 \u2502 - Stores pending\u2502 \u2502 - Observes state \u2502\n   \u2502 - Data + status  \u2502 \u2502   mutations     \u2502 \u2502 - Debugging      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502                  \u2502                        \u2502\n            \u2502                  \u2502                        \u2502\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502                        \u2502\n \u2502 Query Observer     \u2502        \u2502                        \u2502\n \u2502 (per component)    \u2502        \u2502                        \u2502\n \u2502 - Subscribes to    \u2502        \u2502                        \u2502\n \u2502   query updates    \u2502        \u2502                        \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502                        \u2502\n           \u2502                   \u2502                        \u2502\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 React Hook Layer  \u2502   \u2502 Mutation Hook \u2502       \u2502 Utilities      \u2502\n \u2502 (useQuery,        \u2502   \u2502 (useMutation) \u2502       \u2502 Hydration,     \u2502\n \u2502 useInfiniteQuery, \u2502   \u2502 - Trigger API \u2502       \u2502 Suspense, etc. \u2502\n \u2502 useSuspenseQuery, \u2502   \u2502 - Update cache\u2502       \u2502                \u2502\n \u2502 etc.)             \u2502   \u2502 - Invalidate  \u2502       \u2502                \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502                   \u2502\n           \u2502                   \u2502\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502                        Data Fetcher                        \u2502\n \u2502 (Axios, fetch, GraphQL, REST, gRPC, etc.)                  \u2502\n \u2502 - Executes actual network request                          \u2502\n \u2502 - Returns data or error                                    \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502 Query Lifecycle      \u2502\n          \u2502 - idle \u2192 loading \u2192   \u2502\n          \u2502   success/error      \u2502\n          \u2502 - retries + backoff  \u2502\n          \u2502 - garbage collection \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502 Cache Policies       \u2502\n         \u2502 - staleTime          \u2502\n         \u2502 - cacheTime          \u2502\n         \u2502 - refetchOnWindow    \u2502\n         \u2502   Focus, Reconnect   \u2502\n         \u2502 - background updates \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502 React Component Rendering            \u2502\n        \u2502 - Reads from cache (fast UI)         \u2502\n        \u2502 - Subscribes to changes (auto sync)  \u2502\n        \u2502 - Suspense fallback if enabled       \u2502\n        \u2502 - ErrorBoundary for failures         \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#react-query-workflow","title":"React Query Workflow","text":""},{"location":"reactapi/14.5.2.React%20Query/#1-component-mounts","title":"1. Component Mounts","text":"<ul> <li>Calls <code>useQuery</code> / <code>useInfiniteQuery</code> / <code>useSuspenseQuery</code>.</li> <li>Hook connects to Query Observer, which checks the Query Cache inside <code>QueryClient</code>.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#2-cache-check","title":"2. Cache Check","text":"<ul> <li>If data is fresh (within <code>staleTime</code>) \u2192 return cached data instantly (no network).</li> <li>If data is stale or missing \u2192 trigger fetch from Data Fetcher.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#3-queryclient-controls","title":"3. QueryClient Controls","text":"<ul> <li>Tracks query state: <code>idle</code>, <code>loading</code>, <code>success</code>, <code>error</code>.</li> <li>Manages:</li> <li>Retries (with exponential backoff).</li> <li>Garbage collection (based on <code>cacheTime</code>).</li> <li>Refetching policies:<ul> <li>On window focus.</li> <li>On reconnect.</li> <li>On intervals.</li> </ul> </li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#4-query-updates","title":"4. Query Updates","text":"<ul> <li>Cache updated with new data (organized by <code>queryKey</code>).</li> <li>All subscribed components automatically re-render with latest data.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#5-mutations-usemutation","title":"5. Mutations (<code>useMutation</code>)","text":"<ul> <li>Executes <code>mutationFn</code> (e.g., <code>POST</code>, <code>PUT</code>, <code>DELETE</code> API call).</li> <li>Features:</li> <li>Optimistic updates \u2192 UI updates before server confirms.</li> <li>Invalidate queries \u2192 triggers auto-refetch for related queries.</li> <li>Rollback on error \u2192 revert changes if mutation fails.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#6-suspense-error-boundaries","title":"6. Suspense + Error Boundaries","text":"<ul> <li><code>useSuspenseQuery</code> \u2192 UI suspends until data resolves.</li> <li>If query fails \u2192 Error Boundary (or <code>useQueryErrorResetBoundary</code>) catches and handles error.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#7-hydration-ssr-ssg","title":"7. Hydration (SSR / SSG)","text":"<ul> <li>Server prefetches data.</li> <li>Data sent to client as dehydrated JSON.</li> <li>Client hydrates into <code>QueryClient</code> cache \u2192 avoids unnecessary refetch.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#8-devtools","title":"8. Devtools","text":"<ul> <li>Visualize queries, cache, and mutations in real-time.</li> <li>Helps with debugging and cache inspection.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#2-query-keys-and-cache","title":"2\ufe0f\u20e3 Query Keys and Cache","text":""},{"location":"reactapi/14.5.2.React%20Query/#a-query-keys","title":"A. Query Keys","text":"<p>What they are Query keys uniquely identify cached data. React Query uses them to store, look up, refetch, and invalidate results. Shape and best practices</p> <ul> <li>Use arrays as keys: <code>['users']</code>, <code>['user', userId]</code>, <code>['posts', { page, sort }]</code>.</li> <li>Include every input that affects the response (e.g., filters, pagination, auth scope).</li> <li>Use serializable values (strings, numbers, booleans, plain objects). Avoid functions/instances.</li> <li> <p>Centralize keys in a key-factory to avoid typos and keep consistency.</p> </li> <li> <p>Key factory pattern (recommended)</p> </li> </ul> <pre><code>// keys/users.ts\nexport const usersKeys = {\n  all: () =&gt; ['users'] as const,\n  lists: () =&gt; [...usersKeys.all(), 'list'] as const,\n  list: (filters: { page?: number; q?: string } = {}) =&gt;\n    [...usersKeys.lists(), filters] as const,\n  details: () =&gt; [...usersKeys.all(), 'detail'] as const,\n  detail: (id: number | string) =&gt; [...usersKeys.details(), id] as const,\n};\n</code></pre> <p>Using keys in queries</p> <pre><code>import { useQuery } from '@tanstack/react-query';\nimport { usersKeys } from './keys/users';\nimport axios from 'axios';\n\nconst fetchUsers = async (filters: { page?: number; q?: string }) =&gt; {\n  const { data } = await axios.get('/api/users', { params: filters });\n  return data as { items: any[]; page: number; total: number };\n};\n\nconst fetchUser = async (id: number) =&gt; {\n  const { data } = await axios.get(`/api/users/${id}`);\n  return data as { id: number; name: string };\n};\n\nexport function UsersList({ page, q }: { page: number; q?: string }) {\n  const { data, isLoading } = useQuery({\n    queryKey: usersKeys.list({ page, q }),\n    queryFn: () =&gt; fetchUsers({ page, q }),\n    staleTime: 60_000,\n  });\n\n  if (isLoading) return &lt;p&gt;Loading...&lt;/p&gt;;\n  return &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;;\n}\n\nexport function UserDetail({ id }: { id: number }) {\n  const { data } = useQuery({\n    queryKey: usersKeys.detail(id),\n    queryFn: () =&gt; fetchUser(id),\n  });\n  return &lt;div&gt;{data?.name}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#b-cache-management","title":"B. Cache Management","text":"<ul> <li>React Query caches data by query key.</li> <li>Multiple components using the same key share the same cache entry.</li> <li>Key cache operations you\u2019ll use daily:</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#1-invalidation-queryclientinvalidatequeries","title":"1. Invalidation (queryClient.invalidateQueries)","text":"<p>Marks matching queries as stale and triggers refetch for active ones.</p> <pre><code>import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { usersKeys } from './keys/users';\n\ntype NewUser = { name: string };\n\nconst createUser = (payload: NewUser) =&gt; axios.post('/api/users', payload);\n\nexport function CreateUserButton() {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: createUser,\n    onSuccess: () =&gt; {\n      // Invalidate all user list queries (any filters)\n      queryClient.invalidateQueries({ queryKey: usersKeys.lists() });\n      // Or invalidate a single detail:\n      // queryClient.invalidateQueries({ queryKey: usersKeys.detail(id) });\n    },\n  });\n\n  return (\n    &lt;button onClick={() =&gt; mutation.mutate({ name: 'Alice' })}&gt;\n      Create User\n    &lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li>Notes</li> <li>Use exact: true to target a single key only.</li> <li>Without exact, partial-match behavior applies (e.g., <code>['users', 'list']</code> will match <code>['users', 'list', {...filters}]</code>).</li> </ul> <pre><code>// Exact invalidation (only that specific key)\nqueryClient.invalidateQueries({\n  queryKey: usersKeys.detail(42),\n  exact: true,\n});\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#2-refetching-queryclientrefetchqueries","title":"2. Refetching (queryClient.refetchQueries)","text":"<ul> <li>Actively refetch matching queries now, even if they are still fresh.</li> </ul> <pre><code>// Force refetch all active user lists\nawait queryClient.refetchQueries({\n  queryKey: usersKeys.lists(),\n  type: 'active',      // 'active' | 'inactive' | 'all'\n});\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#3-prefetching-queryclientprefetchquery","title":"3. Prefetching (queryClient.prefetchQuery)","text":"<ul> <li>Warm the cache before a component mounts or a route changes.</li> </ul> <pre><code>import { queryClient } from './queryClient'; // your app-level instance\nimport { usersKeys } from './keys/users';\nimport axios from 'axios';\n\nconst fetchUsers = async (filters: { page?: number }) =&gt; {\n  const { data } = await axios.get('/api/users', { params: filters });\n  return data;\n};\n\n// Example: prefetch on link hover\nexport function UsersLink() {\n  const prefetch = () =&gt;\n    queryClient.prefetchQuery({\n      queryKey: usersKeys.list({ page: 1 }),\n      queryFn: () =&gt; fetchUsers({ page: 1 }),\n      staleTime: 30_000,\n    });\n\n  return (\n    &lt;a href=\"/users\" onMouseEnter={prefetch}&gt;\n      Users\n    &lt;/a&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#4-manual-cache-updates-setquerydata-getquerydata","title":"4. Manual cache updates (setQueryData, getQueryData)","text":"<ul> <li>Update cached data synchronously without refetching. Great after mutations or for optimistic UI.</li> </ul> <pre><code>import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { usersKeys } from './keys/users';\n\ntype User = { id: number; name: string };\nconst updateUser = (id: number, payload: Partial&lt;User&gt;) =&gt;\n  axios.put(`/api/users/${id}`, payload).then(r =&gt; r.data as User);\n\nexport function RenameUser({ id }: { id: number }) {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: (name: string) =&gt; updateUser(id, { name }),\n    onMutate: async (newName) =&gt; {\n      await queryClient.cancelQueries({ queryKey: usersKeys.detail(id) });\n\n      const prev = queryClient.getQueryData&lt;User&gt;(usersKeys.detail(id));\n\n      // Optimistically update the user detail\n      queryClient.setQueryData&lt;User&gt;(usersKeys.detail(id), (old) =&gt;\n        old ? { ...old, name: newName } : old\n      );\n\n      // Optionally update any lists that contain this user\n      queryClient.setQueryData&lt;{ items: User[] } | undefined&gt;(\n        usersKeys.list({ page: 1 }), // example: known list\n        (old) =&gt;\n          old\n            ? {\n                ...old,\n                items: old.items.map((u) =&gt; (u.id === id ? { ...u, name: newName } : u)),\n              }\n            : old\n      );\n\n      return { prev };\n    },\n    onError: (_err, _vars, ctx) =&gt; {\n      // Rollback on error\n      if (ctx?.prev) {\n        queryClient.setQueryData(usersKeys.detail(id), ctx.prev);\n      }\n    },\n    onSettled: () =&gt; {\n      // Ensure server truth wins eventually\n      queryClient.invalidateQueries({ queryKey: usersKeys.detail(id) });\n      queryClient.invalidateQueries({ queryKey: usersKeys.lists() });\n    },\n  });\n\n  return (\n    &lt;button onClick={() =&gt; mutation.mutate('New Name')}&gt;\n      Rename\n    &lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li>Quick utilities</li> </ul> <pre><code>// Read cache (undefined if not present)\nconst cached = queryClient.getQueryData(usersKeys.detail(42));\n\n// Write/replace cache synchronously\nqueryClient.setQueryData(usersKeys.detail(42), { id: 42, name: 'Alice' });\n\n// Ensure (get if present, otherwise fetch)\nconst user = await queryClient.ensureQueryData({\n  queryKey: usersKeys.detail(42),\n  queryFn: () =&gt; axios.get('/api/users/42').then(r =&gt; r.data),\n});\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#c-how-staleness-and-garbage-collection-affect-cache","title":"C. How staleness and garbage collection affect cache","text":"<ul> <li>staleTime: How long data is considered fresh. Fresh data won\u2019t refetch on focus/mount by default.</li> <li>gcTime: How long inactive cache entries live before being garbage-collected.</li> <li>Data can be fresh in cache and reused instantly, stale but still available (may refetch), or gc\u2019ed (removed, requires new fetch).</li> </ul> <pre><code>useQuery({\n  queryKey: usersKeys.list({ page: 1 }),\n  queryFn: () =&gt; fetchUsers({ page: 1 }),\n  staleTime: 60_000, // stays fresh for 1 min\n  gcTime: 300_000,   // kept in cache for 5 min after unused\n});\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#d-choosing-between-invalidation-vs-manual-updates","title":"D. Choosing between invalidation vs manual updates","text":"<ul> <li>Use invalidation when:<ul> <li>You don\u2019t know which lists/filters are affected.</li> <li>The update is complex or server-side logic changes the shape.</li> </ul> </li> <li>Use setQueryData when:<ul> <li>You know exactly which key(s) to update.</li> <li>You want instant UI (optimistic updates) and will still invalidate afterward to reconcile.</li> </ul> </li> </ul> <pre><code>// Simple flow after mutation:\nonSuccess: () =&gt; {\n  queryClient.invalidateQueries({ queryKey: usersKeys.lists() });\n  queryClient.invalidateQueries({ queryKey: usersKeys.detail(id) });\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#3-fetching-patterns","title":"3\ufe0f\u20e3 Fetching Patterns","text":""},{"location":"reactapi/14.5.2.React%20Query/#basic-get-requests","title":"\ud83d\udd39 Basic GET Requests","text":"<p>Use <code>useQuery</code> to fetch simple data.</p> <pre><code>import { useQuery } from \"@tanstack/react-query\";\n\nconst fetchUsers = async () =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  return res.json();\n};\n\nexport default function Users() {\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"users\"],\n    queryFn: fetchUsers,\n  });\n\n  if (isLoading) return &lt;p&gt;Loading...&lt;/p&gt;;\n  if (error) return &lt;p&gt;Error fetching users&lt;/p&gt;;\n\n  return (\n    &lt;ul&gt;\n      {data.map((user: any) =&gt; (\n        &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#dependent-queries","title":"\ud83d\udd39 Dependent Queries","text":"<p>Run query B only after A succeeds.</p> <pre><code>import { useQuery } from \"@tanstack/react-query\";\n\nconst fetchUser = async (id: number) =&gt;\n  (await fetch(`https://jsonplaceholder.typicode.com/users/${id}`)).json();\n\nconst fetchPostsByUser = async (id: number) =&gt;\n  (await fetch(`https://jsonplaceholder.typicode.com/users/${id}/posts`)).json();\n\nexport default function DependentQueries() {\n  const userId = 1;\n\n  const { data: user } = useQuery({\n    queryKey: [\"user\", userId],\n    queryFn: () =&gt; fetchUser(userId),\n  });\n\n  const { data: posts } = useQuery({\n    queryKey: [\"posts\", user?.id],\n    queryFn: () =&gt; fetchPostsByUser(user!.id),\n    enabled: !!user, // Run only when user is loaded\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{user?.name}'s Posts&lt;/h2&gt;\n      &lt;ul&gt;\n        {posts?.map((p: any) =&gt; (\n          &lt;li key={p.id}&gt;{p.title}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#paginated-queries","title":"\ud83d\udd39 Paginated Queries","text":"<p>Page-based fetching with useQuery.</p> <pre><code>import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst fetchPage = async (page: number) =&gt;\n  (await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&amp;_limit=5`)).json();\n\nexport default function PaginatedQuery() {\n  const [page, setPage] = useState(1);\n\n  const { data, isLoading } = useQuery({\n    queryKey: [\"posts\", page],\n    queryFn: () =&gt; fetchPage(page),\n    keepPreviousData: true, // Keeps old data while fetching new\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;ul&gt;\n        {data?.map((post: any) =&gt; (\n          &lt;li key={post.id}&gt;{post.title}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n      &lt;button onClick={() =&gt; setPage((p) =&gt; Math.max(p - 1, 1))}&gt;Previous&lt;/button&gt;\n      &lt;button onClick={() =&gt; setPage((p) =&gt; p + 1)}&gt;Next&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#infinite-queries","title":"\ud83d\udd39 Infinite Queries","text":"<p>Cursor-based infinite scroll with useInfiniteQuery.</p> <pre><code>import { useInfiniteQuery } from \"@tanstack/react-query\";\n\nconst fetchPosts = async ({ pageParam = 1 }) =&gt;\n  (await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${pageParam}&amp;_limit=5`)).json();\n\nexport default function InfiniteQuery() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = useInfiniteQuery({\n    queryKey: [\"infinitePosts\"],\n    queryFn: fetchPosts,\n    getNextPageParam: (lastPage, allPages) =&gt;\n      lastPage.length ? allPages.length + 1 : undefined,\n  });\n\n  return (\n    &lt;div&gt;\n      {data?.pages.map((page, i) =&gt; (\n        &lt;ul key={i}&gt;\n          {page.map((post: any) =&gt; (\n            &lt;li key={post.id}&gt;{post.title}&lt;/li&gt;\n          ))}\n        &lt;/ul&gt;\n      ))}\n      &lt;button onClick={() =&gt; fetchNextPage()} disabled={!hasNextPage || isFetchingNextPage}&gt;\n        {isFetchingNextPage ? \"Loading...\" : \"Load More\"}\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#conditional-queries","title":"\ud83d\udd39 Conditional Queries","text":"<p>Control query execution using enabled.</p> <pre><code>import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst fetchUser = async (id: number) =&gt;\n  (await fetch(`https://jsonplaceholder.typicode.com/users/${id}`)).json();\n\nexport default function ConditionalQuery() {\n  const [userId, setUserId] = useState&lt;number | null&gt;(null);\n\n  const { data, isLoading } = useQuery({\n    queryKey: [\"user\", userId],\n    queryFn: () =&gt; fetchUser(userId!),\n    enabled: !!userId, // Run only when userId exists\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setUserId(1)}&gt;Load User&lt;/button&gt;\n      {isLoading &amp;&amp; &lt;p&gt;Loading...&lt;/p&gt;}\n      {data &amp;&amp; &lt;p&gt;{data.name}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#4-mutations","title":"4\ufe0f\u20e3 Mutations","text":""},{"location":"reactapi/14.5.2.React%20Query/#basic-mutation","title":"Basic Mutation","text":"<p>Create, update, or delete data.</p> <pre><code>import { useMutation } from \"@tanstack/react-query\";\n\nasync function addTodoApi(newTodo: string) {\n  return { id: Date.now(), text: newTodo };\n}\n\nexport default function BasicMutation() {\n  const mutation = useMutation({\n    mutationFn: addTodoApi,\n    onSuccess: (data) =&gt; {\n      console.log(\"Added:\", data);\n    },\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; mutation.mutate(\"Learn React Query\")}&gt;\n        Add Todo\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#optimistic-updates","title":"Optimistic Updates","text":"<p>Update UI before mutation is confirmed.</p> <pre><code>import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\nasync function addTodoApi(newTodo: string) {\n  return { id: Date.now(), text: newTodo };\n}\n\nexport default function OptimisticUpdate() {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: addTodoApi,\n    onMutate: async (newTodo) =&gt; {\n      await queryClient.cancelQueries({ queryKey: [\"todos\"] });\n\n      const previousTodos = queryClient.getQueryData&lt;{ id: number; text: string }[]&gt;([\"todos\"]);\n\n      queryClient.setQueryData([\"todos\"], (old: any) =&gt; [\n        ...(old || []),\n        { id: Date.now(), text: newTodo },\n      ]);\n\n      return { previousTodos };\n    },\n    onError: (_err, _newTodo, context) =&gt; {\n      queryClient.setQueryData([\"todos\"], context?.previousTodos);\n    },\n    onSettled: () =&gt; {\n      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n    },\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; mutation.mutate(\"Optimistic Todo\")}&gt;\n        Add Optimistic Todo\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#error-handling","title":"Error Handling","text":"<p>Rollback updates on failure.</p> <pre><code>import { useMutation } from \"@tanstack/react-query\";\n\nasync function failApi() {\n  throw new Error(\"Something went wrong!\");\n}\n\nexport default function ErrorHandling() {\n  const mutation = useMutation({\n    mutationFn: failApi,\n    onError: (error: Error) =&gt; {\n      alert(error.message);\n    },\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; mutation.mutate()}&gt;\n        Trigger Error\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#invalidate-queries","title":"Invalidate Queries","text":"<p>Automatically refresh related queries after mutation.</p> <pre><code>import { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\nasync function addTodoApi(newTodo: string) {\n  return { id: Date.now(), text: newTodo };\n}\n\nexport default function InvalidateQueries() {\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation({\n    mutationFn: addTodoApi,\n    onSuccess: () =&gt; {\n      queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n    },\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; mutation.mutate(\"Invalidate Todo\")}&gt;\n        Add &amp; Refresh\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#5-query-lifecycle-refetching","title":"5\ufe0f\u20e3 Query Lifecycle &amp; Refetching","text":"<ul> <li>Stale vs Fresh Data</li> <li>Refetch on window focus</li> <li>Refetch on reconnect</li> <li>Polling / Interval Refetching</li> <li>Suspense Mode<ul> <li>Use with React Suspense for declarative loading states.</li> </ul> </li> </ul> <pre><code>\"use client\";\n\nimport { Suspense } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n// Fake APIs\nasync function fetchUser() {\n  return { id: 1, name: \"Alice\" };\n}\nasync function fetchMessage() {\n  return \"Hello from server\";\n}\nasync function fetchStatus() {\n  return \"Network status OK\";\n}\nasync function fetchTime() {\n  return new Date().toLocaleTimeString();\n}\nasync function fetchProfile() {\n  return { name: \"Sourav\", role: \"Frontend Dev\" };\n}\n\n// --- Suspense child ---\nfunction Profile() {\n  const { data } = useQuery({\n    queryKey: [\"profile\"],\n    queryFn: fetchProfile,\n    suspense: true,\n  });\n  return &lt;p&gt;\ud83d\udc64 Profile: {data?.name} - {data?.role}&lt;/p&gt;;\n}\n\nexport default function RefetchingDemo() {\n  // 1. Stale vs Fresh\n  const userQuery = useQuery({\n    queryKey: [\"user\"],\n    queryFn: fetchUser,\n    staleTime: 5000, // stays fresh for 5 sec\n  });\n\n  // 2. Refetch on focus\n  const messageQuery = useQuery({\n    queryKey: [\"message\"],\n    queryFn: fetchMessage,\n    refetchOnWindowFocus: true,\n  });\n\n  // 3. Refetch on reconnect\n  const statusQuery = useQuery({\n    queryKey: [\"status\"],\n    queryFn: fetchStatus,\n    refetchOnReconnect: true,\n  });\n\n  // 4. Polling (every 2 sec)\n  const timeQuery = useQuery({\n    queryKey: [\"time\"],\n    queryFn: fetchTime,\n    refetchInterval: 2000,\n  });\n\n  return (\n    &lt;div style={{ padding: \"1rem\", fontFamily: \"sans-serif\" }}&gt;\n      &lt;h2&gt;\u26a1 React Query Refetching Demo&lt;/h2&gt;\n\n      &lt;h3&gt;1\ufe0f\u20e3 Stale vs Fresh Data&lt;/h3&gt;\n      &lt;p&gt;User: {userQuery.data?.name}&lt;/p&gt;\n      &lt;p&gt;{userQuery.isFetching ? \"Fetching fresh...\" : \"Using cached (fresh) data\"}&lt;/p&gt;\n\n      &lt;h3&gt;2\ufe0f\u20e3 Refetch on Window Focus&lt;/h3&gt;\n      &lt;p&gt;{messageQuery.data}&lt;/p&gt;\n\n      &lt;h3&gt;3\ufe0f\u20e3 Refetch on Reconnect&lt;/h3&gt;\n      &lt;p&gt;{statusQuery.data}&lt;/p&gt;\n\n      &lt;h3&gt;4\ufe0f\u20e3 Polling / Interval Refetching&lt;/h3&gt;\n      &lt;p&gt;Server Time: {timeQuery.data}&lt;/p&gt;\n\n      &lt;h3&gt;5\ufe0f\u20e3 Suspense Mode&lt;/h3&gt;\n      &lt;Suspense fallback={&lt;p&gt;Loading Profile...&lt;/p&gt;}&gt;\n        &lt;Profile /&gt;\n      &lt;/Suspense&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#6-error-handling","title":"6\ufe0f\u20e3 Error Handling","text":"<ul> <li>Global error handling via <code>QueryClient</code>.</li> <li>Per-query error handling using <code>onError</code>.</li> <li>Retry logic and exponential backoff.</li> </ul> <pre><code>\"use client\";\n\nimport { QueryClient, QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\n// -------------------------\n// Fake APIs\n// -------------------------\nasync function fetchFailingApi() {\n  throw new Error(\"\u274c Server is down!\");\n}\n\nasync function fetchSometimesApi() {\n  if (Math.random() &lt; 0.7) throw new Error(\"\u26a0\ufe0f Random failure, try again!\");\n  return \"\u2705 Success after retry!\";\n}\n\n// -------------------------\n// Per-query Error Handling\n// -------------------------\nfunction PerQueryErrorExample() {\n  const { data, error, isError, refetch } = useQuery({\n    queryKey: [\"perQuery\"],\n    queryFn: fetchFailingApi,\n    retry: false, // don't retry here\n    onError: (err: Error) =&gt; {\n      console.log(\"Per-query error handled:\", err.message);\n    },\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;Per-Query Error Handling&lt;/h3&gt;\n      &lt;button onClick={() =&gt; refetch()}&gt;Fetch&lt;/button&gt;\n      {isError &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;Error: {(error as Error).message}&lt;/p&gt;}\n      {data &amp;&amp; &lt;p&gt;{data}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// -------------------------\n// Retry + Exponential Backoff\n// -------------------------\nfunction RetryExample() {\n  const { data, error, isError, isFetching, refetch } = useQuery({\n    queryKey: [\"retryExample\"],\n    queryFn: fetchSometimesApi,\n    retry: 3, // retry up to 3 times\n    retryDelay: (attemptIndex) =&gt; Math.min(1000 * 2 ** attemptIndex, 5000), // exponential backoff\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;Retry with Exponential Backoff&lt;/h3&gt;\n      &lt;button onClick={() =&gt; refetch()}&gt;Fetch&lt;/button&gt;\n      {isFetching &amp;&amp; &lt;p&gt;\u23f3 Trying...&lt;/p&gt;}\n      {isError &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;Error: {(error as Error).message}&lt;/p&gt;}\n      {data &amp;&amp; &lt;p&gt;{data}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// -------------------------\n// Global Error Handling\n// -------------------------\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      onError: (err) =&gt; {\n        console.error(\"\ud83c\udf0d Global error handler:\", (err as Error).message);\n      },\n    },\n  },\n});\n\nfunction GlobalErrorExample() {\n  const { error, isError, refetch } = useQuery({\n    queryKey: [\"globalError\"],\n    queryFn: fetchFailingApi,\n    retry: false,\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;Global Error Handling&lt;/h3&gt;\n      &lt;button onClick={() =&gt; refetch()}&gt;Fetch&lt;/button&gt;\n      {isError &amp;&amp; &lt;p style={{ color: \"red\" }}&gt;Error: {(error as Error).message}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// -------------------------\n// Main Demo Component\n// -------------------------\nexport default function ErrorHandlingDemo() {\n  const [client] = useState(queryClient);\n\n  return (\n    &lt;QueryClientProvider client={client}&gt;\n      &lt;div style={{ padding: \"1rem\", fontFamily: \"sans-serif\" }}&gt;\n        &lt;h2&gt;\u26a1 React Query Error Handling Demo&lt;/h2&gt;\n        &lt;GlobalErrorExample /&gt;\n        &lt;hr /&gt;\n        &lt;PerQueryErrorExample /&gt;\n        &lt;hr /&gt;\n        &lt;RetryExample /&gt;\n      &lt;/div&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#7-advanced-features","title":"7\ufe0f\u20e3 Advanced Features","text":"<ul> <li>Query Cancellation<ul> <li>Cancel in-flight queries when component unmounts.</li> </ul> </li> <li>Background Fetching<ul> <li>Refresh data silently.</li> </ul> </li> <li>Infinite Scrolling<ul> <li>Load more data dynamically as user scrolls.</li> </ul> </li> <li>Prefetching<ul> <li>Preload data before user navigates.</li> </ul> </li> </ul> <pre><code>\"use client\";\n\nimport {\n  QueryClient,\n  QueryClientProvider,\n  useInfiniteQuery,\n  useQuery,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\n\n// -------------------------\n// Fake APIs\n// -------------------------\nasync function fetchUsers(page: number) {\n  await new Promise((res) =&gt; setTimeout(res, 1000)); // simulate delay\n  return Array.from({ length: 5 }, (_, i) =&gt; ({\n    id: page * 10 + i,\n    name: `User ${page * 10 + i}`,\n  }));\n}\n\nasync function fetchProfile() {\n  await new Promise((res) =&gt; setTimeout(res, 800));\n  return { name: \"Alice\", role: \"Admin\" };\n}\n\n// -------------------------\n// 1. Query Cancellation\n// -------------------------\nfunction QueryCancellation() {\n  const { data, isFetching } = useQuery({\n    queryKey: [\"profile\"],\n    queryFn: fetchProfile,\n  });\n\n  // query auto-cancels when component unmounts\n  useEffect(() =&gt; {\n    return () =&gt; {\n      console.log(\"\ud83d\udd34 Query auto-cancelled on unmount\");\n    };\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;1\ufe0f\u20e3 Query Cancellation&lt;/h3&gt;\n      {isFetching ? &lt;p&gt;Loading...&lt;/p&gt; : &lt;p&gt;{data?.name} - {data?.role}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// -------------------------\n// 2. Background Fetching\n// -------------------------\nfunction BackgroundFetching() {\n  const { data, isFetching } = useQuery({\n    queryKey: [\"background\"],\n    queryFn: fetchProfile,\n    refetchInterval: 5000, // refresh silently every 5s\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;2\ufe0f\u20e3 Background Fetching&lt;/h3&gt;\n      &lt;p&gt;{data?.name} - {data?.role}&lt;/p&gt;\n      {isFetching &amp;&amp; &lt;p style={{ fontSize: \"12px\" }}&gt;Refreshing in background...&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// -------------------------\n// 3. Infinite Scrolling\n// -------------------------\nfunction InfiniteScroll() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = useInfiniteQuery({\n    queryKey: [\"users\"],\n    queryFn: ({ pageParam = 0 }) =&gt; fetchUsers(pageParam),\n    getNextPageParam: (_lastPage, pages) =&gt; {\n      if (pages.length &lt; 3) return pages.length; // max 3 pages\n      return undefined;\n    },\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;3\ufe0f\u20e3 Infinite Scrolling&lt;/h3&gt;\n      {data?.pages.map((page, i) =&gt; (\n        &lt;div key={i}&gt;\n          {page.map((user) =&gt; (\n            &lt;p key={user.id}&gt;{user.name}&lt;/p&gt;\n          ))}\n        &lt;/div&gt;\n      ))}\n      &lt;button onClick={() =&gt; fetchNextPage()} disabled={!hasNextPage || isFetchingNextPage}&gt;\n        {isFetchingNextPage ? \"Loading...\" : hasNextPage ? \"Load More\" : \"No More\"}\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n// -------------------------\n// 4. Prefetching\n// -------------------------\nfunction Prefetching() {\n  const queryClient = useQueryClient();\n  const [show, setShow] = useState(false);\n\n  const handleHover = () =&gt; {\n    queryClient.prefetchQuery({\n      queryKey: [\"prefetchProfile\"],\n      queryFn: fetchProfile,\n    });\n    console.log(\"\u26a1 Prefetched profile data!\");\n  };\n\n  const { data } = useQuery({\n    queryKey: [\"prefetchProfile\"],\n    queryFn: fetchProfile,\n    enabled: show, // only fetch when shown\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;4\ufe0f\u20e3 Prefetching&lt;/h3&gt;\n      &lt;button onMouseEnter={handleHover} onClick={() =&gt; setShow(true)}&gt;\n        Hover to Prefetch \u2192 Click to Show\n      &lt;/button&gt;\n      {show &amp;&amp; &lt;p&gt;{data?.name} - {data?.role}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\n// -------------------------\n// Main Demo\n// -------------------------\nconst queryClient = new QueryClient();\n\nexport default function AdvancedFeaturesDemo() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;div style={{ padding: \"1rem\", fontFamily: \"sans-serif\" }}&gt;\n        &lt;h2&gt;\u26a1 React Query Advanced Features&lt;/h2&gt;\n        &lt;QueryCancellation /&gt;\n        &lt;hr /&gt;\n        &lt;BackgroundFetching /&gt;\n        &lt;hr /&gt;\n        &lt;InfiniteScroll /&gt;\n        &lt;hr /&gt;\n        &lt;Prefetching /&gt;\n      &lt;/div&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.2.React%20Query/#8-integration-with-axios-fetch","title":"8\ufe0f\u20e3 Integration with Axios / Fetch","text":"<p>React Query does not enforce a specific HTTP client \u2014 you can use Axios or the built-in Fetch API as query functions. The main idea is to return a promise that resolves with the data.</p> <ul> <li>Using Fetch </li> <li>Simple and built into JavaScript.  </li> <li>Ideal for lightweight requests.  </li> <li> <p>Example:  </p> <pre><code>const fetchUsers = async () =&gt; {\n  const res = await fetch('/api/users');\n  if (!res.ok) throw new Error('Network response was not ok');\n  return res.json();\n};\n</code></pre> </li> <li> <p>Using Axios </p> </li> <li>Provides additional features like interceptors, automatic JSON parsing, and better error handling.  </li> <li>Good for projects requiring headers, tokens, or complex configs.  </li> <li> <p>Example:  </p> <pre><code>import axios from 'axios';\n\nconst fetchUsers = async () =&gt; {\n  const res = await axios.get('/api/users', {\n    headers: { Authorization: `Bearer ${token}` }\n  });\n  return res.data;\n};\n</code></pre> </li> <li> <p>When to choose what? </p> </li> <li>Use Fetch if you want a lightweight, dependency-free approach.  </li> <li>Use Axios if you need advanced features like interceptors, request cancellation, or custom headers frequently.  </li> </ul> <p>\ud83d\udd11 Both Fetch and Axios integrate seamlessly with React Query, as long as the function returns a promise.</p>"},{"location":"reactapi/14.5.2.React%20Query/#9-devtools","title":"9\ufe0f\u20e3 DevTools","text":"<p>The React Query Devtools are like a built-in debug dashboard for your app. They let you inspect queries, mutations, cache, and state in real time.</p>"},{"location":"reactapi/14.5.2.React%20Query/#what-you-can-inspect","title":"\ud83d\udccc What You Can Inspect","text":""},{"location":"reactapi/14.5.2.React%20Query/#1-cache","title":"1. Cache","text":"<ul> <li>Shows all queries stored in memory.</li> <li>Expand a query to see:</li> <li>Key \u2192 e.g. <code>[\"todos\"]</code> or <code>[\"user\", id]</code>.</li> <li>Data \u2192 cached server response.</li> <li>Status \u2192 <code>idle</code>, <code>loading</code>, <code>success</code>, or <code>error</code>.</li> <li>Timestamps \u2192 when last updated.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#2-queries","title":"2. Queries","text":"<ul> <li>Inspect which queries are:</li> <li>Fresh \u2192 recently fetched, still valid (<code>staleTime</code> not passed).</li> <li>Stale \u2192 expired, will refetch on usage.</li> <li>Inactive \u2192 cached but not currently rendered.</li> <li>Manually refetch or remove a query.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#3-mutations","title":"3. Mutations","text":"<ul> <li>Inspect create/update/delete requests.</li> <li>See mutation states:</li> <li><code>idle</code>, <code>loading</code>, <code>error</code>, <code>success</code>.</li> <li>Retry or cancel a mutation manually.</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#4-state","title":"4. State","text":"<ul> <li>Debug flags like:</li> <li>isFetching</li> <li>retry count</li> <li>errors</li> <li>Understand why queries are refetching (or not).</li> </ul>"},{"location":"reactapi/14.5.2.React%20Query/#configuration","title":"\u2699\ufe0f Configuration","text":"<ul> <li><code>initialIsOpen</code></li> <li><code>true</code> \u2192 Devtools open by default.</li> <li><code>false</code> \u2192 Closed until user clicks the floating React Query logo.</li> <li>Position can be moved (bottom-right is default).</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/","title":"14.5.3.React Query Ref","text":""},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-query-references","title":"React Query References","text":""},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-query-api-reference-overview","title":"React Query \u2014 API Reference Overview","text":"<p>To know more check TanStack Documentation here are links:</p> API Purpose / Definition 1. QueryClientProvider Root provider for React Query. Must wrap your app for queries to work. 2. useQuery Core hook for fetching, caching, and updating server data. 3. useMutation Hook for performing create, update, or delete operations. 4. useQueryClient Access and manipulate the query cache manually. 5 . useQueries Run multiple independent queries in parallel. 6. useInfiniteQuery Manage pagination or infinite scrolling of data. 7. useIsFetching Track ongoing query fetch operations globally. 8. useIsMutating Track ongoing mutation operations globally. 9. useMutationState Track mutation states globally. 10. usePrefetchQuery Preload query data before component mount. 11. usePrefetchInfiniteQuery Preload infinite query data before component mount. 12. useSuspenseQuery Suspense-enabled version of <code>useQuery</code>. 13. useSuspenseInfiniteQuery Suspense-enabled version of <code>useInfiniteQuery</code>. 14. useSuspenseQueries Suspense-enabled version of <code>useQueries</code>. 15. useQueryErrorResetBoundary Hook to integrate with error boundaries for queries. 16. QueryErrorResetBoundary Component for handling and resetting query errors. 17. Hydration Utilities Functions for server-side rendering and hydration of queries."},{"location":"reactapi/14.5.3.React%20Query%20Ref/#1-queryclientprovider","title":"1. QueryClientProvider","text":"<pre><code>import { QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\n// Create a Client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // every defalut query you want to give goes here.\n    }\n  }\n});\n\nfunction App() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;MyAppComponents /&gt;\n      {/* if you want to use react query devtools */}\n      &lt;ReactQueryDevtools initialIsOpen={false} /&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#2-usequery","title":"2. useQuery","text":"<pre><code>const {\n  data,\n  dataUpdatedAt,\n  error,\n  errorUpdatedAt,\n  failureCount,\n  failureReason,\n  fetchStatus,\n  isError,\n  isFetched,\n  isFetchedAfterMount,\n  isFetching,\n  isInitialLoading,\n  isLoading,\n  isLoadingError,\n  isPaused,\n  isPending,\n  isPlaceholderData,\n  isRefetchError,\n  isRefetching,\n  isStale,\n  isSuccess,\n  isEnabled,\n  promise,\n  refetch,\n  status,\n} = useQuery(\n  {\n    queryKey,\n    queryFn,\n    gcTime,\n    enabled,\n    networkMode,\n    initialData,\n    initialDataUpdatedAt,\n    meta,\n    notifyOnChangeProps,\n    placeholderData,\n    queryKeyHashFn,\n    refetchInterval,\n    refetchIntervalInBackground,\n    refetchOnMount,\n    refetchOnReconnect,\n    refetchOnWindowFocus,\n    retry,\n    retryOnMount,\n    retryDelay,\n    select,\n    staleTime,\n    structuralSharing,\n    subscribed,\n    throwOnError,\n  },\n  queryClient,\n)\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-usequery-key-options","title":"React useQuery: Key Options","text":"<ul> <li> <p> queryKey </p> <ul> <li>Unique key identifying the query in the cache.  </li> <li>Can be a string or array (for dynamic keys).  </li> </ul> </li> <li> <p> queryFn </p> <ul> <li>Function that fetches the data.  </li> <li>Must return a promise.  </li> </ul> </li> <li> <p> staleTime </p> <ul> <li>Time (ms) that data is considered \"fresh.\"  </li> <li>Default: 0 (data is stale immediately).  </li> </ul> </li> <li> <p> cacheTime </p> <ul> <li>Time (ms) that unused data stays in memory before garbage collection.  </li> <li>Default: 5 minutes.  </li> </ul> </li> <li> <p> enabled </p> <ul> <li>Boolean to enable/disable the query.  </li> <li>Useful for conditional queries.  </li> </ul> </li> <li> <p> refetchOnMount </p> <ul> <li>Controls whether to refetch when the component mounts.  </li> <li>Options: <code>true | false | 'always'</code>.  </li> </ul> </li> <li> <p> refetchOnWindowFocus </p> <ul> <li>Controls whether to refetch when the browser window gains focus.  </li> <li>Options: <code>true | false | 'always'</code>.  </li> </ul> </li> <li> <p> refetchOnReconnect </p> <ul> <li>Refetch when the network reconnects.  </li> <li>Options: <code>true | false | 'always'</code>.  </li> </ul> </li> <li> <p> retry </p> <ul> <li>Number of retry attempts if the query fails.  </li> <li>Can be a number or a function returning a boolean.  </li> <li>Default: 3.  </li> </ul> </li> <li> <p> retryDelay </p> <ul> <li>Delay (ms) between retry attempts.  </li> <li>Can be a number or a function.  </li> </ul> </li> <li> <p> onSuccess </p> <ul> <li>Callback fired when the query succeeds.  </li> </ul> </li> <li> <p> onError </p> <ul> <li>Callback fired when the query fails.  </li> </ul> </li> <li> <p> onSettled </p> <ul> <li>Callback fired when the query finishes, regardless of success or error.  </li> </ul> </li> <li> <p> select </p> <ul> <li>Transform or map the fetched data before returning it.  </li> </ul> </li> <li> <p> initialData </p> <ul> <li>Provides default data before the query resolves.  </li> </ul> </li> <li> <p> placeholderData </p> <ul> <li>Data to display while the query is loading.  </li> </ul> </li> <li> <p> keepPreviousData </p> <ul> <li>Keeps previous query data while fetching new data (useful for pagination).  </li> </ul> </li> <li> <p> structuralSharing </p> <ul> <li>Controls how updates to data affect reference equality (default: shallow).  </li> </ul> </li> <li> <p> refetchInterval </p> <ul> <li>Automatically refetch the query every X ms.  </li> <li>Can be a number or <code>false</code> to disable.  </li> </ul> </li> <li> <p> refetchIntervalInBackground </p> <ul> <li>If true, refetch interval continues even when the window is not focused.  </li> </ul> </li> <li> <p> onSettled </p> <ul> <li>Callback that runs after the query completes (success or error).  </li> </ul> </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-usequery-returns","title":"React useQuery: Returns","text":"<ul> <li> <p> data</p> <ul> <li>The resolved data from the query function.</li> <li><code>undefined</code> if data hasn\u2019t been fetched yet.</li> </ul> </li> <li> <p> error</p> <ul> <li>The error object if the query fails.</li> <li><code>null</code> if no error.</li> </ul> </li> <li> <p> isLoading</p> <ul> <li><code>true</code> while the query is in its initial loading state.</li> <li>Only true on the first fetch.</li> </ul> </li> <li> <p> isFetching</p> <ul> <li><code>true</code> whenever the query is fetching data (initial or background refetch).</li> <li>Useful to show loading indicators even on background updates.</li> </ul> </li> <li> <p> isError</p> <ul> <li><code>true</code> if the query has encountered an error.</li> </ul> </li> <li> <p> isSuccess</p> <ul> <li><code>true</code> if the query successfully fetched data.</li> </ul> </li> <li> <p> isIdle</p> <ul> <li><code>true</code> if the query is disabled (<code>enabled: false</code>) and hasn\u2019t run yet.</li> </ul> </li> <li> <p> refetch</p> <ul> <li>Function to manually refetch the query.</li> </ul> </li> <li> <p> status</p> <ul> <li>Overall status of the query: <code>\"idle\" | \"loading\" | \"error\" | \"success\"</code>.</li> </ul> </li> <li> <p> failureCount</p> <ul> <li>Number of times the query has failed.</li> </ul> </li> <li> <p> isFetched</p> <ul> <li><code>true</code> if the query has been fetched at least once, regardless of success or error.</li> </ul> </li> <li> <p> isFetchedAfterMount</p> <ul> <li><code>true</code> if the query has been fetched after the component mounted.</li> </ul> </li> <li> <p> dataUpdatedAt</p> <ul> <li>Timestamp (ms) when the data was last updated.</li> </ul> </li> <li> <p> errorUpdatedAt</p> <ul> <li>Timestamp (ms) when the error was last updated.</li> </ul> </li> <li> <p> remove</p> <ul> <li>Function to manually remove the query from the cache.</li> </ul> </li> <li> <p> refetchOnWindowFocus</p> <ul> <li>Boolean indicating if the query will refetch when the window regains focus (from options).</li> </ul> </li> <li> <p> refetchOnReconnect</p> <ul> <li>Boolean indicating if the query will refetch when network reconnects.</li> </ul> </li> <li> <p> isStale</p> <ul> <li>Boolean indicating whether the data is stale according to <code>staleTime</code>.</li> </ul> </li> <li> <p> isPlaceholderData</p> <ul> <li>Boolean indicating whether the query is using placeholder data.</li> </ul> </li> <li> <p> isPreviousData</p> <ul> <li>Boolean indicating whether the data is from a previous query while fetching new data.</li> </ul> </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#3-usemutation","title":"3. useMutation","text":"<p>Purpose: Used to perform mutations (create, update, delete operations) against a server or API. Unlike <code>useQuery</code>, it does not run automatically \u2014 you trigger it manually.</p> <pre><code>const {\n  data,\n  error,\n  failureCount,\n  failureReason,\n  isError,\n  isIdle,\n  isPending,\n  isPaused,\n  isSuccess,\n  isLoading,\n  mutate, \n  mutateAsync,\n  reset,\n  status,\n  submittedAt,\n} = useMutation(\n  {\n    mutationFn,\n    mutationKey,\n    gcTime,\n    networkMode,\n    meta,\n    onMutate,\n    onSuccess,\n    onError,\n    onSettled,\n    retry,\n    retryDelay,\n    throwOnError,\n  },\n  // (Optional) QueryClient instance\n  queryClient\n)\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-usemutation-key-options","title":"React useMutation: Key Options","text":"<ul> <li> <p> mutationFn \u2192 (Function) </p> <ul> <li>The function that performs the mutation (e.g., POST, PUT, DELETE request).</li> </ul> </li> <li> <p> mutationKey \u2192 (Optional, Array | String) </p> <ul> <li>Unique key to identify the mutation. Helps with caching and devtools.</li> </ul> </li> <li> <p> onMutate \u2192 (Callback) </p> <ul> <li>Runs before the mutation function. Useful for optimistic updates.  </li> <li><code>(variables) =&gt; context</code></li> </ul> </li> <li> <p> onSuccess \u2192 (Callback) </p> <ul> <li>Runs when the mutation succeeds.  </li> <li><code>(data, variables, context) =&gt; void</code></li> </ul> </li> <li> <p> onError \u2192 (Callback) </p> <ul> <li>Runs if the mutation fails.  </li> <li><code>(error, variables, context) =&gt; void</code></li> </ul> </li> <li> <p> onSettled \u2192 (Callback) </p> <ul> <li>Runs after mutation is either success or error.  </li> <li><code>(data, error, variables, context) =&gt; void</code></li> </ul> </li> <li> <p> retry \u2192 (Boolean | Number | Function) </p> <ul> <li>Number of retry attempts if the mutation fails. Default: <code>false</code>.</li> </ul> </li> <li> <p> retryDelay \u2192 (Number | Function) </p> <ul> <li>Delay between retries in ms.</li> </ul> </li> <li> <p> useErrorBoundary \u2192 (Boolean | (error) =&gt; boolean) </p> <ul> <li>Whether to propagate mutation errors to an error boundary.</li> </ul> </li> <li> <p> meta \u2192 (Object) </p> <ul> <li>Arbitrary metadata you can attach to the mutation.</li> </ul> </li> <li> <p> networkMode \u2192 (string) </p> <ul> <li>Control when the mutation runs: <code>\"online\"</code>, <code>\"always\"</code>, etc.</li> </ul> </li> <li> <p> gcTime \u2192 (number) </p> <ul> <li>Time in ms before inactive mutations are garbage collected. Default: 5 minutes.</li> </ul> </li> <li> <p> scope \u2192 (string) </p> <ul> <li>Advanced \u2014 scope of the mutation for queryClient.</li> </ul> </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-usemutation-return-values","title":"React useMutation: Return Values","text":"<p>The object returned from <code>useMutation</code> contains:</p> <ul> <li> <p> mutate</p> <ul> <li>Function to trigger mutation.  </li> <li><code>mutate(variables, { onSuccess, onError, onSettled })</code></li> </ul> </li> <li> <p> mutateAsync</p> <ul> <li>Promise-based version of <code>mutate</code>.  </li> <li><code>await mutateAsync(variables)</code></li> </ul> </li> <li> <p> status</p> <ul> <li>Current status of the mutation.  </li> <li><code>\"idle\" | \"pending\" | \"success\" | \"error\"</code></li> </ul> </li> <li> <p> data</p> <ul> <li>Data returned from the mutation (on success).</li> </ul> </li> <li> <p> error</p> <ul> <li>Error object (if mutation fails).</li> </ul> </li> <li> <p> isIdle</p> <ul> <li><code>true</code> if mutation has not started.</li> </ul> </li> <li> <p> isPending</p> <ul> <li><code>true</code> if mutation is in progress.</li> </ul> </li> <li> <p> isLoading</p> <ul> <li>Alias for <code>isPending</code>.</li> </ul> </li> <li> <p> isSuccess</p> <ul> <li><code>true</code> if mutation succeeded.</li> </ul> </li> <li> <p> isError</p> <ul> <li><code>true</code> if mutation failed.</li> </ul> </li> <li> <p> variables</p> <ul> <li>The last variables passed into <code>mutate</code>.</li> </ul> </li> <li> <p> submittedAt</p> <ul> <li>Timestamp of the last mutation trigger.</li> </ul> </li> <li> <p> context</p> <ul> <li>The value returned from <code>onMutate</code>.</li> </ul> </li> <li> <p> reset</p> <ul> <li>Reset mutation state back to <code>idle</code>.</li> </ul> </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#4-usequeryclient","title":"4. useQueryClient","text":"<p>Purpose: <code>useQueryClient</code> is a React Query hook that provides direct access to the QueryClient instance. The <code>QueryClient</code> is the core manager that stores, manages, and controls all queries and mutations in your app. By using this hook, you can imperatively interact with cached data, trigger refetches, reset or remove queries, and control mutations globally.  </p> <p>This is especially useful for:  </p> <ul> <li>Optimistic Updates (update cache before server responds)  </li> <li>Manual Cache Manipulation (set, update, or clear data without a query running)  </li> <li>Global Invalidations (e.g., when user logs out, clear sensitive queries)  </li> <li>Prefetching Data before navigation  </li> <li>Managing Mutations at a global level  </li> </ul> <pre><code>import React from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\n\n// Fake API\nconst fetchTodos = async () =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=3\");\n  return res.json();\n};\n\nexport default function TodoApp() {\n  const queryClient = useQueryClient();\n\n  // Normal query\n  const { data: todos } = useQuery({\n    queryKey: [\"todos\"],\n    queryFn: fetchTodos,\n  });\n\n  // Example handler that uses multiple queryClient methods\n  const handleActions = async () =&gt; {\n    // 1\ufe0f\u20e3 Get cached data\n    const existing = queryClient.getQueryData([\"todos\"]);\n    console.log(\"Existing cached data:\", existing);\n\n    // 2\ufe0f\u20e3 Set cached data (optimistic update)\n    queryClient.setQueryData([\"todos\"], (old: any) =&gt; [\n      ...(old || []),\n      { id: Date.now(), title: \"New Optimistic Todo\", completed: false },\n    ]);\n\n    // 3\ufe0f\u20e3 Invalidate queries (refetch in background)\n    queryClient.invalidateQueries({ queryKey: [\"todos\"] });\n\n    // 4\ufe0f\u20e3 Prefetch (store in cache without using immediately)\n    await queryClient.prefetchQuery({\n      queryKey: [\"todo\", 1],\n      queryFn: () =&gt;\n        fetch(\"https://jsonplaceholder.typicode.com/todos/1\").then((r) =&gt;\n          r.json()\n        ),\n    });\n\n    // 5\ufe0f\u20e3 Fetch query imperatively (returns data)\n    const todo1 = await queryClient.fetchQuery({\n      queryKey: [\"todo\", 1],\n      queryFn: () =&gt;\n        fetch(\"https://jsonplaceholder.typicode.com/todos/1\").then((r) =&gt;\n          r.json()\n        ),\n    });\n    console.log(\"Fetched todo1:\", todo1);\n\n    // 6\ufe0f\u20e3 Cancel in-flight queries\n    await queryClient.cancelQueries({ queryKey: [\"todos\"] });\n\n    // 7\ufe0f\u20e3 Reset queries (clear state + refetch if active)\n    queryClient.resetQueries({ queryKey: [\"todos\"] });\n\n    // 8\ufe0f\u20e3 Remove queries (clear completely from cache)\n    queryClient.removeQueries({ queryKey: [\"todo\", 1] });\n  };\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;h2&gt;Todos&lt;/h2&gt;\n      &lt;button\n        onClick={handleActions}\n        className=\"bg-blue-500 text-white px-3 py-1 rounded\"\n      &gt;\n        Run QueryClient Actions\n      &lt;/button&gt;\n      &lt;ul&gt;\n        {todos?.map((todo: any) =&gt; (\n          &lt;li key={todo.id}&gt;\n            {todo.title} {todo.completed ? \"\u2705\" : \"\u274c\"}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#key-methods-on-queryclient","title":"\ud83d\udd11 Key Methods on QueryClient","text":""},{"location":"reactapi/14.5.3.React%20Query%20Ref/#1-getquerydataquerykey","title":"1. getQueryData(queryKey)","text":"<ul> <li>Retrieves cached data for a specific query key.  </li> <li>Returns <code>undefined</code> if no cache exists.  </li> <li>Useful for reading current data without triggering a network request.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#2-setquerydataquerykey-updaterfnordata","title":"2. setQueryData(queryKey, updaterFnOrData)","text":"<ul> <li>Manually sets or updates the cached data for a query.  </li> <li><code>updaterFnOrData</code> can be:  </li> <li>Direct data \u2192 replaces the cache.  </li> <li>Function \u2192 receives the previous value and returns the new one.  </li> <li>Used for optimistic updates (update UI immediately).  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#3-fetchqueryquerykey-queryfn-options","title":"3. fetchQuery(queryKey, queryFn, options?)","text":"<ul> <li>Executes a query function and caches the result.  </li> <li>Will fetch from network if cache is stale or missing.  </li> <li>Returns a promise with the resolved data.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#4-prefetchqueryquerykey-queryfn-options","title":"4. prefetchQuery(queryKey, queryFn, options?)","text":"<ul> <li>Similar to <code>fetchQuery</code> but intended for warming up the cache.  </li> <li>Doesn\u2019t return data directly to components, just caches it.  </li> <li>Commonly used for preloading data before navigation.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#5-invalidatequeriesquerykey-options","title":"5. invalidateQueries(queryKey?, options?)","text":"<ul> <li>Marks queries as stale, forcing them to refetch the next time they are used.  </li> <li>Can be called with:  </li> <li>A specific key \u2192 invalidates only that query.  </li> <li>No key \u2192 invalidates all queries.  </li> <li>Useful after a mutation to refresh related data.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#6-removequeriesquerykey-options","title":"6. removeQueries(queryKey?, options?)","text":"<ul> <li>Completely removes queries from the cache.  </li> <li>Unlike invalidation, this deletes them (they won\u2019t refetch unless mounted again).  </li> <li>Useful for clearing sensitive or outdated data.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#7-resetqueriesquerykey-options","title":"7. resetQueries(queryKey?, options?)","text":"<ul> <li>Resets queries back to their initial state (<code>idle</code>).  </li> <li>They will refetch automatically if mounted.  </li> <li>Often used when a user logs out and you want a fresh state.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#8-cancelqueriesquerykey-options","title":"8. cancelQueries(queryKey?, options?)","text":"<ul> <li>Cancels any in-flight (ongoing) requests for queries.  </li> <li>Can target a specific query or all queries.  </li> <li>Useful when navigating away from a page or avoiding duplicate requests.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#9-refetchqueriesquerykey-options","title":"9. refetchQueries(queryKey?, options?)","text":"<ul> <li>Manually refetches queries from the server.  </li> <li>Can refetch one query, multiple queries, or all queries.  </li> <li>Useful after actions like refreshing a dashboard or pulling latest data.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#10-getqueriesdataquerykey","title":"10. getQueriesData(queryKey?)","text":"<ul> <li>Returns an array of <code>[queryKey, data]</code> tuples for all cached queries matching the filter.  </li> <li>Helps inspect all cached values at once.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#11-clear","title":"11. clear()","text":"<ul> <li>Clears the entire query + mutation cache.  </li> <li>All data is lost and queries will refetch if mounted again.  </li> <li>Commonly used when logging out or resetting the app state.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#12-setmutationdefaultsmutationkey-options","title":"12. setMutationDefaults(mutationKey, options)","text":"<ul> <li>Set default options (like retry, onSuccess, etc.) for mutations with a specific key.  </li> <li>Helps apply consistent mutation behavior across the app.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#13-getmutationcache","title":"13. getMutationCache()","text":"<ul> <li>Gives direct access to the internal mutation cache.  </li> <li>Advanced usage: manually inspect or manipulate mutation states.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-value","title":"\ud83d\udce6 Return Value","text":"<ul> <li><code>useQueryClient</code> returns the singleton QueryClient instance created at the app root (inside <code>QueryClientProvider</code>).  </li> <li>This single client instance is shared across your entire React app.  </li> <li>By using this, you can globally control queries and mutations, without needing access to the component that created them.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#5-usequeries","title":"5. useQueries","text":"<p>Purpose: <code>useQueries</code> is a React Query hook that allows you to run multiple queries in parallel inside a component. Instead of calling <code>useQuery</code> multiple times, you can batch them together in a single hook for better readability and easier management.  </p> <p>This is useful when:  </p> <ul> <li>You need to fetch different data sources at once (e.g., user info + posts + comments).  </li> <li>You want consistent handling of multiple queries with shared options.  </li> <li>You want to dynamically create queries from an array.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#usage-structure","title":"\ud83d\udd11 Usage Structure","text":"<pre><code>const [userQuery, postsQuery, commentsQuery] = useQueries({\n  queries: [\n    {\n      queryKey: ['user', userId],\n      queryFn: () =&gt; fetchUser(userId),\n      enabled: true,\n      staleTime: 1000 * 60, // 1 min\n    },\n    {\n      queryKey: ['posts', userId],\n      queryFn: () =&gt; fetchPosts(userId),\n      retry: 2,\n    },\n    {\n      queryKey: ['comments', userId],\n      queryFn: () =&gt; fetchComments(userId),\n    },\n  ],\n})\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#options","title":"Options","text":"<p>Each query object inside the <code>queries</code> array accepts the same options as <code>useQuery</code>:</p> <ul> <li>queryKey (Required) \u2192 Unique identifier for the query.  </li> <li>queryFn (Required) \u2192 Function that returns a promise of data.  </li> <li>enabled (Boolean) \u2192 Controls whether the query runs automatically.  </li> <li>staleTime (Number) \u2192 Time (in ms) before cached data is considered stale.  </li> <li>cacheTime (Number) \u2192 Duration (in ms) inactive queries remain in cache.  </li> <li>retry / retryDelay (Number | Boolean | Function) \u2192 Retry behavior for failed queries.  </li> <li>networkMode (String) \u2192 Execution mode: <code>\"online\"</code> | <code>\"always\"</code>.  </li> <li>meta (Object) \u2192 Arbitrary metadata for debugging/devtools.  </li> <li>select (Function) \u2192 Transform or filter data before returning it.  </li> <li>onSuccess / onError / onSettled (Callbacks) \u2192 Lifecycle handlers for side effects.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-value_1","title":"Return Value","text":"<p><code>useQueries</code> returns an array of query results, one for each query object. Each result has the same structure as a <code>useQuery</code> result:</p> <ul> <li>data \u2192 Cached or freshly fetched data.  </li> <li>error \u2192 Error object if the query failed.  </li> <li>status \u2192 <code>\"idle\"</code> | <code>\"pending\"</code> | <code>\"success\"</code> | <code>\"error\"</code>.  </li> <li>isLoading \u2192 <code>true</code> if the query is fetching for the first time.  </li> <li>isFetching \u2192 <code>true</code> if background fetching is in progress.  </li> <li>isSuccess / isError / isIdle \u2192 Boolean states of the query.  </li> <li>refetch() \u2192 Function to manually re-run the query.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#6-useinfinitequery","title":"6. useInfiniteQuery","text":"<pre><code>import { useInfiniteQuery } from \"@tanstack/react-query\"\nimport axios from \"axios\"\n\nconst fetchPosts = async ({ pageParam = 1, signal }) =&gt; {\n  const res = await axios.get(\n    `https://jsonplaceholder.typicode.com/posts?_page=${pageParam}&amp;_limit=10`,\n    { signal }\n  )\n  return res.data\n}\n\nexport default function Example() {\n  const query = useInfiniteQuery({\n    queryKey: [\"posts\"],              // Unique key for cache\n    queryFn: fetchPosts,              // Async function\n    getNextPageParam: (lastPage, allPages) =&gt; {\n      // Define how to fetch next page\n      if (lastPage.length === 0) return undefined\n      return allPages.length + 1\n    },\n    getPreviousPageParam: (firstPage, allPages) =&gt; {\n      // Optional: define how to fetch previous page\n      return allPages.length &gt; 1 ? allPages.length - 1 : undefined\n    },\n    initialPageParam: 1,              // Default page to start\n    maxPages: 5,                      // Optional: keep only limited pages in cache\n    retry: 3,                         // Retry failed queries\n    retryDelay: (attempt) =&gt; attempt * 1000,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    staleTime: 1000 * 60,             // 1 min cache freshness\n    cacheTime: 1000 * 60 * 5,         // 5 min keep unused data\n    enabled: true,                    // Run automatically\n    suspense: false,                  // For Suspense mode\n    networkMode: \"online\",            // online | always | offlineFirst\n    meta: { source: \"demo\" },         // Custom metadata\n    select: (data) =&gt; data,           // Transform data if needed\n    structuralSharing: true,          // Shallow merge new data\n    throwOnError: false,              // Throw errors or not\n  })\n\n  // \u2705 All return values available\n  console.log({\n    data: query.data,                        // Pages of data\n    pages: query.data?.pages,                // Array of pages\n    pageParams: query.data?.pageParams,      // Params for each page\n    error: query.error,                      // Error object\n    fetchNextPage: query.fetchNextPage,      // Function to load more\n    fetchPreviousPage: query.fetchPreviousPage, // Load previous\n    hasNextPage: query.hasNextPage,          // Boolean\n    hasPreviousPage: query.hasPreviousPage,  // Boolean\n    isFetching: query.isFetching,\n    isFetchingNextPage: query.isFetchingNextPage,\n    isFetchingPreviousPage: query.isFetchingPreviousPage,\n    isLoading: query.isLoading,\n    isError: query.isError,\n    isSuccess: query.isSuccess,\n    status: query.status,                    // loading | error | success\n    refetch: query.refetch,                  // Manual refetch\n  })\n\n  return null\n}\n</code></pre> <p>The useInfiniteQuery hook is used for handling paginated or infinite scrolling data. Instead of fetching a fixed set of results, it allows you to fetch data page by page and append new results seamlessly.</p>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#key-options-for-infinitequery","title":"Key Options for InfiniteQuery","text":"<ul> <li>queryKey (Required) \u2192 Unique identifier for the query.  </li> <li>queryFn (Required) \u2192 Function that fetches a page of data.  </li> <li>getNextPageParam (Required) \u2192 Function that returns the next page parameter from the last page\u2019s data.  </li> <li>initialPageParam (Optional) \u2192 The initial parameter to start fetching from (default: <code>undefined</code>).  </li> <li>enabled (Boolean) \u2192 Whether the query should run automatically.  </li> <li>staleTime (Number) \u2192 Time in ms before cached data is considered stale.  </li> <li>cacheTime (Number) \u2192 Time inactive queries stay in cache.  </li> <li>retry / retryDelay (Number | Boolean | Function) \u2192 Retry logic if query fails.  </li> <li>select (Function) \u2192 Transform paginated data before returning.  </li> <li>onSuccess / onError / onSettled (Callbacks) \u2192 Lifecycle handlers.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-value-for-infinitequery","title":"Return Value for InfiniteQuery","text":"<p>useInfiniteQuery returns an object similar to useQuery, but with pagination helpers:</p> <ul> <li>data.pages \u2192 Array of pages fetched so far.  </li> <li>data.pageParams \u2192 Parameters used for each page fetched.  </li> <li>fetchNextPage() \u2192 Function to fetch the next page.  </li> <li>fetchPreviousPage() \u2192 Function to fetch the previous page (if supported).  </li> <li>hasNextPage \u2192 Boolean indicating if there\u2019s another page to fetch.  </li> <li>hasPreviousPage \u2192 Boolean indicating if a previous page exists.  </li> <li>isFetchingNextPage \u2192 True if the next page is currently being fetched.  </li> <li>isFetchingPreviousPage \u2192 True if the previous page is currently being fetched.  </li> <li>status, data, error, isLoading, isError, isSuccess \u2192 Same as useQuery states.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#7-useisfetching","title":"7. useIsFetching","text":"<p><code>useIsFetching</code> is a React Query hook that tracks the number of active queries that are currently fetching (in-flight). It can be used to show global loading indicators or trigger UI changes based on query activity.</p> <pre><code>import React from \"react\";\nimport {\n  useQuery,\n  useIsFetching,\n  useQueryClient,\n  QueryClient,\n  QueryClientProvider,\n} from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient();\n\nconst fetchUsers = async () =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  return res.json();\n};\n\nconst fetchPosts = async () =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  return res.json();\n};\n\nfunction Dashboard() {\n  // Queries\n  const usersQuery = useQuery({\n    queryKey: [\"users\"],\n    queryFn: fetchUsers,\n  });\n\n  const postsQuery = useQuery({\n    queryKey: [\"posts\"],\n    queryFn: fetchPosts,\n  });\n\n  // useIsFetching with no args \u2192 counts all active fetches\n  const isFetchingAll = useIsFetching();\n\n  // useIsFetching with queryKey\n  const isFetchingUsers = useIsFetching({ queryKey: [\"users\"] });\n  const isFetchingPosts = useIsFetching({ queryKey: [\"posts\"] });\n\n  // useIsFetching with filters (status, exact)\n  const isFetchingUsersExact = useIsFetching({\n    queryKey: [\"users\"],\n    exact: true,\n  });\n\n  const isFetchingByStatus = useIsFetching({\n    predicate: (query) =&gt; query.state.status === \"loading\",\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Dashboard&lt;/h2&gt;\n\n      &lt;p&gt;Total active fetches: {isFetchingAll}&lt;/p&gt;\n      &lt;p&gt;Users fetching: {isFetchingUsers}&lt;/p&gt;\n      &lt;p&gt;Posts fetching: {isFetchingPosts}&lt;/p&gt;\n      &lt;p&gt;Users (exact) fetching: {isFetchingUsersExact}&lt;/p&gt;\n      &lt;p&gt;Fetching by status (loading): {isFetchingByStatus}&lt;/p&gt;\n\n      &lt;hr /&gt;\n      &lt;h3&gt;Users&lt;/h3&gt;\n      {usersQuery.isLoading &amp;&amp; &lt;p&gt;Loading users...&lt;/p&gt;}\n      {usersQuery.data?.map((user: any) =&gt; (\n        &lt;p key={user.id}&gt;{user.name}&lt;/p&gt;\n      ))}\n\n      &lt;h3&gt;Posts&lt;/h3&gt;\n      {postsQuery.isLoading &amp;&amp; &lt;p&gt;Loading posts...&lt;/p&gt;}\n      {postsQuery.data?.slice(0, 5).map((post: any) =&gt; (\n        &lt;p key={post.id}&gt;{post.title}&lt;/p&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default function App() {\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;Dashboard /&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#options-parameters","title":"\ud83d\udd11 Options (Parameters)","text":"<p>The hook accepts an optional filters object:</p> <ul> <li>queryKey?: QueryKey </li> <li>Filter by query key.  </li> <li> <p>Matches queries with the given key or part of it.</p> </li> <li> <p>exact?: boolean </p> </li> <li>If <code>true</code>, only queries with an exact match of <code>queryKey</code> are counted.  </li> <li> <p>Defaults to <code>false</code>.</p> </li> <li> <p>predicate?: (query: Query) =&gt; boolean </p> </li> <li>A custom function to filter queries.  </li> <li>Receives the query object, returns <code>true</code> if it should be counted.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-value_2","title":"\ud83d\udd04 Return Value","text":"<ul> <li>number </li> <li>Returns the total count of queries that are currently fetching and match the filters.  </li> <li>If no filters are provided, it returns the count of all active fetching queries.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#8-useismutating","title":"8. useIsMutating","text":"<p><code>useIsMutating</code> is a React Query hook that tracks the number of active mutations currently running. It\u2019s useful for showing global mutation indicators (e.g., \"Saving...\" spinners).</p> <pre><code>import React from \"react\";\nimport { useMutation, useIsMutating, useQueryClient } from \"@tanstack/react-query\";\n\nfunction SaveProfileButton() {\n  const queryClient = useQueryClient();\n\n  // Example mutation: save profile\n  const saveProfileMutation = useMutation({\n    mutationKey: [\"saveProfile\"],\n    mutationFn: async (profileData: { name: string }) =&gt; {\n      await new Promise((resolve) =&gt; setTimeout(resolve, 2000)); // simulate API delay\n      return profileData;\n    },\n    onSuccess: (data) =&gt; {\n      queryClient.invalidateQueries({ queryKey: [\"profile\"] });\n    },\n  });\n\n  // Count all active mutations\n  const totalMutations = useIsMutating();\n\n  // Count only \"saveProfile\" mutations\n  const profileMutations = useIsMutating({ mutationKey: [\"saveProfile\"] });\n\n  // Count mutations with custom filter\n  const customFilteredMutations = useIsMutating({\n    predicate: (mutation) =&gt; mutation.options.mutationKey?.[0] === \"saveProfile\",\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;button\n        onClick={() =&gt; saveProfileMutation.mutate({ name: \"Sourav\" })}\n        disabled={saveProfileMutation.isPending}\n        className=\"px-4 py-2 rounded bg-blue-600 text-white\"\n      &gt;\n        {saveProfileMutation.isPending ? \"Saving...\" : \"Save Profile\"}\n      &lt;/button&gt;\n\n      &lt;p&gt;Total active mutations: {totalMutations}&lt;/p&gt;\n      &lt;p&gt;Active profile mutations: {profileMutations}&lt;/p&gt;\n      &lt;p&gt;Custom filtered mutations: {customFilteredMutations}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default SaveProfileButton;\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#options-for-useismutating","title":"Options for useIsMutating","text":"<p>The hook accepts an optional filters object:</p> <ul> <li>mutationKey?: MutationKey </li> <li>Filter by mutation key.  </li> <li> <p>Matches mutations with the given key or part of it.</p> </li> <li> <p>exact?: boolean </p> </li> <li>If <code>true</code>, only mutations with an exact match of <code>mutationKey</code> are counted.  </li> <li> <p>Defaults to <code>false</code>.</p> </li> <li> <p>predicate?: (mutation: Mutation) =&gt; boolean </p> </li> <li>A custom function to filter mutations.  </li> <li>Receives the mutation object, returns <code>true</code> if it should be counted.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-value-for-useismutating","title":"Return Value for useIsMutating","text":"<ul> <li>number </li> <li>Returns the total count of mutations that are currently in-flight and match the filters.  </li> <li>If no filters are provided, it returns the count of all active mutations.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#9-usemutationstate","title":"9. useMutationState","text":"<p>Purpose: <code>useMutationState</code> is a React Query hook that lets you subscribe to the state of one or multiple mutations in the cache. It\u2019s mainly used for tracking ongoing mutations, building global loading indicators, or reacting to mutation states outside of the component where <code>useMutation</code> is defined.</p> <pre><code>const mutationStates = useMutationState({\n  filters?: {\n    // \ud83d\udd11 Filters mutations by key\n    // Can be a string or array of strings\n    // Example: \"createUser\" or [\"user\", \"create\"]\n    mutationKey,\n\n    // \ud83c\udfaf Whether to match the key exactly\n    // Default: false\n    // true \u2192 only exact matches\n    // false \u2192 allows partial matches\n    exact,\n\n    // \ud83d\udccc Filter mutations by status\n    // Accepts a string or array of statuses\n    // Options: \"idle\" | \"pending\" | \"success\" | \"error\"\n    // Example: status: [\"pending\", \"error\"]\n    status,\n\n    // \u26a1 Custom filter function\n    // Receives the full mutation object\n    // Return true to include, false to exclude\n    // Example: (mutation) =&gt; mutation.state.data?.role === \"admin\"\n    predicate,\n  },\n\n  select?: (mutation) =&gt; {\n    // \ud83c\udfa8 Transform each mutation object before returning\n    // mutation \u2192 the raw mutation state\n    // Return any custom shape you need\n\n    // Example: pick specific fields\n    return {\n      key: mutation.mutationKey,\n      status: mutation.state.status,\n      error: mutation.state.error,\n      submittedAt: mutation.state.submittedAt,\n    }\n  },\n})\n\n// \ud83d\udce6 Return Value \u2192 Always an array of mutation states (possibly empty)\n// Each mutation object contains:\nmutationStates = [\n  {\n    mutationKey, // identifier\n    state: {\n      status,       // \"idle\" | \"pending\" | \"success\" | \"error\"\n      variables,    // variables passed into mutate()\n      data,         // response data (if success)\n      error,        // error object (if failed)\n      submittedAt,  // timestamp of trigger\n      context,      // value from onMutate()\n    },\n  },\n  ...\n]\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-usemutationstate-key-options","title":"React useMutationState: Key Options","text":"<ul> <li> <p> filters \u2192 (Object)    Used to filter which mutations you want to subscribe to.  </p> </li> <li> <p>mutationKey \u2192 (String | Array)     Filter by specific mutation key(s).  </p> </li> <li> <p>exact \u2192 (Boolean)     Match mutation key exactly if <code>true</code>.  </p> </li> <li> <p>status \u2192 (String | Array)     Filter by mutation status: <code>\"idle\" | \"pending\" | \"success\" | \"error\"</code>.  </p> </li> <li> <p>predicate \u2192 (Function)     Custom filter: <code>(mutation) =&gt; boolean</code>.  </p> </li> <li> <p> select \u2192 (Function)    Transform or map each mutation state before returning. <code>(mutation) =&gt; transformedResult</code> </p> </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#react-usemutationstate-return-value","title":"React useMutationState: Return Value","text":"<p>The return value is always an array of matching mutation states. Each mutation state object contains:</p> <ul> <li> <p> mutationKey   The key identifying the mutation.  </p> </li> <li> <p> state   Internal state of the mutation, including:  </p> </li> <li>status \u2192 <code>\"idle\" | \"pending\" | \"success\" | \"error\"</code> </li> <li>variables \u2192 Variables used when the mutation was triggered.  </li> <li>data \u2192 Data returned from the mutation  </li> <li>error \u2192 Error object if mutation failed  </li> <li>submittedAt \u2192 Timestamp when the mutation was triggered  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#10-useprefetchquery","title":"10. usePrefetchQuery","text":"<p>The <code>usePrefetchQuery</code> hook in React Query is used to preload data into the cache without rendering a component. This is particularly useful for improving performance and UX by prefetching data before navigation or interaction.</p> <pre><code>import { useQueryClient } from \"@tanstack/react-query\"\nimport { useEffect } from \"react\"\n\n// Example fetch function\nconst fetchUser = async (id: string) =&gt; {\n  const res = await fetch(`/api/users/${id}`)\n  if (!res.ok) throw new Error(\"Network response was not ok\")\n  return res.json()\n}\n\nexport default function PrefetchExample() {\n  const queryClient = useQueryClient()\n\n  // Prefetch user data when component mounts\n  useEffect(() =&gt; {\n    queryClient.prefetchQuery({\n      queryKey: [\"user\", \"123\"],\n      queryFn: () =&gt; fetchUser(\"123\"),\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      gcTime: 1000 * 60 * 10, // 10 minutes in cache\n    })\n  }, [queryClient])\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Prefetch Example&lt;/h2&gt;\n      &lt;p&gt;User 123 will be prefetched and cached for later use.&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#options-key","title":"Options Key","text":"<ul> <li>queryKey (required)   Unique key to identify the query in the cache.  </li> <li>Type: <code>Array | string</code> </li> <li> <p>Example: <code>['user', userId]</code></p> </li> <li> <p>queryFn (required)   The asynchronous function that fetches the data.  </p> </li> <li>Type: <code>() =&gt; Promise&lt;TData&gt;</code> </li> <li> <p>Example: <code>() =&gt; fetchUser(userId)</code></p> </li> <li> <p>staleTime   Time (in ms) that the data remains fresh before it becomes stale.  </p> </li> <li>Type: <code>number</code> </li> <li> <p>Default: <code>0</code></p> </li> <li> <p>cacheTime   Time (in ms) inactive queries stay in the cache before garbage collection.  </p> </li> <li>Type: <code>number</code> </li> <li> <p>Default: <code>5 * 60 * 1000</code> (5 minutes)</p> </li> <li> <p>retry   Number of retry attempts if the query fails.  </p> </li> <li>Type: <code>boolean | number</code> </li> <li> <p>Default: <code>3</code></p> </li> <li> <p>retryDelay   Delay between retries.  </p> </li> <li>Type: <code>number | (attempt: number) =&gt; number</code> </li> <li> <p>Default: exponential backoff</p> </li> <li> <p>meta   Metadata attached to the query (useful for custom logging/debugging).  </p> </li> <li>Type: <code>object</code></li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-value-of-useprefetchquery","title":"Return Value of usePrefetchQuery","text":"<p>Unlike <code>useQuery</code>, <code>usePrefetchQuery</code> does not return query data. It returns a Promise that resolves once the data is fetched and stored in the cache.</p> <ul> <li>Promise&lt; void&gt; \u2192 resolves when the prefetch is complete.  </li> <li>Errors can be caught via <code>.catch()</code> if needed.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#notes","title":"Notes","text":"<ul> <li>Typically used with <code>queryClient</code> outside components or in event handlers.  </li> <li>Improves perceived performance by ensuring data is already available when a user navigates to a new route.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#11-useprefetchinfinitequery","title":"11. usePrefetchInfiniteQuery","text":"<p>The <code>usePrefetchInfiniteQuery</code> hook in React Query allows you to prefetch data for an infinite query (a paginated query that loads data page by page). It works similarly to <code>usePrefetchQuery</code> but is designed for queries that use <code>useInfiniteQuery</code>.</p> <pre><code>import { useQueryClient } from \"@tanstack/react-query\"\nimport { useEffect } from \"react\"\n\n// Example paginated fetch function\nconst fetchPosts = async ({ pageParam = 1 }) =&gt; {\n  const res = await fetch(`/api/posts?page=${pageParam}`)\n  if (!res.ok) throw new Error(\"Network error\")\n  return res.json()\n}\n\nexport default function PrefetchInfiniteExample() {\n  const queryClient = useQueryClient()\n\n  useEffect(() =&gt; {\n    queryClient.prefetchInfiniteQuery({\n      queryKey: [\"posts\"],\n      queryFn: fetchPosts,\n      initialPageParam: 1,\n      getNextPageParam: (lastPage, allPages) =&gt; {\n        // Example: return next page number if more data exists\n        return lastPage.hasMore ? allPages.length + 1 : undefined\n      },\n      staleTime: 1000 * 60 * 5, // 5 min\n      gcTime: 1000 * 60 * 10,   // 10 min\n    })\n  }, [queryClient])\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Prefetch Infinite Query Example&lt;/h2&gt;\n      &lt;p&gt;Posts are prefetched and ready for infinite scrolling.&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#options-value","title":"Options Value","text":"<ul> <li> <p>queryKey   Unique key to identify the query (usually an array).</p> </li> <li> <p>queryFn   The asynchronous function that fetches data.   It receives a <code>context</code> object containing:</p> </li> <li><code>pageParam</code>: The parameter for the current page.</li> <li> <p><code>signal</code>: Abort signal for cancellation.</p> </li> <li> <p>initialPageParam   The parameter to start with when fetching the first page.</p> </li> <li> <p>getNextPageParam   Function that tells React Query how to get the <code>pageParam</code> for the next page.</p> </li> <li> <p>getPreviousPageParam   Function that tells React Query how to get the <code>pageParam</code> for the previous page (optional).</p> </li> <li> <p>staleTime   Time (in ms) before data is considered stale.</p> </li> <li> <p>gcTime   Time (in ms) before unused data is garbage collected.</p> </li> <li> <p>retry   Number of retry attempts if the fetch fails.</p> </li> <li> <p>retryDelay   Delay (in ms) between retries.</p> </li> <li> <p>enabled   Boolean to control whether the query should run automatically.</p> </li> <li> <p>select   Function to transform or filter the fetched data before caching.</p> </li> <li> <p>meta   Additional metadata attached to the query.</p> </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#returns","title":"Returns","text":"<p>Calling <code>usePrefetchInfiniteQuery</code> does not return data directly. Instead, it prefetches and caches the infinite query so that when <code>useInfiniteQuery</code> is called later with the same key, data is already available.</p> <p>It returns:</p> <ul> <li>promise   Resolves when the data has been fetched and stored in the cache.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#12-usesuspensequery","title":"12. useSuspenseQuery","text":"<p>The <code>useSuspenseQuery</code> hook is similar to <code>useQuery</code>, but it is designed to work with React Suspense. Instead of returning a loading state (<code>isLoading</code>), it will throw a Promise that React Suspense can catch, pausing rendering until the data is ready.</p> <pre><code>import React, { Suspense } from \"react\";\nimport { useSuspenseQuery } from \"@tanstack/react-query\";\n\nasync function fetchUser(id: number) {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);\n  if (!res.ok) throw new Error(\"Network response was not ok\");\n  return res.json();\n}\n\nfunction User({ id }: { id: number }) {\n  const { data } = useSuspenseQuery({\n    queryKey: [\"user\", id],\n    queryFn: () =&gt; fetchUser(id),\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{data.name}&lt;/h2&gt;\n      &lt;p&gt;Email: {data.email}&lt;/p&gt;\n      &lt;p&gt;Phone: {data.phone}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default function App() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading user...&lt;/div&gt;}&gt;\n      &lt;User id={1} /&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#option-values","title":"Option Values","text":"<ul> <li> <p>queryKey:   A unique key (array or string) that identifies the query.</p> </li> <li> <p>queryFn:   The asynchronous function that fetches and returns data.</p> </li> <li> <p>enabled (optional):   Whether the query should automatically run (<code>true</code> by default).</p> </li> <li> <p>staleTime (optional):   Duration (in ms) for which the data is considered fresh.</p> </li> <li> <p>gcTime (optional):   Duration (in ms) after which inactive queries are garbage collected.</p> </li> <li> <p>retry (optional):   Number of retry attempts if the query fails. Default: <code>3</code>.</p> </li> <li> <p>retryDelay (optional):   Delay between retries. Can be a number or function.</p> </li> <li> <p>refetchOnMount (optional):   Refetch when the component mounts. (<code>true</code>, <code>false</code>, or <code>\"always\"</code>).</p> </li> <li> <p>refetchOnWindowFocus (optional):   Refetch when the window regains focus.</p> </li> <li> <p>refetchInterval (optional):   Interval (ms) for background refetching. (<code>false</code> to disable).</p> </li> <li> <p>initialData (optional):   Preloaded data to be used before the query runs.</p> </li> <li> <p>select (optional):   Function to transform/derive a subset of the data before returning.</p> </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-values","title":"Return Values","text":"<p>Since it uses Suspense, loading and error states are not included in the return.  </p> <ul> <li>data:   The resolved data from the query function.  </li> <li>refetch:   Function to manually refetch the query.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#13-usesuspenseinfinitequery","title":"13. useSuspenseInfiniteQuery","text":"<p>The <code>useSuspenseInfiniteQuery</code> hook is similar to <code>useInfiniteQuery</code> but designed for React Suspense. It enables fetching paginated or infinite lists of data while letting Suspense handle loading states.  </p> <pre><code>import React, { Suspense } from \"react\";\nimport { useSuspenseInfiniteQuery } from \"@tanstack/react-query\";\nimport axios from \"axios\";\n\nasync function fetchPosts({ pageParam = 1 }) {\n  const res = await axios.get(\n    `https://jsonplaceholder.typicode.com/posts?_limit=5&amp;_page=${pageParam}`\n  );\n  return res.data;\n}\n\nfunction PostsList() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = useSuspenseInfiniteQuery({\n    queryKey: [\"posts\"],\n    queryFn: fetchPosts,\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, allPages) =&gt; {\n      return lastPage.length === 5 ? allPages.length + 1 : undefined;\n    },\n  });\n\n  return (\n    &lt;div&gt;\n      {data.pages.map((page, i) =&gt; (\n        &lt;React.Fragment key={i}&gt;\n          {page.map((post: any) =&gt; (\n            &lt;p key={post.id}&gt;\n              {post.id}. {post.title}\n            &lt;/p&gt;\n          ))}\n        &lt;/React.Fragment&gt;\n      ))}\n\n      &lt;button\n        onClick={() =&gt; fetchNextPage()}\n        disabled={!hasNextPage || isFetchingNextPage}\n      &gt;\n        {isFetchingNextPage ? \"Loading more...\" : hasNextPage ? \"Load More\" : \"No More Posts\"}\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default function App() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Loading posts...&lt;/div&gt;}&gt;\n      &lt;PostsList /&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#return-values_1","title":"Return values","text":"<ul> <li>data \u2192 The combined paginated data.  </li> <li>fetchNextPage \u2192 Function to fetch the next page.  </li> <li>fetchPreviousPage \u2192 Function to fetch the previous page.  </li> <li>hasNextPage \u2192 Boolean indicating if another page is available.  </li> <li>hasPreviousPage \u2192 Boolean indicating if a previous page exists.  </li> <li>isFetchingNextPage \u2192 Boolean for when the next page is loading.  </li> <li>isFetchingPreviousPage \u2192 Boolean for when the previous page is loading.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#when-to-use","title":"When to Use","text":"<ul> <li>Infinite scrolling with Suspense boundaries.  </li> <li>Automatically combining paginated results.  </li> <li>Cleaner loading/error handling with Suspense.  </li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#14-usesuspensequeries","title":"14. useSuspenseQueries","text":"<ul> <li><code>useSuspenseQueries</code> is used when you want to fetch multiple queries in parallel with React Query Suspense.  </li> <li>Unlike <code>useSuspenseQuery</code>, it handles an array of queries at once.  </li> <li>Perfect when you want to load multiple independent resources before rendering.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#example","title":"Example","text":"<pre><code>import React, { Suspense } from \"react\";\nimport { useSuspenseQueries } from \"@tanstack/react-query\";\nimport axios from \"axios\";\n\nconst fetchUser = async (id: number) =&gt; {\n  const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n  return res.data;\n};\n\nconst fetchPost = async (id: number) =&gt; {\n  const res = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\n  return res.data;\n};\n\nfunction UserAndPost() {\n  const results = useSuspenseQueries({\n    queries: [\n      {\n        queryKey: [\"user\", 1],\n        queryFn: () =&gt; fetchUser(1),\n      },\n      {\n        queryKey: [\"post\", 1],\n        queryFn: () =&gt; fetchPost(1),\n      },\n    ],\n  });\n\n  const [user, post] = results.map((q) =&gt; q.data);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;User: {user.name}&lt;/h2&gt;\n      &lt;h3&gt;Post: {post.title}&lt;/h3&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default function App() {\n  return (\n    &lt;Suspense fallback={&lt;p&gt;Loading...&lt;/p&gt;}&gt;\n      &lt;UserAndPost /&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#15-usequeryerrorresetboundary","title":"15. useQueryErrorResetBoundary","text":"<p>The <code>useQueryErrorResetBoundary</code> hook is a utility in React Query that integrates with Error Boundaries to handle query errors gracefully. It helps in resetting error states and retrying failed queries when the user attempts to recover (e.g., via a retry button).  </p> <p>It\u2019s typically used with React\u2019s <code>&lt;ErrorBoundary /&gt;</code> component.</p> <pre><code>const {\n  reset,         // function to reset error boundary state\n  resetBoundary, // function to be called inside ErrorBoundary fallback\n} = useQueryErrorResetBoundary();\n</code></pre> <pre><code>import React from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport {\n  useQuery,\n  useQueryErrorResetBoundary,\n} from \"@tanstack/react-query\";\n\nfunction fetchUser() {\n  return fetch(\"/api/user\").then((res) =&gt; {\n    if (!res.ok) throw new Error(\"Failed to fetch user\");\n    return res.json();\n  });\n}\n\nfunction User() {\n  const { data } = useQuery({\n    queryKey: [\"user\"],\n    queryFn: fetchUser,\n  });\n\n  return &lt;div&gt;User: {data.name}&lt;/div&gt;;\n}\n\nfunction App() {\n  const { reset } = useQueryErrorResetBoundary();\n\n  return (\n    &lt;ErrorBoundary\n      onReset={reset}\n      fallbackRender={({ error, resetErrorBoundary }) =&gt; (\n        &lt;div&gt;\n          &lt;p style={{ color: \"red\" }}&gt;Error: {error.message}&lt;/p&gt;\n          &lt;button onClick={() =&gt; resetErrorBoundary()}&gt;\n            Retry\n          &lt;/button&gt;\n        &lt;/div&gt;\n      )}\n    &gt;\n      &lt;User /&gt;\n    &lt;/ErrorBoundary&gt;\n  );\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#16-queryerrorresetboundary","title":"16. QueryErrorResetBoundary","text":"<p><code>QueryErrorResetBoundary</code> is a React component provided by React Query that works with error boundaries to handle query errors more gracefully. It allows you to reset the error state of queries when retrying or remounting.</p>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#usage","title":"\ud83d\udd39 Usage","text":"<p>You wrap your components inside <code>QueryErrorResetBoundary</code> and use it together with React\u2019s <code>ErrorBoundary</code>. The reset function provided ensures that failed queries can be retried cleanly without persisting the error state.</p>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#props","title":"\u2699\ufe0f Props","text":"<ul> <li>children: A render prop function that receives:</li> <li><code>reset</code> \u2192 function to reset query errors.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#common-use-cases","title":"\ud83d\udd04 Common Use Cases","text":"<ul> <li>Handling query failures inside <code>ErrorBoundary</code>.</li> <li>Allowing retry of failed queries by resetting error state.</li> <li>Ensuring queries do not remain stuck in an error state when re-rendered.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#returns_1","title":"\ud83d\udd19 Returns","text":"<p>The <code>children</code> render function provides:</p> <ul> <li>reset \u2192 A function to reset all errors in the query cache.</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#17-hydration-utilities","title":"17. Hydration Utilities","text":"<p>Hydration utilities in React Query are used to support Server-Side Rendering (SSR) and Static Site Generation (SSG). They allow you to prefetch queries on the server, dehydrate them into a serializable state, and then rehydrate them on the client for seamless hydration.</p> <pre><code>// pages/index.tsx\nimport { dehydrate, QueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Hydrate } from \"@tanstack/react-query\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\n\n// \u2705 Fetch function\nconst fetchPosts = async () =&gt; {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  return res.json();\n};\n\n// \u2705 Query Hook\nfunction Posts() {\n  const { data } = useQuery({\n    queryKey: [\"posts\"],\n    queryFn: fetchPosts,\n  });\n\n  return (\n    &lt;ul&gt;\n      {data?.slice(0, 5).map((post: any) =&gt; (\n        &lt;li key={post.id}&gt;{post.title}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n\n// \u2705 Page Component\nexport default function Home({ dehydratedState }: { dehydratedState: unknown }) {\n  const queryClient = new QueryClient();\n\n  return (\n    &lt;QueryClientProvider client={queryClient}&gt;\n      &lt;Hydrate state={dehydratedState}&gt;\n        &lt;Posts /&gt;\n      &lt;/Hydrate&gt;\n    &lt;/QueryClientProvider&gt;\n  );\n}\n\n// \u2705 Next.js Data Fetching (Server)\nexport async function getServerSideProps() {\n  const queryClient = new QueryClient();\n\n  await queryClient.prefetchQuery({\n    queryKey: [\"posts\"],\n    queryFn: fetchPosts,\n  });\n\n  return {\n    props: {\n      dehydratedState: dehydrate(queryClient),\n    },\n  };\n}\n</code></pre>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#key-utilities","title":"\ud83d\udd39 Key Utilities","text":"<ol> <li><code>dehydrate(client)</code> </li> <li>Extracts the cached queries from the <code>QueryClient</code> into a serializable object.  </li> <li> <p>Used on the server (e.g., Next.js <code>getServerSideProps</code> or <code>getStaticProps</code>).</p> </li> <li> <p><code>Hydrate</code> component </p> </li> <li>Takes the dehydrated state and hydrates it back into React Query\u2019s cache on the client side.</li> </ol>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#workflow","title":"\ud83d\udd04 Workflow","text":"<ol> <li>Server: Prefetch queries \u2192 <code>dehydrate</code> \u2192 pass dehydrated state as props.  </li> <li>Client: Wrap app in <code>&lt;Hydrate&gt;</code> with the dehydrated state \u2192 Queries are instantly available without refetch.</li> </ol>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#props-for-hydrate","title":"\u2699\ufe0f Props for <code>&lt;Hydrate&gt;</code>","text":"<ul> <li>state \u2192 The dehydrated state object.</li> <li>options \u2192 Optional config for hydration behavior (e.g., default stale times).</li> </ul>"},{"location":"reactapi/14.5.3.React%20Query%20Ref/#common-use-cases_1","title":"\ud83d\udd19 Common Use Cases","text":"<ul> <li>Next.js, Remix, or any SSR framework.</li> <li>Improving performance by avoiding duplicate client-side requests.</li> <li>SEO benefits with prefetched data rendered on the server.</li> </ul>"},{"location":"reactapi/14.6.Real-Time%20Data/","title":"14.6.Real-Time Data","text":""},{"location":"reactapi/14.7.Security%20%26%20Best%20Practices/","title":"14.7.Security & Best Practices","text":""},{"location":"reactapi/14.8.File%20Handling/","title":"14.8.File Handling","text":""},{"location":"reactapi/14.API%20Integration/","title":"14.API Integration","text":""},{"location":"reactapi/14.API%20Integration/#api-integration","title":"API Integration","text":""},{"location":"reactapi/14.API%20Integration/#1-core-fundamentals","title":"1\ufe0f\u20e3 Core Fundamentals","text":""},{"location":"reactapi/14.API%20Integration/#http-basics","title":"HTTP Basics","text":"<ul> <li>Methods: GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD.</li> <li>Status Codes: <code>2xx</code> success, <code>3xx</code> redirect, <code>4xx</code> client errors, <code>5xx</code> server errors.</li> <li>Headers: <code>Content-Type</code>, <code>Authorization</code>, <code>Accept</code>.</li> <li>Parameters:<ul> <li>Path parameters (<code>/users/:id</code>)</li> <li>Query parameters (<code>?page=2&amp;limit=10</code>)</li> <li>Request body (JSON, form data)</li> </ul> </li> </ul>"},{"location":"reactapi/14.API%20Integration/#api-types","title":"API Types","text":"<ul> <li>REST APIs (JSON, XML)</li> <li>WebSockets for real-time communication</li> <li>and more...</li> </ul>"},{"location":"reactapi/14.API%20Integration/#2-request-patterns-with-axios","title":"2\ufe0f\u20e3 Request Patterns with Axios","text":""},{"location":"reactapi/14.API%20Integration/#axios-setup","title":"Axios Setup","text":"<ul> <li><code>axios.create()</code> with <code>baseURL</code> &amp; defaults</li> <li>Global headers &amp; interceptors</li> <li>Timeout handling</li> <li>Cancel tokens (abort requests)</li> </ul>"},{"location":"reactapi/14.API%20Integration/#get","title":"GET","text":"<ul> <li>No params (simple fetch)</li> <li>Path params (<code>/users/:id</code>)</li> <li>Query params (<code>?page=2</code>)</li> <li>Combined path + query</li> <li>With headers</li> </ul>"},{"location":"reactapi/14.API%20Integration/#post","title":"POST","text":"<ul> <li>JSON body payload</li> <li>Form submissions</li> <li>FormData for file uploads</li> <li>Query params with POST</li> <li>Custom headers (auth, tokens)</li> </ul>"},{"location":"reactapi/14.API%20Integration/#putpatch","title":"PUT/PATCH","text":"<ul> <li>Full resource update (PUT)</li> <li>Partial resource update (PATCH)</li> <li>With or without params</li> </ul>"},{"location":"reactapi/14.API%20Integration/#delete","title":"DELETE","text":"<ul> <li>Path params (<code>/users/:id</code>)</li> <li>Query params</li> <li>Delete with request body (less common)</li> </ul>"},{"location":"reactapi/14.API%20Integration/#error-handling","title":"Error Handling","text":"<ul> <li><code>try...catch</code></li> <li>Handle <code>error.response</code>, <code>error.request</code></li> <li>Default error messages</li> <li>UI-level error feedback</li> </ul>"},{"location":"reactapi/14.API%20Integration/#3-authentication","title":"3\ufe0f\u20e3 Authentication","text":""},{"location":"reactapi/14.API%20Integration/#1-authentication-strategies-jwt-oauth-firebase-auth","title":"1. Authentication Strategies (JWT, OAuth, Firebase Auth)","text":"<ul> <li>Introduction to Authentication Strategies</li> <li>Save in <code>localStorage</code>, <code>sessionStorage</code>, or cookies</li> <li>Attach <code>Authorization: Bearer &lt;token&gt;</code> in headers</li> <li>Comparing JWT, OAuth, and Firebase Authentication</li> <li>Pros and Cons of Different Authentication Methods</li> </ul>"},{"location":"reactapi/14.API%20Integration/#2-implementing-user-authentication-in-react","title":"2. Implementing User Authentication in React","text":"<ul> <li>Authentication Flow in React Applications</li> <li>Using Context API for Authentication State</li> <li>Implementing Private and Protected Routes</li> <li>Managing Authentication Tokens Securely</li> </ul>"},{"location":"reactapi/14.API%20Integration/#3-using-firebase-authentication","title":"3. Using Firebase Authentication","text":"<ul> <li>Setting Up Firebase in a React App</li> <li>Firebase Email &amp; Password Authentication</li> <li>Google, Facebook, and GitHub Authentication with Firebase</li> <li>Storing User Data in Firebase Firestore</li> <li>Handling Authentication State with Firebase</li> </ul>"},{"location":"reactapi/14.API%20Integration/#4-session-management-cookies","title":"4. Session Management &amp; Cookies","text":"<ul> <li>Storing Tokens in Local Storage vs Cookies</li> <li>HTTP-only Cookies for Secure Authentication</li> <li>Implementing Token Refresh Mechanisms</li> <li>Handling Auto-Logout and Expired Sessions</li> </ul>"},{"location":"reactapi/14.API%20Integration/#5-role-based-access-control-rbac","title":"5. Role-Based Access Control (RBAC)","text":"<ul> <li>What is RBAC?</li> <li>Defining User Roles and Permissions</li> <li>Implementing Role-Based Access in React Components</li> <li>Securing API Endpoints with User Roles</li> </ul>"},{"location":"reactapi/14.API%20Integration/#6-oauth2-authentication-google-facebook-github-login","title":"6. OAuth2 Authentication (Google, Facebook, GitHub Login)","text":"<ul> <li>Introduction to OAuth2 Authentication</li> <li>Setting Up OAuth with Google, Facebook, and GitHub</li> <li>Handling OAuth Tokens and User Sessions</li> <li>Securing OAuth Authentication in React</li> <li>Best Practices for OAuth Integration</li> </ul>"},{"location":"reactapi/14.API%20Integration/#7-refresh-token-logic","title":"7. Refresh Token Logic","text":"<ul> <li>Auto-refresh expired token with interceptors</li> </ul>"},{"location":"reactapi/14.API%20Integration/#4-advanced-api-scenarios","title":"4\ufe0f\u20e3 Advanced API Scenarios","text":"<ul> <li>Debounce/Throttle (prevent excessive calls)</li> <li>Pagination (page-based, cursor-based, infinite scroll)</li> <li>Parallel &amp; Batch Requests: <code>Promise.all()</code>, <code>Promise.allSettled()</code></li> <li>Conditional Requests: only fetch when needed</li> <li>Dependent Requests: call API B after A</li> <li>Retry Logic: exponential backoff</li> <li>Canceling Requests: Axios cancel token / <code>AbortController</code></li> <li>Timeout Handling: set timeout, show retry option</li> </ul>"},{"location":"reactapi/14.API%20Integration/#5-state-management-with-api-data","title":"5\ufe0f\u20e3 State Management with API Data","text":""},{"location":"reactapi/14.API%20Integration/#without-libraries","title":"Without Libraries","text":"<ul> <li>Store API response in component state</li> <li>Lift state up to parent</li> </ul>"},{"location":"reactapi/14.API%20Integration/#with-react-query","title":"With React Query","text":"<ul> <li>Automatic caching &amp; prefetching</li> <li>Refetch intervals</li> <li>Optimistic UI updates</li> </ul>"},{"location":"reactapi/14.API%20Integration/#with-swr","title":"With SWR","text":"<ul> <li>Stale-while-revalidate caching</li> </ul>"},{"location":"reactapi/14.API%20Integration/#6-real-time-data","title":"6\ufe0f\u20e3 Real-Time Data","text":""},{"location":"reactapi/14.API%20Integration/#introduction-to-websockets","title":"Introduction to WebSockets","text":"<ul> <li>What Are WebSockets?</li> <li>How WebSockets Work</li> <li>Advantages of Using WebSockets</li> </ul>"},{"location":"reactapi/14.API%20Integration/#integrating-socketio-with-react","title":"Integrating Socket.io with React","text":"<ul> <li>Setting Up Socket.io in a React Project</li> <li>Connecting to a WebSocket Server</li> <li>Sending and Receiving Messages</li> </ul>"},{"location":"reactapi/14.API%20Integration/#building-a-real-time-chat-app-with-websockets","title":"Building a Real-time Chat App with WebSockets","text":"<ul> <li>Designing the Chat UI</li> <li>Handling Incoming and Outgoing Messages</li> <li>Broadcasting Messages to Multiple Clients</li> <li>Storing Chat History</li> </ul>"},{"location":"reactapi/14.API%20Integration/#websocket-events-and-state-management","title":"WebSocket Events and State Management","text":"<ul> <li>Handling WebSocket Events in React</li> <li>Using useEffect for WebSocket Connections</li> <li>Managing WebSocket State Efficiently</li> </ul>"},{"location":"reactapi/14.API%20Integration/#polling-vs-websockets-vs-server-sent-events-sse","title":"Polling vs WebSockets vs Server-Sent Events (SSE)","text":"<ul> <li>Differences Between Polling, WebSockets, and SSE</li> <li>When to Use Each Approach</li> <li>Performance Considerations for Real-time Applications</li> </ul>"},{"location":"reactapi/14.API%20Integration/#7-security-best-practices","title":"7\ufe0f\u20e3 Security &amp; Best Practices","text":"<ul> <li>Never expose private keys in frontend</li> <li>Validate API responses before use</li> <li>Always use HTTPS</li> <li>Handle rate limits (429 errors)</li> <li>Sanitize input before sending to backend</li> </ul>"},{"location":"reactapi/14.API%20Integration/#8-file-handling","title":"8\ufe0f\u20e3 File Handling","text":""},{"location":"reactapi/14.API%20Integration/#uploads","title":"Uploads","text":"<ul> <li>Single file via FormData</li> <li>Multiple files with <code>append()</code></li> <li>Progress bars with <code>onUploadProgress</code></li> </ul>"},{"location":"reactapi/14.API%20Integration/#downloads","title":"Downloads","text":"<ul> <li>Handle Blobs</li> <li>Download as PDF, CSV, ZIP</li> </ul>"},{"location":"ts/1.Introduction%20to%20TS/","title":"1.Introduction to TypeScript","text":""},{"location":"ts/1.Introduction%20to%20TS/#1-introduction-to-typescript","title":"1. Introduction to TypeScript","text":""},{"location":"ts/1.Introduction%20to%20TS/#what-is-typescript","title":"What is TypeScript?","text":"<ul> <li>TypeScript is a strongly typed, compiled superset of JavaScript developed and maintained by Microsoft.</li> <li>TypeScript is a programming language that builds on JavaScript by adding static types.</li> <li>It helps you catch errors early in your code before running it.</li> </ul> <p>It adds:</p> <ul> <li>Static typing</li> <li>Modern JavaScript (ES6+) features</li> <li>Rich IDE support</li> <li>Compile-time error checking</li> </ul> <p>TypeScript files use the <code>.ts</code> or <code>.tsx</code> extension and compile down to plain JavaScript, ensuring compatibility with browsers and JavaScript runtimes.</p>"},{"location":"ts/1.Introduction%20to%20TS/#why-typescript-benefits-over-javascript","title":"Why TypeScript? \ud83e\udde0 Benefits Over JavaScript","text":"Feature JavaScript TypeScript Static Typing \u274c No \u2705 Yes Compile-time Checks \u274c No \u2705 Yes Autocomplete &amp; IntelliSense \ud83d\udd38 Partial \u2705 Full Refactoring Support \ud83d\udd38 Limited \u2705 Strong Interfaces &amp; Enums \u274c No \u2705 Yes Modern ES Support \u2705 Yes (partially) \u2705 Yes (with back-compatibility) <p>Main Benefits:</p> <ul> <li>Early Error Detection: Catch bugs at compile time.</li> <li>Improved Developer Productivity: With autocompletion, tooltips, and type safety.</li> <li>Better Documentation: Types act as a form of documentation.</li> <li>Scalability: Makes large codebases easier to maintain.</li> </ul>"},{"location":"ts/1.Introduction%20to%20TS/#typescript-vs-javascript","title":"TypeScript vs JavaScript \u2694\ufe0f","text":"Feature JavaScript TypeScript Language Type Dynamic Static (optionally) Syntax Flexible Superset of JS Runtime Interpreted Compiled to JS Tooling Good Excellent (with TS support) Learning Curve Easy Slightly Steeper <p>TypeScript doesn\u2019t replace JavaScript \u2014 it enhances it. You still write JavaScript, but with optional types and compiler checks.</p>"},{"location":"ts/1.Introduction%20to%20TS/#setting-up-a-typescript-project","title":"Setting Up a TypeScript Project","text":"<ol> <li>Initialize with <code>npm init -y</code> and install TypeScript using <code>npm install typescript --save-dev</code>.  </li> <li>Create a config using <code>npx tsc --init</code> and write <code>.ts</code> files in <code>src/</code>.  </li> <li>Compile with <code>npx tsc</code> or use <code>npx tsc --watch</code> for live recompile.  </li> <li>Use <code>tsconfig.json</code> to set <code>rootDir</code>, <code>outDir</code>, <code>strict</code>, etc.</li> </ol>"},{"location":"ts/1.Introduction%20to%20TS/#running-compiling-typescript-tsc","title":"Running &amp; Compiling TypeScript (<code>tsc</code>)","text":"<ol> <li>Compile a single file: <code>npx tsc file.ts</code>.  </li> <li>Compile entire project (uses <code>tsconfig.json</code>): <code>npx tsc</code>.  </li> <li>Enable watch mode: <code>npx tsc --watch</code>.  </li> <li>Customize output with <code>rootDir</code>, <code>outDir</code>, <code>target</code>, etc. in <code>tsconfig.json</code>.</li> </ol>"},{"location":"ts/1.Introduction%20to%20TS/#tsc-commands","title":"tsc Commands","text":"<pre><code># Initialize a tsconfig.json file\ntsc --init\n\n# Compile a single TypeScript file\ntsc file.ts\n\n# Compile the whole project based on tsconfig.json\ntsc\n\n# Watch mode - recompile on file changes\ntsc --watch\n\n# Specify custom config file\ntsc --project ./path/to/tsconfig.json\n\n# Compile and emit to a specific output directory\ntsc --outDir dist\n\n# Enable strict type-checking\ntsc --strict\n\n# Skip emitting JS files (type-check only)\ntsc --noEmit\n\n# Enable incremental builds\ntsc --incremental\n\n# Clean build outputs (when using project references)\ntsc --build --clean\n\n# Target a specific ECMAScript version\ntsc --target ES6\n\n# Set module system (CommonJS, ESNext, etc.)\ntsc --module commonjs\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/","title":"10.5.API and TypeScript","text":""},{"location":"ts/10.5.API%20and%20TypeScript/#api-and-typescript","title":"API and TypeScript","text":""},{"location":"ts/10.5.API%20and%20TypeScript/#typing-api-responses","title":"Typing API Responses","text":"<ul> <li>It's important to define interfaces or types for the data you expect from an API.</li> <li>This improves type safety and reduces runtime bugs.</li> </ul> <pre><code>// \u2705 Defining expected response types\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#fetching-data-with-fetch","title":"Fetching Data with <code>fetch</code>","text":"<ul> <li>When using <code>fetch</code>, manually cast the returned data using <code>as</code>.</li> </ul> <pre><code>// \u2705 Using fetch with TypeScript\nasync function fetchUser(): Promise&lt;User&gt; {\n  const res = await fetch(\"/api/user\");\n  const data = await res.json();\n  return data as User;\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#fetching-with-axios","title":"Fetching with Axios","text":"<ul> <li>Axios supports generics for type-safe responses.</li> </ul> <pre><code>// \u2705 Using Axios with TypeScript\nimport axios from \"axios\";\n\nasync function getUser() {\n  const response = await axios.get&lt;User&gt;(\"/api/user\");\n  console.log(response.data.id); // strongly typed\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#handling-errors-in-api-calls","title":"Handling Errors in API Calls","text":"<ul> <li>Use <code>try/catch</code> and narrow the error type for better safety.</li> </ul> <pre><code>// \u2705 Error handling with type guards\ntry {\n  const user = await fetchUser();\n} catch (err) {\n  if (err instanceof Error) {\n    console.error(\"Error:\", err.message);\n  }\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#typing-api-parameters","title":"Typing API Parameters","text":"<ul> <li>You can define types for input/query parameters to enforce structure.</li> </ul> <pre><code>// \u2705 Query parameters\ninterface QueryParams {\n  search: string;\n  page: number;\n}\n\nfunction getSearchUrl(params: QueryParams): string {\n  const query = new URLSearchParams(params as any).toString();\n  return `/api/search?${query}`;\n}\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#generics-with-api-data","title":"Generics with API Data","text":"<ul> <li>Use generics to type reusable API functions.</li> </ul> <pre><code>// \u2705 Generic API fetch\nasync function fetchData&lt;T&gt;(url: string): Promise&lt;T&gt; {\n  const res = await fetch(url);\n  const data = await res.json();\n  return data as T;\n}\n\n// Usage:\nconst user = await fetchData&lt;User&gt;(\"/api/user\");\nconst posts = await fetchData&lt;Post[]&gt;(\"/api/posts\");\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#utility-types-for-api-responses","title":"Utility Types for API Responses","text":"<ul> <li>Use <code>Partial</code>, <code>Pick</code>, or <code>Omit</code> when modifying or validating response data.</li> </ul> <pre><code>// \u2705 Creating types for updating user info\ntype UpdateUserDTO = Partial&lt;User&gt;; // All fields optional\ntype PublicUser = Pick&lt;User, \"id\" | \"name\"&gt;;\ntype PrivateUser = Omit&lt;User, \"email\"&gt;;\n</code></pre>"},{"location":"ts/10.5.API%20and%20TypeScript/#zod-or-yup-for-runtime-validation-optional","title":"Zod or Yup for Runtime Validation (Optional)","text":"<ul> <li>TypeScript only checks types at compile time.</li> <li>For runtime validation, use libraries like <code>zod</code> or <code>yup</code>.</li> </ul> <pre><code>// \u2705 Example with Zod\nimport { z } from \"zod\";\n\nconst UserSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  email: z.string().email(),\n});\n\ntype User = z.infer&lt;typeof UserSchema&gt;;\n\nasync function safeFetchUser(): Promise&lt;User&gt; {\n  const res = await fetch(\"/api/user\");\n  const data = await res.json();\n  return UserSchema.parse(data); // validates at runtime\n}\n</code></pre>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/","title":"10.Working with Third-Party Libraries","text":""},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#working-with-third-party-libraries","title":"Working with Third-Party Libraries","text":""},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#typing-external-libraries","title":"Typing External Libraries","text":"<ul> <li>Many JavaScript libraries don't ship with built-in TypeScript types.</li> <li>TypeScript will treat such imports as having <code>any</code> type, losing safety and autocomplete.</li> <li>You can manually declare types or install community-maintained ones via <code>@types</code>.</li> </ul> <pre><code>// Without types (risky)\nimport someLib from \"some-untype-lib\";\nsomeLib.doSomething(); // No type info = no IntelliSense or safety\n</code></pre>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#using-types-packages","title":"Using <code>@types</code> Packages","text":"<ul> <li>Use the DefinitelyTyped community types via npm: <code>@types/package-name</code>.</li> </ul> <pre><code>npm install --save-dev @types/lodash\n</code></pre> <pre><code>import _ from \"lodash\";\nconst chunked = _.chunk([1, 2, 3, 4], 2); // Type-safe and fully typed\n</code></pre> <ul> <li>Type packages are always dev dependencies and match the original package's name.</li> </ul>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#handling-untyped-modules","title":"Handling Untyped Modules","text":"<ul> <li>For libraries without type definitions, you can create a module declaration.</li> </ul> <pre><code>// types/my-lib.d.ts\ndeclare module \"untyped-lib\" {\n  export function doSomething(): void;\n}\n</code></pre> <pre><code>// main.ts\nimport { doSomething } from \"untyped-lib\";\ndoSomething();\n</code></pre> <ul> <li>Or use <code>any</code> temporarily while developing:</li> </ul> <pre><code>// main.ts\nconst untyped: any = require(\"some-legacy-lib\");\nuntyped.runWild(); // no type checking\n</code></pre>"},{"location":"ts/10.Working%20with%20Third-Party%20Libraries/#type-safety-in-apis-like-axios-fetch-etc","title":"Type Safety in APIs (like <code>axios</code>, <code>fetch</code>, etc.)","text":"<ul> <li>Strong typing with API clients ensures correct response and request structures.</li> </ul> <pre><code>// \u2705 Using axios with types\nimport axios from \"axios\";\n\ninterface User {\n  id: number;\n  name: string;\n}\n\nasync function getUser(id: number): Promise&lt;User&gt; {\n  const response = await axios.get&lt;User&gt;(`/api/users/${id}`);\n  return response.data;\n}\n</code></pre> <pre><code>// \u2705 Typing fetch manually\ninterface Post {\n  id: number;\n  title: string;\n}\n\nasync function fetchPost(): Promise&lt;Post&gt; {\n  const res = await fetch(\"/api/posts/1\");\n  const data: Post = await res.json();\n  return data;\n}\n</code></pre> <ul> <li>Always define interfaces for response and request payloads when calling APIs.</li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/","title":"11.5.React & Next.js Related TypeScript Types","text":""},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#react-nextjs-related-typescript-types","title":"React &amp; Next.js Related TypeScript Types","text":""},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#react-component-types","title":"\ud83d\udd39 React Component Types","text":"<pre><code>// Functional Component with props\ntype Props = { name: string };\nconst Greet: React.FC&lt;Props&gt; = ({ name }) =&gt; &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n\n// Without `React.FC` (preferred by some)\nconst GreetAlt = ({ name }: Props): JSX.Element =&gt; &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#jsx-types","title":"\ud83d\udd39 JSX Types","text":"<pre><code>const element: JSX.Element = &lt;div&gt;Hello&lt;/div&gt;;\n</code></pre> <ul> <li><code>JSX.Element</code> \u2013 Return type of JSX expressions.</li> <li><code>ReactNode</code> \u2013 Anything that can be rendered (<code>JSX.Element | string | number | null | undefined</code>).</li> <li><code>ReactElement</code> \u2013 More specific than <code>ReactNode</code>; has element metadata.</li> </ul> <pre><code>type ChildrenProps = {\n  children: React.ReactNode;\n};\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#dom-element-types","title":"\ud83d\udd39 DOM Element Types","text":"<pre><code>const divRef = useRef&lt;HTMLDivElement | null&gt;(null);\nconst inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\nconst canvasRef = useRef&lt;HTMLCanvasElement | null&gt;(null);\n</code></pre> <p>Common DOM element types:</p> <ul> <li><code>HTMLInputElement</code></li> <li><code>HTMLDivElement</code></li> <li><code>HTMLButtonElement</code></li> <li><code>HTMLTextAreaElement</code></li> <li><code>HTMLImageElement</code></li> <li><code>HTMLFormElement</code></li> <li><code>HTMLAnchorElement</code></li> <li><code>HTMLCanvasElement</code></li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#synthetic-event-types-react-events","title":"\ud83d\udd39 Synthetic Event Types (React Events)","text":"<pre><code>function handleChange(e: React.ChangeEvent&lt;HTMLInputElement&gt;) {\n  console.log(e.target.value);\n}\n\nfunction handleClick(e: React.MouseEvent&lt;HTMLButtonElement&gt;) {\n  console.log(\"Clicked!\");\n}\n</code></pre> <p>Common React event types:</p> <ul> <li><code>React.ChangeEvent&lt;T&gt;</code></li> <li><code>React.MouseEvent&lt;T&gt;</code></li> <li><code>React.FormEvent&lt;T&gt;</code></li> <li><code>React.KeyboardEvent&lt;T&gt;</code></li> <li><code>React.FocusEvent&lt;T&gt;</code></li> <li><code>React.DragEvent&lt;T&gt;</code></li> <li><code>React.SubmitEvent&lt;T&gt;</code></li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#usestate-useref-usereducer-hook-types","title":"\ud83d\udd39 useState, useRef, useReducer Hook Types","text":"<pre><code>const [count, setCount] = useState&lt;number&gt;(0);\n\nconst inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\n\ntype State = { count: number };\ntype Action = { type: \"inc\" } | { type: \"dec\" };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"inc\": return { count: state.count + 1 };\n    case \"dec\": return { count: state.count - 1 };\n    default: return state;\n  }\n}\nconst [state, dispatch] = useReducer(reducer, { count: 0 });\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#useeffect-cleanup-type","title":"\ud83d\udd39 useEffect Cleanup Type","text":"<pre><code>useEffect(() =&gt; {\n  const id = setInterval(() =&gt; console.log(\"Running...\"), 1000);\n  return () =&gt; clearInterval(id); // () =&gt; void\n}, []);\n</code></pre>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#nextjs-specific-types","title":"\ud83d\udd39 Next.js Specific Types","text":"<pre><code>import { GetStaticProps, GetServerSideProps, NextPage } from \"next\";\n\n// Page component type\nconst HomePage: NextPage = () =&gt; &lt;div&gt;Welcome&lt;/div&gt;;\n\n// Static props\nexport const getStaticProps: GetStaticProps = async (context) =&gt; {\n  return {\n    props: { message: \"Hello from SSG\" },\n  };\n};\n\n// Server-side props\nexport const getServerSideProps: GetServerSideProps = async (context) =&gt; {\n  return {\n    props: { message: \"Hello from SSR\" },\n  };\n};\n</code></pre> <p>Other Next.js types:</p> <ul> <li><code>NextApiRequest</code> / <code>NextApiResponse</code> (for API routes)</li> <li><code>AppProps</code> (for custom <code>_app.tsx</code>)</li> <li><code>NextPageContext</code> (for SSR pages)</li> </ul>"},{"location":"ts/11.5.React%20%26%20Next.js%20Related%20TypeScript%20Types/#utility-types-youll-often-use","title":"\ud83d\udd39 Utility Types You\u2019ll Often Use","text":"<pre><code>Partial&lt;Type&gt;       // Make all properties optional\nRequired&lt;Type&gt;      // Make all properties required\nReadonly&lt;Type&gt;      // Make all properties readonly\nPick&lt;Type, Keys&gt;    // Pick a subset of properties\nOmit&lt;Type, Keys&gt;    // Remove specific keys from a type\nRecord&lt;K, T&gt;        // Object with keys K and values T\n\nReturnType&lt;typeof func&gt;  // Infer function return type\nParameters&lt;typeof func&gt;  // Infer function parameters\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/","title":"11.React + TypeScript","text":""},{"location":"ts/11.React%20%2B%20TypeScript/#react-typescript","title":"React + TypeScript","text":""},{"location":"ts/11.React%20%2B%20TypeScript/#typing-functional-components","title":"\u269b\ufe0f Typing Functional Components","text":"<pre><code>// Basic functional component with props\nimport type { JSX } from \"react\"\n\ntype GreetProps = {\n    name: string\n}\n\n// hard to use 1\nexport const Greet3: React.FC&lt;GreetProps&gt; = (props) =&gt; {\n    return (\n        &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;\n    )\n}\n\n// good use 2\nexport const Greet1 = ({name}: GreetProps) =&gt; {\n    return (\n        &lt;h1&gt;Hello, {name}&lt;/h1&gt;\n    )\n}\n\n// \u2705 best use 3\nexport const Greet2 = (props: GreetProps) =&gt; {\n    return (\n        &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;\n    )\n}\n\n// extra syntax 4\nexport const Greet4 = (props: GreetProps): JSX.Element =&gt; {\n    return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#typing-props-and-state","title":"\ud83c\udfaf Typing Props and State","text":"<pre><code>// \ud83c\udfaf Typing Props and State\n\nimport React, {useState, type JSX} from 'react';\n\ntype CounterProps = {\n    initialCount?: number\n}\n\n// hard to use 1\nexport const Counter1: React.FC&lt;CounterProps&gt; = ({initialCount = 0}) =&gt; {\n    const [count, setCount] = useState(initialCount)\n\n    return (\n        &lt;div className='m-4'&gt;\n            &lt;button \n            onClick={() =&gt; setCount(count =&gt; count + 1)}\n            &gt;\n                Count: {count}\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\n\n// good use 2 and JSX.Element type is extra Explicit Return\nexport const Counter2 = ({initialCount = 0}: CounterProps): JSX.Element =&gt; {\n    const [count, setCount] = useState(initialCount)\n\n    return (\n        &lt;div className='m-4'&gt;\n            &lt;button \n            onClick={() =&gt; setCount(count =&gt; count + 1)}\n            &gt;\n                Count: {count}\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\n// best use 3\nexport const Counter3 = (props: CounterProps) =&gt; {\n    const [count, setCount] = useState(props.initialCount ?? 0)\n\n    return (\n        &lt;div className='m-4'&gt;\n            &lt;button \n            onClick={() =&gt; setCount(count =&gt; count + 1)}\n            &gt;\n                Count: {count}\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#react-hooks-with-typescript","title":"\ud83e\udde0 React Hooks with TypeScript","text":""},{"location":"ts/11.React%20%2B%20TypeScript/#useref-in-typescript","title":"\ud83e\uddf7 <code>useRef</code> in TypeScript","text":"<ul> <li><code>useRef</code> lets you persist values between renders without causing a re-render.</li> <li>Often used to reference DOM elements or store mutable variables.</li> </ul> <pre><code>import { useRef, useEffect } from 'react';\n\ntype InputRef = HTMLInputElement | null;\n\nconst UseRefExample = () =&gt; {\n  const inputRef = useRef&lt;InputRef&gt;(null);\n\n  useEffect(() =&gt; {\n    inputRef.current?.focus(); // Auto-focus on mount\n  }, []);\n\n  return &lt;input ref={inputRef} type=\"text\" placeholder=\"I will be focused\" /&gt;;\n};\n</code></pre> <ul> <li><code>useRef&lt;InputRef&gt;(null)</code> ensures proper typing: <code>inputRef.current</code> is of type <code>HTMLInputElement | null</code>.</li> </ul>"},{"location":"ts/11.React%20%2B%20TypeScript/#usereducer-in-typescript","title":"\ud83e\udde0 <code>useReducer</code> in TypeScript","text":"<ul> <li><code>useReducer</code> is useful for more complex state logic or state transitions.</li> <li>Works like a mini Redux reducer.</li> </ul> <pre><code>import { useReducer } from 'react';\n\ntype Action = {type: 'increase'} | {type: 'decrease'}\ntype State = {count: number}\n\nconst reducerFunction = (state: State, action: Action) =&gt; {\n    switch(action.type) {\n        case \"increase\": return {count: state.count + 1}\n        case \"decrease\": return {count: state.count - 1}\n        default: return state\n    }\n}\n\nexport const ReducerExample = () =&gt; {\n    const initialValue = {count: 0}\n    const [state, dispatch] = useReducer(reducerFunction, initialValue)\n    const handleIncrease = () =&gt; (dispatch({type: \"increase\"}))\n    const handleDecrease = () =&gt; (dispatch({type: \"decrease\"}))\n    return (\n        &lt;div&gt;\n            &lt;p&gt;Count: {state.count}&lt;/p&gt;\n            &lt;button onClick={handleIncrease}&gt;Increase&lt;/button&gt;\n            &lt;button onClick={handleDecrease}&gt;Decrease&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <ul> <li><code>useReducer(reducer, initialState)</code> returns <code>[state, dispatch]</code></li> <li>TypeScript infers types from <code>State</code> and <code>Action</code>, so you get full IntelliSense.</li> </ul>"},{"location":"ts/11.React%20%2B%20TypeScript/#custom-hooks-with-generics","title":"\ud83e\uddf5 Custom Hooks with Generics","text":"<pre><code>function useArray&lt;T&gt;(initial: T[]): [T[], (item: T) =&gt; void] {\n  const [array, setArray] = useState&lt;T[]&gt;(initial);\n  const add = (item: T) =&gt; setArray([...array, item]);\n  return [array, add];\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#context-api-with-typescript","title":"\ud83e\udde0 Context API with TypeScript","text":"<pre><code>type Theme = 'light' | 'dark';\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () =&gt; void;\n};\n\nconst ThemeContext = createContext&lt;ThemeContextType | undefined&gt;(undefined);\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#react-router-typescript","title":"\ud83d\udd0c React Router + TypeScript","text":"<pre><code>import { useParams } from 'react-router-dom';\n\ntype RouteParams = {\n  id: string;\n};\n\nconst DetailPage = () =&gt; {\n  const { id } = useParams&lt;RouteParams&gt;();\n  return &lt;div&gt;Item ID: {id}&lt;/div&gt;;\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#forms-controlled-inputs","title":"\ud83e\uddfe Forms &amp; Controlled Inputs","text":"<pre><code>const FormExample = () =&gt; {\n  const [name, setName] = useState&lt;string&gt;(\"\");\n\n  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setName(e.target.value);\n  };\n\n  return &lt;input value={name} onChange={handleChange} /&gt;;\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#react-hook-form-typescript","title":"\ud83e\uddf0 React Hook Form + TypeScript","text":"<pre><code>import { useForm, SubmitHandler } from \"react-hook-form\";\n\ntype Inputs = {\n  email: string;\n  password: string;\n};\n\nconst MyForm = () =&gt; {\n  const { register, handleSubmit } = useForm&lt;Inputs&gt;();\n\n  const onSubmit: SubmitHandler&lt;Inputs&gt; = data =&gt; console.log(data);\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;input {...register(\"email\")} /&gt;\n      &lt;input type=\"password\" {...register(\"password\")} /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#typing-children-in-props","title":"\ud83e\uddf1 Typing <code>children</code> in Props","text":"<pre><code>type CardProps = {\n  children: React.ReactNode;\n};\n\nconst Card = ({ children }: CardProps) =&gt; &lt;div className=\"card\"&gt;{children}&lt;/div&gt;;\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#slot-pattern-component-composition","title":"\ud83e\uddf1 Slot Pattern &amp; Component Composition","text":"<pre><code>type LayoutProps = {\n  header: React.ReactNode;\n  content: React.ReactNode;\n};\n\nconst Layout = ({ header, content }: LayoutProps) =&gt; (\n  &lt;&gt;\n    &lt;header&gt;{header}&lt;/header&gt;\n    &lt;main&gt;{content}&lt;/main&gt;\n  &lt;/&gt;\n);\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#advanced-custom-hook","title":"\ud83e\ude9d Advanced Custom Hook","text":"<pre><code>function useDebounce&lt;T&gt;(value: T, delay: number): T {\n  const [debounced, setDebounced] = useState(value);\n\n  useEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; setDebounced(value), delay);\n    return () =&gt; clearTimeout(timer);\n  }, [value, delay]);\n\n  return debounced;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#testing-react-components","title":"\ud83e\uddea Testing React Components","text":"<pre><code>import { render, screen } from '@testing-library/react';\nimport MyComponent from './MyComponent';\n\ntest(\"renders correctly\", () =&gt; {\n  render(&lt;MyComponent /&gt;);\n  expect(screen.getByText(\"Hello\")).toBeInTheDocument();\n});\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#higher-order-components-hocs","title":"\ud83d\ude80 Higher Order Components (HOCs)","text":"<pre><code>function withLogging&lt;P&gt;(Component: React.ComponentType&lt;P&gt;) {\n  return (props: P) =&gt; {\n    console.log(\"Rendering\", Component.name);\n    return &lt;Component {...props} /&gt;;\n  };\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#generic-context-factory","title":"\ud83d\udd01 Generic Context Factory","text":"<pre><code>type AuthContextType&lt;T&gt; = {\n  user: T | null;\n  login: (user: T) =&gt; void;\n};\n\nfunction createAuthContext&lt;T&gt;() {\n  const context = createContext&lt;AuthContextType&lt;T&gt; | undefined&gt;(undefined);\n  return context;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#typing-event-handlers","title":"\ud83e\udde9 Typing Event Handlers","text":"<pre><code>const handleClick = (event: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; {\n  console.log(\"Button clicked\", event);\n};\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#where-to-keep-types-interfaces-enums","title":"\ud83d\udcc1 Where to Keep Types, Interfaces, Enums","text":"<ul> <li>Create a <code>/types</code> or <code>/interfaces</code> folder at the root or in <code>src/</code></li> <li>For shared types: <code>src/types/global.d.ts</code> or <code>src/types/common.ts</code></li> <li>Group by domain (e.g. <code>auth/types.ts</code>, <code>user/interfaces.ts</code>, etc.)</li> <li>You can also colocate near components if types are very specific</li> </ul>"},{"location":"ts/11.React%20%2B%20TypeScript/#component-level-generics","title":"\ud83e\udde0 Component-Level Generics","text":"<pre><code>type ListProps&lt;T&gt; = {\n  items: T[];\n  renderItem: (item: T) =&gt; React.ReactNode;\n};\n\nfunction List&lt;T&gt;({ items, renderItem }: ListProps&lt;T&gt;) {\n  return &lt;ul&gt;{items.map(renderItem)}&lt;/ul&gt;;\n}\n</code></pre>"},{"location":"ts/11.React%20%2B%20TypeScript/#summary","title":"\u2705 Summary","text":"<p>This section now covers:</p> <ul> <li>Functional components</li> <li>Props, State, Refs, Reducers</li> <li>Forms, Controlled inputs</li> <li>React Router</li> <li>Custom hooks with generics</li> <li>Context API</li> <li>Typing children</li> <li>Hook forms</li> <li>Testing</li> <li>HOCs</li> <li>Slot pattern &amp; composition</li> <li>Advanced generic contexts</li> <li>Event handler types</li> <li>Where to place types/interfaces/enums</li> <li>Generic React components</li> </ul>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/","title":"12.Node.js + TypeScript","text":""},{"location":"ts/12.Node.js%20%2B%20TypeScript/#nodejs-typescript","title":"Node.js + TypeScript","text":""},{"location":"ts/12.Node.js%20%2B%20TypeScript/#setting-up-nodejs-with-ts","title":"Setting up Node.js with TS","text":"<ul> <li>Install TypeScript and necessary tools:</li> </ul> <pre><code>npm install typescript ts-node @types/node --save-dev\n</code></pre> <ul> <li>Create a <code>tsconfig.json</code>:</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"CommonJS\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  }\n}\n</code></pre> <ul> <li>Entry file: <code>src/index.ts</code></li> </ul> <pre><code>console.log(\"\u2705 Node + TypeScript is working!\");\n</code></pre>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/#typing-express-apps","title":"Typing Express Apps","text":"<ul> <li>Use <code>@types/express</code> for full type support.</li> </ul> <pre><code>npm install express\nnpm install --save-dev @types/express\n</code></pre> <pre><code>import express, { Request, Response } from \"express\";\n\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/\", (req: Request, res: Response) =&gt; {\n  res.send(\"Hello from TypeScript + Express!\");\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n</code></pre>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/#typing-file-system-path-process-apis","title":"Typing File System, Path, Process APIs","text":"<ul> <li>Node\u2019s built-in modules have types via <code>@types/node</code>.</li> </ul> <pre><code>import fs from \"fs\";\nimport path from \"path\";\nimport process from \"process\";\n\n// \u2705 Reading a file\nconst data = fs.readFileSync(path.join(__dirname, \"data.txt\"), \"utf-8\");\nconsole.log(data);\n\n// \u2705 Environment Variables\nconsole.log(\"Running in:\", process.env.NODE_ENV);\n</code></pre>"},{"location":"ts/12.Node.js%20%2B%20TypeScript/#writing-cli-apps-with-ts","title":"Writing CLI Apps with TS","text":"<ul> <li>Use <code>process.argv</code>, <code>readline</code>, or third-party libs like <code>yargs</code>.</li> </ul> <pre><code>// cli.ts\nconst args = process.argv.slice(2);\nconsole.log(\"Arguments:\", args);\n\n// Using readline for input\nimport readline from \"readline\";\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nrl.question(\"What's your name? \", (name) =&gt; {\n  console.log(`Hello, ${name}!`);\n  rl.close();\n});\n</code></pre> <ul> <li>Run CLI tool using <code>ts-node</code>:</li> </ul> <pre><code>npx ts-node src/cli.ts\n</code></pre>"},{"location":"ts/13.Advanced%20Topics/","title":"13.Advanced Topics","text":""},{"location":"ts/13.Advanced%20Topics/#advanced-topics-in-typescript","title":"Advanced Topics in TypeScript","text":""},{"location":"ts/13.Advanced%20Topics/#decorators-in-typescript","title":"Decorators in TypeScript","text":"<ul> <li>Decorators are special annotations (prefixed with <code>@</code>) used to modify classes, methods, properties, etc.</li> <li>Must enable in <code>tsconfig.json</code>:</li> </ul> <pre><code>{\n  \"experimentalDecorators\": true\n}\n</code></pre> <pre><code>function Log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.value;\n  descriptor.value = function (...args: any[]) {\n    console.log(`Calling ${propertyKey} with`, args);\n    return original.apply(this, args);\n  };\n}\n\nclass User {\n  @Log\n  sayHello(name: string) {\n    return `Hello, ${name}`;\n  }\n}\n</code></pre>"},{"location":"ts/13.Advanced%20Topics/#typescript-compiler-api","title":"TypeScript Compiler API","text":"<ul> <li>You can programmatically analyze, manipulate, or transform TypeScript code using the Compiler API.</li> </ul> <pre><code>import ts from \"typescript\";\n\nconst source = \"let x: number = 42;\";\nconst sourceFile = ts.createSourceFile(\"test.ts\", source, ts.ScriptTarget.ES2015);\n\nts.forEachChild(sourceFile, (node) =&gt; {\n  if (ts.isVariableStatement(node)) {\n    console.log(\"Variable statement found.\");\n  }\n});\n</code></pre> <ul> <li>Useful for tools like linters, code mods, or custom transpilers.</li> </ul>"},{"location":"ts/13.Advanced%20Topics/#ast-parsing-and-transformation","title":"AST Parsing and Transformation","text":"<ul> <li>TypeScript source code is converted into an AST (Abstract Syntax Tree).</li> <li>You can traverse and transform the AST to create custom compile-time tools.</li> </ul> <pre><code>const transformer: ts.TransformerFactory&lt;ts.SourceFile&gt; = (context) =&gt; {\n  return (rootNode) =&gt; {\n    function visit(node: ts.Node): ts.Node {\n      // Example: remove all `console.log` statements\n      if (ts.isExpressionStatement(node) &amp;&amp; ts.isCallExpression(node.expression)) {\n        if (ts.isPropertyAccessExpression(node.expression.expression) &amp;&amp;\n            node.expression.expression.expression.getText() === \"console\" &amp;&amp;\n            node.expression.expression.name.getText() === \"log\") {\n          return ts.factory.createEmptyStatement();\n        }\n      }\n      return ts.visitEachChild(node, visit, context);\n    }\n    return ts.visitNode(rootNode, visit);\n  };\n};\n</code></pre>"},{"location":"ts/13.Advanced%20Topics/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>TypeScript adds type safety but can slow down development if misconfigured.</li> </ul> <p>Tips to improve performance:</p> <ul> <li>Limit project scope with <code>include</code> and <code>exclude</code> in <code>tsconfig.json</code>.</li> <li>Avoid unnecessary re-checks using <code>incremental: true</code>.</li> <li>Use <code>skipLibCheck: true</code> to skip checking <code>node_modules</code>.</li> <li>Prefer <code>esnext</code> module targets for faster builds.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"module\": \"esnext\",\n    \"target\": \"esnext\"\n  }\n}\n</code></pre>"},{"location":"ts/14.Best%20Practices/","title":"14.Best Practices","text":""},{"location":"ts/14.Best%20Practices/#best-practices-in-typescript","title":"Best Practices in TypeScript","text":""},{"location":"ts/14.Best%20Practices/#avoiding-any","title":"Avoiding <code>any</code>","text":"<ul> <li>Avoid using <code>any</code> as it disables type checking and defeats the purpose of TypeScript.</li> <li>Use <code>unknown</code> when you don't know the type yet \u2014 it's safer and forces type narrowing.</li> </ul> <pre><code>// \u274c Bad\nlet value: any = \"something\";\nvalue.doSomething(); // No error, but may fail at runtime\n\n// \u2705 Good\nlet value: unknown = \"something\";\nif (typeof value === \"string\") {\n  console.log(value.toUpperCase());\n}\n</code></pre>"},{"location":"ts/14.Best%20Practices/#favoring-unknown-and-never","title":"Favoring <code>unknown</code> and <code>never</code>","text":"<ul> <li>Use <code>unknown</code> over <code>any</code> to enforce type checking.</li> <li>Use <code>never</code> to represent unreachable or impossible states.</li> </ul> <pre><code>function fail(message: string): never {\n  throw new Error(message);\n}\n\nfunction exhaustiveCheck(value: \"a\" | \"b\") {\n  if (value === \"a\") return;\n  if (value === \"b\") return;\n\n  // value is of type never here\n  fail(\"Unhandled case\");\n}\n</code></pre>"},{"location":"ts/14.Best%20Practices/#structuring-typescript-projects","title":"Structuring TypeScript Projects","text":"<ul> <li>Use <code>src/</code> for source files, <code>types/</code> or <code>@types/</code> for global types.</li> <li>Keep interfaces and types close to the code or in shared folders.</li> </ul> <pre><code>project-root/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 types/\n\u2502   \u2514\u2500\u2500 global.d.ts\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 package.json\n</code></pre> <ul> <li>Prefer named exports over default exports for clarity and tooling benefits.</li> </ul>"},{"location":"ts/14.Best%20Practices/#consistent-naming-conventions","title":"Consistent Naming Conventions","text":"<ul> <li>Use PascalCase for types and interfaces:</li> </ul> <pre><code>interface UserProfile {\n  name: string;\n  age: number;\n}\n</code></pre> <ul> <li>Use camelCase for variables and functions:</li> </ul> <pre><code>const getUserName = (user: UserProfile): string =&gt; user.name;\n</code></pre> <ul> <li>Prefix boolean variables with <code>is</code>, <code>has</code>, <code>can</code>, etc.:</li> </ul> <pre><code>let isVisible: boolean = true;\n</code></pre>"},{"location":"ts/14.Best%20Practices/#linting-with-eslint-typescript","title":"Linting with ESLint + TypeScript","text":"<ul> <li>Install ESLint with TypeScript support:</li> </ul> <pre><code>npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n</code></pre> <ul> <li>Example <code>.eslintrc.js</code> config:</li> </ul> <pre><code>module.exports = {\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  extends: [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n  ],\n  rules: {\n    \"@typescript-eslint/no-explicit-any\": \"warn\",\n    \"@typescript-eslint/explicit-function-return-type\": \"off\",\n  },\n};\n</code></pre> <ul> <li>Run linting:</li> </ul> <pre><code>npx eslint . --ext .ts,.tsx\n</code></pre>"},{"location":"ts/15.Testing%20in%20TypeScript/","title":"15.Testing in TypeScript","text":""},{"location":"ts/15.Testing%20in%20TypeScript/#testing-in-typescript","title":"Testing in TypeScript","text":""},{"location":"ts/15.Testing%20in%20TypeScript/#typescript-with-jest-vitest","title":"TypeScript with Jest / Vitest","text":"<ul> <li>Install Jest + TypeScript support:</li> </ul> <pre><code>npm install --save-dev jest ts-jest @types/jest\n</code></pre> <ul> <li>Initialize Jest config:</li> </ul> <pre><code>npx ts-jest config:init\n</code></pre> <ul> <li>Example test: <code>sum.test.ts</code></li> </ul> <pre><code>// \u2705 sum.ts\nexport const sum = (a: number, b: number): number =&gt; a + b;\n\n// \u2705 sum.test.ts\nimport { sum } from \"./sum\";\n\ntest(\"adds 1 + 2 = 3\", () =&gt; {\n  expect(sum(1, 2)).toBe(3);\n});\n</code></pre> <ul> <li>Add test script to <code>package.json</code>:</li> </ul> <pre><code>\"scripts\": {\n  \"test\": \"jest\"\n}\n</code></pre>"},{"location":"ts/15.Testing%20in%20TypeScript/#typing-mocks-and-stubs","title":"Typing Mocks and Stubs","text":"<ul> <li>Use <code>jest.mock</code> and <code>jest.fn()</code> for mocking dependencies.</li> <li>You can type your mocks explicitly to retain type safety.</li> </ul> <pre><code>// service.ts\nexport const fetchData = (): string =&gt; \"real data\";\n\n// service.test.ts\nimport * as service from \"./service\";\n\njest.mock(\"./service\");\n\nconst mockedService = service as jest.Mocked&lt;typeof service&gt;;\n\nmockedService.fetchData.mockReturnValue(\"mocked data\");\n\ntest(\"uses mocked service\", () =&gt; {\n  expect(mockedService.fetchData()).toBe(\"mocked data\");\n});\n</code></pre>"},{"location":"ts/15.Testing%20in%20TypeScript/#using-ts-jest-or-other-compilers","title":"Using <code>ts-jest</code> or Other Compilers","text":"<ul> <li><code>ts-jest</code> compiles TypeScript before running tests, without needing a separate build step.</li> <li>Alternatively, you can use <code>babel-jest</code> with a <code>babel.config.js</code> for custom transforms.</li> </ul> <pre><code>npm install --save-dev babel-jest @babel/preset-typescript\n</code></pre> <pre><code>// babel.config.js\nmodule.exports = {\n  presets: [\"@babel/preset-env\", \"@babel/preset-typescript\"],\n};\n</code></pre> <ul> <li>Then use <code>jest</code> as normal with <code>.ts</code> test files.</li> </ul>"},{"location":"ts/15.Testing%20in%20TypeScript/#vitest-alternative-to-jest","title":"Vitest (Alternative to Jest)","text":"<pre><code>npm install -D vitest\n</code></pre> <pre><code>// counter.ts\nexport const double = (x: number): number =&gt; x * 2;\n\n// counter.test.ts\nimport { describe, it, expect } from \"vitest\";\nimport { double } from \"./counter\";\n\ndescribe(\"double\", () =&gt; {\n  it(\"should double the number\", () =&gt; {\n    expect(double(2)).toBe(4);\n  });\n});\n</code></pre> <ul> <li>Add a script in <code>package.json</code>:</li> </ul> <pre><code>\"scripts\": {\n  \"test\": \"vitest\"\n}\n</code></pre>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/","title":"16.Troubleshooting and Debugging","text":""},{"location":"ts/16.Troubleshooting%20and%20Debugging/#troubleshooting-and-debugging-in-typescript","title":"Troubleshooting and Debugging in TypeScript","text":""},{"location":"ts/16.Troubleshooting%20and%20Debugging/#common-type-errors","title":"Common Type Errors","text":"<ul> <li>\"Type 'X' is not assignable to type 'Y'\"   Happens when a value is used in an incompatible context.</li> </ul> <pre><code>let age: number = \"25\"; // \u274c Error: Type 'string' is not assignable to type 'number'\n\n// \u2705 Fix:\nlet age: number = parseInt(\"25\");\n</code></pre> <ul> <li>\"Object is possibly 'undefined'\"   TypeScript warns if a variable may be <code>undefined</code>.</li> </ul> <pre><code>function getLength(str?: string): number {\n  return str.length; // \u274c Error\n\n  // \u2705 Fix:\n  return str ? str.length : 0;\n}\n</code></pre>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/#debugging-with-source-maps","title":"Debugging with Source Maps","text":"<ul> <li>Source maps let you debug TypeScript in browser or Node.js using original <code>.ts</code> files. tsconfig.json</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"outDir\": \"dist\"\n  }\n}\n</code></pre> <ul> <li>Use browser DevTools or Node.js debuggers (like VSCode or Chrome DevTools).</li> </ul>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/#using-vscode-intellisense","title":"Using VSCode IntelliSense","text":"<ul> <li>TypeScript powers VSCode IntelliSense: autocompletions, tooltips, and error hints.</li> <li>Best practices:</li> <li>Keep <code>tsconfig.json</code> properly configured.</li> <li>Use <code>.d.ts</code> files for global types.</li> <li>Avoid <code>any</code> to get accurate suggestions.</li> </ul> <p>Tip: Hover over symbols to see inferred types and quick fixes.</p>"},{"location":"ts/16.Troubleshooting%20and%20Debugging/#fixing-type-mismatches","title":"Fixing Type Mismatches","text":"<ul> <li>Use type assertions when you know the type:</li> </ul> <pre><code>const input = document.querySelector(\"input\") as HTMLInputElement;\nconsole.log(input.value);\n</code></pre> <ul> <li>Use <code>typeof</code>, <code>instanceof</code>, or custom type guards for runtime type checks:</li> </ul> <pre><code>function printLength(value: unknown) {\n  if (typeof value === \"string\") {\n    console.log(value.length); // \u2705 Safe\n  }\n}\n</code></pre> <ul> <li>Refactor complex types with interfaces, type aliases, and narrowing logic.</li> </ul> <pre><code>type ID = string | number;\n\nfunction normalizeId(id: ID): string {\n  return typeof id === \"number\" ? id.toString() : id;\n}\n</code></pre>"},{"location":"ts/17.Appendix/","title":"17.Appendix","text":""},{"location":"ts/17.Appendix/#appendix","title":"Appendix","text":""},{"location":"ts/17.Appendix/#glossary-of-typescript-terms","title":"Glossary of TypeScript Terms","text":"<ul> <li>Type Annotation \u2013 Explicitly declaring the type of a variable or parameter.</li> <li>Interface \u2013 A structure used to define the shape of an object.</li> <li>Type Alias \u2013 An alias for a type using <code>type</code>.</li> <li>Literal Type \u2013 A type that can be a specific string, number, or boolean.</li> <li>Union Type \u2013 A type composed of multiple types (<code>A | B</code>).</li> <li>Intersection Type \u2013 Combines multiple types into one (<code>A &amp; B</code>).</li> <li>Generic \u2013 A way to write code that works with many types.</li> <li>Enum \u2013 A named constant set (numeric or string values).</li> <li>Tuple \u2013 An array with fixed length and types per index.</li> </ul>"},{"location":"ts/17.Appendix/#cheatsheet-of-common-types","title":"Cheatsheet of Common Types","text":"<pre><code>// Primitive Types\nlet str: string;\nlet num: number;\nlet bool: boolean;\nlet undef: undefined;\nlet nul: null;\nlet sym: symbol;\n\n// Arrays and Tuples\nlet arr: number[] = [1, 2, 3];\nlet tuple: [string, number] = [\"Age\", 30];\n\n// Object and Function\nlet obj: { name: string; age: number };\nlet func: (x: number) =&gt; string;\n\n// Union and Intersection\nlet id: string | number;\ntype Admin = { role: string };\ntype User = { name: string };\ntype AdminUser = Admin &amp; User;\n\n// Literal and Enum\nlet direction: \"left\" | \"right\";\nenum Color { Red, Green, Blue }\n\n// Type Alias and Interface\ntype Point = { x: number; y: number };\ninterface Shape { area(): number; }\n\n// Generics\nfunction wrap&lt;T&gt;(value: T): T[] {\n  return [value];\n}\n</code></pre>"},{"location":"ts/17.Appendix/#useful-resources-docs","title":"Useful Resources &amp; Docs","text":"<ul> <li>TypeScript Official Docs</li> <li>TypeScript Handbook</li> <li>TS Playground</li> <li>DefinitelyTyped Repository</li> <li>Awesome TypeScript</li> </ul>"},{"location":"ts/17.Appendix/#community-and-support","title":"Community and Support","text":"<ul> <li>TypeScript Discord</li> <li>Stack Overflow (TypeScript)</li> <li>Reddit: r/typescript</li> <li>GitHub Discussions</li> </ul>"},{"location":"ts/2.Basic%20Types/","title":"2.Basic Types and Type Inference, Annotations & Assertions","text":""},{"location":"ts/2.Basic%20Types/#basic-types-and-type-inference-annotations-assertions","title":"Basic Types and Type Inference, Annotations &amp; Assertions","text":""},{"location":"ts/2.Basic%20Types/#basic-types","title":"Basic Types","text":"<pre><code>// \u2705 Primitive Types\nlet yourname: string = \"Alice\";\nlet age: number = 30;\nlet isActive: boolean = true;\nlet nothing: null = null;\nlet notDefined: undefined = undefined;\nlet normalNum = 9007199254740991; // Max safe integer in JS\nlet bigIntValue: bigint = 9007199254740992n; // Beyond safe limit\n// go to tsconfig.json and change \"target\" value to \"ES2020\"\nconsole.log(bigIntValue + 1n); // 9007199254740993n\nlet symbolValue: symbol = Symbol(\"id\");\n\n// \u2705 Special Types\n// variable should not be 'any' type like this\nlet anythingOne;\n// Even if we give 'any' to this it will auto detect and convert to string.\n// This is also known as Type Inference\nlet anythingTwo: any = \"can be anything\";\nanythingTwo = 20;\n\nlet uncertain: unknown = 42;\nif (typeof uncertain === \"number\")\n    uncertain.toFixed();\n\nfunction sayHi(): void {\n    console.log(\"Hi\");\n}\n\nfunction throwError(): never {\n    throw new Error(\"Crash!\");\n}\n// throwError()\n\n// \u2705 Arrays and Tuples\nlet numbers: number[] = [1, 2, 3];\nlet names: Array&lt;string&gt; = [\"Tom\", \"Jerry\"];\n// tuples are fixed means this [20, \"score\"] won't work\nlet tupleExample: [string, number] = [\"score\", 100];\n\n// \u2705 Enums 1\nenum Direction {\n    Up,\n    Down,\n    Left,\n    Right\n}\nlet move: Direction = Direction.Up;\n\n// \u2705 Enums 2\nenum UserRoles {\n    ADMIN = \"admin\",\n    GUEST = \"guest\",\n    SUPER_ADMIN = \"super_admin\"\n}\nlet UserRole: UserRoles = UserRoles.ADMIN\n\n// \u2705 Literal Types\nlet response: \"yes\" | \"no\" = \"yes\";\n\n// \u2705 Type Aliases\ntype User = {\n    username: string;\n    age: number;\n};\nconst user: User = { username: \"Bob\", age: 28 };\n\n// \u2705 Reference Types (Objects, Arrays, Functions)\nlet person: { username: string; isEmployed: boolean } = {\n    username: \"Eve\",\n    isEmployed: true\n};\n\nlet greet: (username: string) =&gt; string = (username) =&gt; `Hello, ${username}`;\n</code></pre>"},{"location":"ts/2.Basic%20Types/#type-inference-annotations-assertions","title":"Type Inference, Annotations &amp; Assertions","text":"<pre><code>// \u2705 Type Inference\n// TypeScript automatically infers the type based on the assigned value\nlet message = \"Hello TypeScript\";  // inferred as string\nlet count = 42;                    // inferred as number\n\n// \u2705 Type Annotations\n// You explicitly declare the type of a variable\nlet title: string = \"Typed Title\";\nlet isActive: boolean = true;\nlet total: number;\ntotal = 100;\n\n// \u2705 Type Assertions (Casting)\n// You tell TypeScript the exact type of a value (used with `unknown` or `any`)\nlet someValue: unknown = \"I am a string\";\n\n// Using `as` syntax (recommended)\n// Type Casting\nlet strLength: number = (someValue as string).length;\n\n// \u2705 Angle-bracket syntax (not allowed in `.tsx` files)\n// Equivalent to `as`, but can't be used in JSX (e.g., React projects)\nlet anotherValue: unknown = \"Another string\";\nlet anotherLength: number = (&lt;string&gt;anotherValue).length;\n\n// \u2705 Summary:\n// - Use type inference when possible (cleaner and safer).\n// - Use type annotations when type isn\u2019t obvious or needed for clarity.\n// - Use type assertions when you're sure of a value\u2019s type (e.g., after `unknown`).\n// - Prefer `as` syntax especially in JSX/React projects.\n</code></pre>"},{"location":"ts/2.Basic%20Types/#type-assertions-aka-type-casting","title":"\ud83d\udd01 Type Assertions (aka Type Casting)","text":"<p>TypeScript sometimes cannot infer the correct type. Type assertions let you tell the compiler \"trust me, I know what I\u2019m doing.\"</p> <p>They do not change the runtime type\u2014only instruct the compiler.</p> <pre><code>let someValue: any = \"Hello, world\";\nlet strLength: number = (someValue as string).length;\n</code></pre> <p>or (in non-JSX files):</p> <pre><code>let strLength: number = (&lt;string&gt;someValue).length;\n</code></pre>"},{"location":"ts/2.Basic%20Types/#as-vs-angle-bracket-syntax","title":"\u2694\ufe0f <code>as</code> vs Angle-Bracket Syntax","text":"Feature <code>as</code> Syntax Angle-Bracket Syntax Syntax <code>value as Type</code> <code>&lt;Type&gt;value</code> JSX Compatibility \u2705 Works in <code>.tsx</code> \u274c Not allowed in <code>.tsx</code> files Preferred Usage Always use <code>as</code> in React/JSX files Use angle-brackets in <code>.ts</code> files <pre><code>// \u2705 Preferred in all contexts\nlet input = someValue as string;\n\n// \u274c Will cause error in TSX files\nlet input = &lt;string&gt;someValue;\n</code></pre>"},{"location":"ts/2.Basic%20Types/#examples","title":"\ud83e\uddea Examples","text":""},{"location":"ts/2.Basic%20Types/#dom-casting","title":"DOM Casting","text":"<pre><code>const el = document.querySelector(\"#my-input\") as HTMLInputElement;\nel.value = \"Updated\";\n</code></pre>"},{"location":"ts/2.Basic%20Types/#using-unknown-with-assertions","title":"Using <code>unknown</code> with assertions","text":"<pre><code>function handle(data: unknown) {\n  const parsed = data as string; // Asserting unknown as string\n}\n</code></pre>"},{"location":"ts/2.Basic%20Types/#double-assertion-use-carefully","title":"\u26a0\ufe0f Double Assertion (use carefully)","text":"<pre><code>const crazy = (\"text\" as unknown) as number; // \u26a0\ufe0f Avoid unless absolutely necessary\n</code></pre> <p>This should only be used in edge cases, like dealing with very dynamic third-party data.</p>"},{"location":"ts/2.Basic%20Types/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Prefer inference when the type is clear.</li> <li>Use annotations when inference fails or for clarity.</li> <li>Use <code>as</code> syntax consistently, especially in React projects.</li> <li>Avoid unnecessary or unsafe assertions \u2014 trust the type system.</li> <li>Never use type assertions to suppress real type errors unless you are 100% confident.</li> </ul> <pre><code>// \u274c BAD\nconst user = getUser() as any;\nuser.nonExistentMethod();\n\n// \u2705 BETTER\nconst user = getUser() as { name: string; age: number };\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/","title":"3.Functions, Objects and Classes in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#functions-objects-and-classes-in-typescript","title":"Functions, Objects and Classes in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#1-functions-in-typescript","title":"1. Functions in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#function-types","title":"Function Types","text":"<ul> <li>Function types let you define the expected argument and return types. They help catch mismatches at compile time and improve readability.</li> </ul> <pre><code>// \u2705 Function Types\nfunction add(x: number, y: number): number {\n  return x + y;\n}\nconst multiply: (a: number, b: number) =&gt; number = (a, b) =&gt; a * b;\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#optional-default-parameters","title":"Optional &amp; Default Parameters","text":"<ul> <li>You can mark parameters as optional with ?, or assign default values. This provides flexibility in how functions are called.</li> </ul> <pre><code>// \u2705 Optional &amp; Default Parameters\nfunction greet(name: string = \"Guest\", title?: string): string {\n  return title ? `${title} ${name}` : `Hello, ${name}`;\n}\ngreet();                    // \"Hello, Guest\"\ngreet(\"Alice\", \"Ms.\");      // \"Ms. Alice\"\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#rest-parameters","title":"Rest Parameters","text":"<ul> <li>Rest parameters allow functions to accept multiple arguments as an array. They are useful for variable-length inputs like sumAll(...nums).</li> </ul> <pre><code>// \u2705 Rest Parameters\nfunction sumAll(...nums: number[]): number {\n  return nums.reduce((total, n) =&gt; total + n, 0);\n}\nsumAll(1, 2, 3, 4); // 10\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#function-overloads","title":"Function Overloads","text":"<ul> <li>Function overloading lets you define multiple signatures for a single function. It helps provide different behavior based on input types.</li> </ul> <pre><code>// \u2705 Function Overloads\nfunction formatValue(value: number): string;\nfunction formatValue(label: string): string;\nfunction formatValue(label: string, value: number | string): string;\nfunction formatValue(a: string | number, b?: string | number): string {\n  if (typeof b === \"undefined\") {\n    // Only one argument\n    if (typeof a === \"number\") return a.toLocaleString();\n    return a; // just a string label\n  }\n\n  // Two arguments\n  if (typeof b === \"number\") {\n    return `${a}: ${b.toLocaleString()}`;\n  }\n\n  return `${a}: ${b}`;\n}\n\nconsole.log(formatValue(1000));                 // \"1,000\"\nconsole.log(formatValue(\"price\", 9999));        // \"price: 9,999\"\nconsole.log(formatValue(\"Name\", \"Alice\"));      // \"Name: Alice\"\nconsole.log(formatValue(\"Score\", 42));          // \"Score: 42\"\nconsole.log(formatValue(\"Just a label\"));       // \"Just a label\"\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#this-in-functions","title":"<code>this</code> in Functions","text":"<ul> <li>In TypeScript, you can explicitly type the this context of a function. This prevents incorrect usage and makes method binding clearer.</li> </ul> <pre><code>// \u2705 `this` in Functions\nconst obj = {\n  count: 0,\n  increment(this: { count: number }) {\n    this.count++;\n  }\n};\nobj.increment();\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#arrow-functions","title":"Arrow Functions","text":"<ul> <li>Arrow functions are concise and do not have their own this context. They are useful for callbacks but should be used carefully inside objects.</li> </ul> <pre><code>// \u2705 Arrow Functions\nconst square = (n: number): number =&gt; n * n;\n\n// Arrow functions don\u2019t have their own `this`\nconst counter = {\n  count: 0,\n  inc: () =&gt; {\n    // `this` here refers to the enclosing scope, not `counter`\n    console.log(this.count); // likely undefined\n  }\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#function-return-types","title":"Function Return Types","text":"<ul> <li>You can explicitly define a function's return type for clarity and safety. TypeScript can infer return types, but explicit ones help with readability.</li> </ul> <pre><code>// \u2705 Function Return Types\nfunction log(msg: string): void {\n  console.log(msg); // no return value\n}\nfunction getUser(): { name: string; age: number } {\n  return { name: \"John\", age: 30 };\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#anonymous-callback-functions","title":"Anonymous &amp; Callback Functions","text":"<ul> <li>Anonymous functions are used inline, often as callbacks. You can type callbacks explicitly for safety and documentation.</li> </ul> <pre><code>// \u2705 Anonymous &amp; Callback Functions\nconst numbers = [1, 2, 3];\nconst doubled = numbers.map(function (num) {\n  return num * 2;\n});\n\nconst tripled = numbers.map((n: number): number =&gt; n * 3);\n\n// Callback with explicit type\nfunction processInput(callback: (input: string) =&gt; void) {\n  callback(\"Hello from callback\");\n}\nprocessInput((msg) =&gt; console.log(msg));\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#2-objects-interfaces-in-typescript","title":"2. Objects &amp; Interfaces in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#object-type-annotations","title":"Object Type Annotations","text":"<ul> <li>TypeScript lets you define object shapes using type annotations. This provides structure, validation, and IntelliSense during development.</li> </ul> <pre><code>// \u2705 Object Type Annotation\nconst user: { name: string; age: number } = {\n  name: \"Alice\",\n  age: 25\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#creating-and-using-interfaces","title":"Creating and Using Interfaces","text":"<ul> <li>Interfaces define the shape of an object and are reusable across your code. They're ideal for modeling structured data.</li> </ul> <pre><code>// \u2705 Interface Usage\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst newUser: User = {\n  name: \"Bob\",\n  age: 32\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#optional-and-readonly-properties","title":"Optional and Readonly Properties","text":"<ul> <li>Use <code>?</code> to make properties optional.</li> <li>Use <code>readonly</code> to prevent reassignment after initialization.</li> </ul> <pre><code>// \u2705 Optional and Readonly\ninterface Product {\n  name: string;\n  price?: number; // optional\n  readonly id: string; // cannot be changed\n}\n\nconst item: Product = {\n  name: \"Book\",\n  id: \"abc123\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#index-signatures","title":"Index Signatures","text":"<ul> <li>Index signatures allow dynamic keys with a consistent value type.</li> </ul> <pre><code>// \u2705 Index Signature\ninterface StringMap {\n  [key: string]: string;\n}\n\nconst colors: StringMap = {\n  primary: \"#fff\",\n  secondary: \"#000\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#interface-vs-type-alias","title":"Interface vs Type Alias","text":"<ul> <li>Both <code>interface</code> and <code>type</code> can define object shapes.</li> <li><code>interface</code> supports declaration merging and is preferred for objects.</li> <li><code>type</code> can alias any type (including primitives, unions, etc.).</li> </ul> <pre><code>// \u2705 Interface\ninterface Person {\n  name: string;\n}\n\n// \u2705 Type Alias\ntype Animal = {\n  species: string;\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#extending-interfaces","title":"Extending Interfaces","text":"<ul> <li>Interfaces can extend one or more other interfaces to build on top of them.</li> </ul> <pre><code>// \u2705 Extending Interfaces\ninterface Shape {\n  color: string;\n}\ninterface Circle extends Shape {\n  radius: number;\n}\n\nconst circle: Circle = {\n  color: \"blue\",\n  radius: 10\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#union-intersection-types","title":"Union &amp; Intersection Types","text":"<ul> <li>Use union (<code>|</code>) to allow multiple types.</li> <li>Use intersection (<code>&amp;</code>) to combine multiple types into one.</li> </ul> <pre><code>// \u2705 Union Type\n\nlet value: string | number;\nvalue = \"hello\"; // \u2705\nvalue = 42;      // \u2705\nvalue = true;    // \u274c Error: boolean not allowed\n\ntype Status = \"success\" | \"error\" | \"loading\";\nlet apiStatus: Status;\napiStatus = \"loading\"; // \u2705\napiStatus = \"fail\";    // \u274c\n\n// Union with Interfaces\ninterface Dog {\n    bark: () =&gt; void;\n}\ninterface Cat {\n    meow: () =&gt; void;\n}\ntype Pet = Dog | Cat;\nfunction makeSound(pet: Pet) {\n    if ('bark' in pet) pet.bark();\n    else pet.meow();\n}\n\n\n\n// \u2705 Intersection Types (&amp;)\n\n// Intersection with Types\ntype A = { a: number };\ntype B = { b: string };\n\ntype AB = A &amp; B;\n\nconst obj: AB = {\n    a: 10,\n    b: \"hello\"\n};\n\n\n// Intersection with Interfaces\ninterface Position {\n    x: number;\n    y: number;\n}\ninterface Size {\n    width: number;\n    height: number;\n}\ntype Rectangle = Position &amp; Size;\n\nconst box: Rectangle = {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 50\n};\n\n\n// Mixed Use of Union and Intersection\ninterface AdminTwo { role: \"admin\"; accessLevel: number };\ninterface UserTwo { role: \"user\"; email: string };\ntype Profile = { name: string };\n\ntype Person = (AdminTwo &amp; Profile) | (UserTwo &amp; Profile);\n\nconst p1: Person = {\n    role: \"admin\",\n    accessLevel: 10,\n    name: \"John\"\n};\n\nconst p2: Person = {\n    role: \"user\",\n    email: \"john@example.com\",\n    name: \"John\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#nested-interfaces-types","title":"Nested Interfaces &amp; Types","text":"<ul> <li>Interfaces and types can be nested to reflect complex data structures.</li> </ul> <pre><code>// \u2705 Nested Types\ninterface Address {\n  street: string;\n  city: string;\n}\ninterface Employee {\n  name: string;\n  address: Address;\n}\n\nconst emp: Employee = {\n  name: \"John\",\n  address: {\n    street: \"123 Main St\",\n    city: \"New York\"\n  }\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#interface-merging","title":"Interface Merging","text":"<ul> <li>Interfaces with the same name automatically merge their declarations.</li> </ul> <pre><code>// \u2705 Interface Merging\ninterface Config {\n  theme: string;\n}\ninterface Config {\n  layout: \"grid\" | \"list\";\n}\n\nconst settings: Config = {\n  theme: \"dark\",\n  layout: \"grid\"\n};\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#type-aliases-for-functions-objects","title":"Type Aliases for Functions &amp; Objects","text":"<ul> <li>You can define reusable object/function types using <code>type</code>.</li> </ul> <pre><code>// \u2705 Function Type Alias\ntype Logger = (message: string) =&gt; void;\n\nconst log: Logger = (msg) =&gt; console.log(msg);\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#discriminated-unions","title":"Discriminated Unions","text":"<ul> <li>Combine union types with a <code>discriminator</code> field to create safer type checks.</li> </ul> <pre><code>// \u2705 Discriminated Unions\ninterface Dog {\n  kind: \"dog\";\n  bark: () =&gt; void;\n}\ninterface Cat {\n  kind: \"cat\";\n  meow: () =&gt; void;\n}\ntype Pet = Dog | Cat;\n\nfunction speak(pet: Pet) {\n  if (pet.kind === \"dog\") {\n    pet.bark();\n  } else {\n    pet.meow();\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#3-classes-in-typescript","title":"3. Classes in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#class-syntax","title":"Class Syntax","text":"<ul> <li>Classes in TypeScript are similar to those in other OOP languages. They encapsulate data and behavior in reusable blueprints.</li> </ul> <pre><code>// \u2705 Basic Class Syntax\nclass Person {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst p = new Person(\"Alice\");\np.greet(); // Hello, my name is Alice\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#constructors-access-modifiers-public-private-protected","title":"Constructors &amp; Access Modifiers (<code>public</code>, <code>private</code>, <code>protected</code>)","text":"<ul> <li><code>public</code>: accessible from anywhere (default)</li> <li><code>private</code>: accessible only within the class</li> <li><code>protected</code>: accessible in the class and subclasses</li> </ul> <pre><code>// \u2705 Access Modifiers\nclass User {\n  public username: string;\n  private password: string;\n  protected email: string;\n\n  constructor(username: string, password: string, email: string) {\n    this.username = username;\n    this.password = password;\n    this.email = email;\n  }\n\n  public checkPassword(input: string): boolean {\n    return this.password === input;\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#readonly-static-members","title":"Readonly &amp; Static Members","text":"<ul> <li><code>readonly</code>: can only be assigned once (at declaration or in constructor)</li> <li><code>static</code>: belongs to the class, not instances</li> </ul> <pre><code>// \u2705 Readonly &amp; Static\nclass AppConfig {\n  readonly version: string = \"1.0.0\";\n  static appName: string = \"MyApp\";\n\n  printVersion() {\n    console.log(`Version: ${this.version}`);\n  }\n}\n\nconsole.log(AppConfig.appName); // \"MyApp\"\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#getters-and-setters","title":"Getters and Setters","text":"<ul> <li>Use <code>get</code> and <code>set</code> for controlled access to properties.</li> </ul> <pre><code>// \u2705 Getters and Setters\nclass Temperature {\n  private _celsius: number;\n\n  constructor(celsius: number) {\n    this._celsius = celsius;\n  }\n\n  get fahrenheit(): number {\n    return this._celsius * 1.8 + 32;\n  }\n\n  set fahrenheit(f: number) {\n    this._celsius = (f - 32) / 1.8;\n  }\n}\n\nconst temp = new Temperature(25);\nconsole.log(temp.fahrenheit); // 77\ntemp.fahrenheit = 86;\nconsole.log(temp); // Celsius: ~30\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#implementing-interfaces","title":"Implementing Interfaces","text":"<ul> <li>Classes can implement one or more interfaces to enforce structure.</li> </ul> <pre><code>// \u2705 Implementing Interfaces\ninterface Printable {\n  print(): void;\n}\n\nclass Document implements Printable {\n  print() {\n    console.log(\"Printing document...\");\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#inheritance-and-super","title":"Inheritance and <code>super()</code>","text":"<ul> <li>Use <code>extends</code> to inherit from another class.</li> <li>Call <code>super()</code> to invoke the parent\u2019s constructor.</li> </ul> <pre><code>// \u2705 Inheritance &amp; super()\nclass Animal {\n  constructor(public name: string) {}\n\n  move() {\n    console.log(`${this.name} moves.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name: string, public breed: string) {\n    super(name);\n  }\n\n  bark() {\n    console.log(\"Woof!\");\n  }\n}\n\nconst d = new Dog(\"Buddy\", \"Beagle\");\nd.move(); // Buddy moves.\nd.bark(); // Woof!\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#abstract-classes","title":"Abstract Classes","text":"<ul> <li>Abstract classes define common structure but cannot be instantiated directly.</li> <li>Subclasses must implement abstract methods.</li> </ul> <pre><code>// \u2705 Abstract Classes\nabstract class Shape {\n  constructor(public color: string) {}\n  abstract area(): number;\n}\n\nclass Circle extends Shape {\n  constructor(color: string, public radius: number) {\n    super(color);\n  }\n\n  area(): number {\n    return Math.PI * this.radius ** 2;\n  }\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#generics-in-classes","title":"Generics in Classes","text":"<ul> <li>Use generics to create reusable and type-safe class structures.</li> </ul> <pre><code>// \u2705 Generic Class\nclass Box&lt;T&gt; {\n  contents: T;\n  constructor(value: T) {\n    this.contents = value;\n  }\n  get(): T {\n    return this.contents;\n  }\n}\n\nconst stringBox = new Box&lt;string&gt;(\"Hello\");\nconst numberBox = new Box&lt;number&gt;(123);\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#parameter-properties","title":"Parameter Properties","text":"<ul> <li>TypeScript lets you declare and initialize class properties directly in the constructor.</li> </ul> <pre><code>// \u2705 Parameter Properties\nclass Car {\n  constructor(public make: string, private year: number) {}\n\n  getAge(): number {\n    return new Date().getFullYear() - this.year;\n  }\n}\n\nconst myCar = new Car(\"Toyota\", 2020);\nconsole.log(myCar.make); // Toyota\n// console.log(myCar.year); \u274c Error: year is private\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#mixins-in-typescript","title":"\ud83e\uddec Mixins in TypeScript","text":""},{"location":"ts/3.Functions%20Objects%20and%20Classes/#what-are-mixins","title":"\ud83e\udde9 What are Mixins?","text":"<p>Mixins are a way to compose multiple classes or behaviors into a single class. Instead of using inheritance from one base class, mixins allow you to combine functionality from multiple sources.</p> <p>They are a powerful pattern to achieve code reuse without deep class hierarchies.</p>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#why-use-mixins","title":"\ud83d\udea6 Why Use Mixins?","text":"<ul> <li>To avoid tight coupling of class hierarchies.</li> <li>To compose reusable logic (e.g., logging, timestamping, serialization).</li> <li>When you want to simulate multiple inheritance in TypeScript (since JS/TS only supports single inheritance).</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#basic-mixin-pattern","title":"\ud83d\udd27 Basic Mixin Pattern","text":"<pre><code>type Constructor&lt;T = {}&gt; = new (...args: any[]) =&gt; T;\n\nfunction Timestamped&lt;TBase extends Constructor&gt;(Base: TBase) {\n  return class extends Base {\n    timestamp = new Date();\n  };\n}\n\nfunction Activatable&lt;TBase extends Constructor&gt;(Base: TBase) {\n  return class extends Base {\n    isActive = false;\n    activate() {\n      this.isActive = true;\n    }\n    deactivate() {\n      this.isActive = false;\n    }\n  };\n}\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#using-the-mixins","title":"\ud83c\udfd7\ufe0f Using the Mixins","text":"<pre><code>class User {\n  constructor(public name: string) {}\n}\n\nconst Mixed = Timestamped(Activatable(User));\n\nconst user = new Mixed(\"Alice\");\n\nconsole.log(user.timestamp);  // Current Date\nconsole.log(user.isActive);   // false\n\nuser.activate();\nconsole.log(user.isActive);   // true\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#how-it-works","title":"\ud83e\udde0 How it Works","text":"<ul> <li><code>Constructor&lt;T&gt;</code> defines a generic class constructor type.</li> <li>Each mixin is a higher-order class function that takes a base class and returns an extended version of it.</li> <li>You can chain mixins together to apply multiple behaviors.</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#things-to-know","title":"\u26a0\ufe0f Things to Know","text":"<ul> <li>TypeScript does not support multiple inheritance, so mixins are a workaround.</li> <li>Mixing in properties and methods may require type assertions or interfaces to keep TypeScript happy.</li> <li>If you're using <code>strictPropertyInitialization</code>, you might need to override that with definite assignment (<code>!</code>) or set values in constructor.</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Keep mixins modular and reusable.</li> <li>Use mixins only when simple composition/inheritance won\u2019t suffice.</li> <li>Document clearly what each mixin adds to avoid confusion.</li> </ul>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#example-with-interface-support","title":"\ud83e\uddea Example with Interface Support","text":"<pre><code>interface Timestamped {\n  timestamp: Date;\n}\ninterface Activatable {\n  isActive: boolean;\n  activate(): void;\n  deactivate(): void;\n}\n\nconst mixedUser = new Mixed(\"Bob\") as User &amp; Timestamped &amp; Activatable;\n</code></pre>"},{"location":"ts/3.Functions%20Objects%20and%20Classes/#when-to-use-mixins","title":"\ud83e\uddf0 When to Use Mixins","text":"<ul> <li>When you want to compose multiple traits into a class.</li> <li>In libraries or frameworks to build pluggable behavior.</li> <li>For large codebases where inheritance trees become too complex.</li> </ul>"},{"location":"ts/4.Advanced%20Types/","title":"4.Advanced Types","text":""},{"location":"ts/4.Advanced%20Types/#advanced-types-in-typescript","title":"Advanced Types in TypeScript","text":""},{"location":"ts/4.Advanced%20Types/#union-and-intersection-types","title":"Union and Intersection Types","text":"<ul> <li>Union (<code>|</code>): A variable can be one of multiple types.</li> <li>Intersection (<code>&amp;</code>): Combines multiple types into one.</li> </ul> <pre><code>// \u2705 Union Type\ntype Status = \"success\" | \"error\" | \"loading\";\nlet state: Status = \"success\";\n\n// \u2705 Intersection Type\ninterface A { a: string }\ninterface B { b: number }\n\ntype AB = A &amp; B;\n\nconst example: AB = {\n  a: \"hello\",\n  b: 123\n};\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#discriminated-unions","title":"Discriminated Unions","text":"<ul> <li>Use a common literal field (<code>kind</code>) to distinguish between types in a union.</li> <li>Helps TypeScript narrow types automatically.</li> </ul> <pre><code>// \u2705 Discriminated Unions\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\ninterface Square {\n  kind: \"square\";\n  side: number;\n}\ntype Shape = Circle | Square;\n\nfunction area(shape: Shape): number {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.side ** 2;\n  }\n}\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#type-guards","title":"Type Guards","text":"<ul> <li>Narrow down types using runtime checks like <code>typeof</code>, <code>instanceof</code>, or custom type predicates.</li> </ul> <pre><code>// \u2705 typeof Guard\nfunction print(value: string | number) {\n  if (typeof value === \"string\") {\n    console.log(\"String:\", value.toUpperCase());\n  } else {\n    console.log(\"Number:\", value.toFixed(2));\n  }\n}\n\n// \u2705 Custom Type Guard\ninterface Cat {\n  meow(): void;\n}\ninterface Dog {\n  bark(): void;\n}\n\nfunction isDog(animal: Dog | Cat): animal is Dog {\n  return (animal as Dog).bark !== undefined;\n}\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#keyof-typeof-in-operators","title":"<code>keyof</code>, <code>typeof</code>, <code>in</code> Operators","text":"<ul> <li><code>keyof</code> gets all property keys of a type.</li> <li><code>typeof</code> refers to the type of a variable or value.</li> <li><code>in</code> checks if a property exists in a type.</li> </ul> <pre><code>// \u2705 keyof\ntype Person = { name: string; age: number };\ntype PersonKeys = keyof Person; // \"name\" | \"age\"\n\n// \u2705 typeof\nconst point = { x: 1, y: 2 };\ntype Point = typeof point;\n\n// \u2705 in Operator\ntype ReadonlyPerson = {\n  [K in keyof Person]: Readonly&lt;Person[K]&gt;\n};\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#mapped-types","title":"Mapped Types","text":"<ul> <li>Create new types by transforming existing ones using <code>keyof</code> and <code>in</code>.</li> </ul> <pre><code>// \u2705 Mapped Type\ntype Optional&lt;T&gt; = {\n  [K in keyof T]?: T[K];\n};\n\ntype User = { id: number; name: string };\ntype OptionalUser = Optional&lt;User&gt;; // All properties optional\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#conditional-types","title":"Conditional Types","text":"<ul> <li>Define types based on a condition using <code>extends</code>.</li> </ul> <pre><code>// \u2705 Conditional Types\ntype IsString&lt;T&gt; = T extends string ? \"Yes\" : \"No\";\n\ntype A = IsString&lt;string&gt;;  // \"Yes\"\ntype B = IsString&lt;number&gt;;  // \"No\"\n</code></pre>"},{"location":"ts/4.Advanced%20Types/#template-literal-types","title":"Template Literal Types","text":"<ul> <li>Construct string literal types using template syntax.</li> </ul> <pre><code>// \u2705 Template Literal Types\ntype Lang = \"en\" | \"fr\" | \"de\";\ntype FileName = `index.${Lang}.html`;\n\nconst file: FileName = \"index.en.html\"; // valid\n</code></pre>"},{"location":"ts/5.Generics/","title":"5.Generics","text":""},{"location":"ts/5.Generics/#generics-in-typescript","title":"Generics in TypeScript","text":""},{"location":"ts/5.Generics/#generic-functions","title":"Generic Functions","text":"<ul> <li>Generics allow you to write functions that work with any data type while preserving type safety.</li> </ul> <pre><code>// \u2705 Generic Function\nfunction identity&lt;T&gt;(arg: T): T {\n  return arg;\n}\n\nconst output1 = identity&lt;string&gt;(\"hello\");\nconst output2 = identity&lt;number&gt;(42);\n</code></pre>"},{"location":"ts/5.Generics/#generic-interfaces-types","title":"Generic Interfaces &amp; Types","text":"<ul> <li>You can use generics in interfaces and type aliases to define reusable structures.</li> </ul> <pre><code>// \u2705 Generic Interface\ninterface Box&lt;T&gt; {\n  value: T;\n}\n\nconst stringBox: Box&lt;string&gt; = { value: \"TypeScript\" };\nconst numberBox: Box&lt;number&gt; = { value: 123 };\n</code></pre>"},{"location":"ts/5.Generics/#constraints-with-generics-extends","title":"Constraints with Generics (<code>extends</code>)","text":"<ul> <li>You can limit what types can be passed to a generic by using <code>extends</code>.</li> </ul> <pre><code>// \u2705 Generic Constraints\ninterface HasLength {\n  length: number;\n}\n\nfunction logLength&lt;T extends HasLength&gt;(input: T): void {\n  console.log(input.length);\n}\n\nlogLength(\"hello\");\nlogLength([1, 2, 3]);\n// logLength(123); \u274c Error: number has no `length`\n</code></pre>"},{"location":"ts/5.Generics/#default-type-parameters","title":"Default Type Parameters","text":"<ul> <li>Provide a default type if none is specified when the generic is used.</li> </ul> <pre><code>// \u2705 Default Type Parameters\ntype ApiResponse&lt;T = string&gt; = {\n  data: T;\n  success: boolean;\n};\n\nconst res1: ApiResponse = { data: \"ok\", success: true };\nconst res2: ApiResponse&lt;number&gt; = { data: 200, success: true };\n</code></pre>"},{"location":"ts/5.Generics/#utility-types-partial-required-readonly-record-etc","title":"Utility Types (<code>Partial</code>, <code>Required</code>, <code>Readonly</code>, <code>Record</code>, etc.)","text":"<ul> <li>TypeScript provides built-in generic utility types to transform other types.</li> </ul> <pre><code>interface User {\n  id: number;\n  name: string;\n  email?: string;\n}\n\n// \u2705 Partial: All properties optional\ntype PartialUser = Partial&lt;User&gt;;\n\n// \u2705 Required: All properties required\ntype RequiredUser = Required&lt;User&gt;;\n\n// \u2705 Readonly: Properties cannot be reassigned\ntype ReadonlyUser = Readonly&lt;User&gt;;\n\n// \u2705 Record: Construct an object type with specific keys and value type\ntype Role = \"admin\" | \"editor\" | \"viewer\";\ntype RoleMap = Record&lt;Role, string&gt;;\n\nconst roles: RoleMap = {\n  admin: \"Alice\",\n  editor: \"Bob\",\n  viewer: \"Charlie\"\n};\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/","title":"6.Modules and Namespaces","text":""},{"location":"ts/6.Modules%20and%20Namespaces/#modules-and-namespaces-in-typescript","title":"Modules and Namespaces in TypeScript","text":""},{"location":"ts/6.Modules%20and%20Namespaces/#es-modules-in-typescript","title":"ES Modules in TypeScript","text":"<ul> <li>TypeScript supports standard ES Modules (<code>import</code> / <code>export</code>) to organize code into separate files.</li> <li>Each file is treated as a module if it contains at least one <code>import</code> or <code>export</code>.</li> </ul> <pre><code>// file: math.ts\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n</code></pre> <pre><code>// file: main.ts\nimport { add } from \"./math\";\nconsole.log(add(2, 3)); // 5\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#import-export-syntax","title":"Import / Export Syntax","text":"<ul> <li>You can export declarations individually or as a default.</li> <li>Imports can be named, aliased, or default imports.</li> </ul> <pre><code>// \u2705 Named Export\nexport const PI = 3.14;\n\n// \u2705 Default Export\nexport default function greet(name: string) {\n  return `Hello, ${name}`;\n}\n</code></pre> <pre><code>// \u2705 Import Variants\nimport greet from \"./greet\";         // default import\nimport { PI } from \"./constants\";    // named import\nimport * as MathUtils from \"./math\"; // namespace import\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#module-resolution","title":"Module Resolution","text":"<ul> <li>TypeScript uses module resolution strategies to locate imported modules:</li> <li><code>\"node\"</code> (for Node.js projects)</li> <li><code>\"classic\"</code> (for older TypeScript projects)</li> <li>Controlled via <code>tsconfig.json</code> under <code>moduleResolution</code>.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"@utils/*\": [\"utils/*\"]\n    }\n  }\n}\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#using-typescript-with-nodejs-deno","title":"Using TypeScript with Node.js / Deno","text":"<ul> <li>TypeScript works with Node.js and Deno through built-in support or configuration.</li> </ul>"},{"location":"ts/6.Modules%20and%20Namespaces/#nodejs","title":"Node.js","text":"<ul> <li>Use <code>ts-node</code> or compile to JavaScript using <code>tsc</code>.</li> <li>Enable ES module support via <code>type: \"module\"</code> in <code>package.json</code>.</li> </ul> <pre><code>{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"ts-node src/main.ts\"\n  }\n}\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#deno","title":"Deno","text":"<ul> <li>Deno supports TypeScript natively. Just run <code>.ts</code> files directly.</li> </ul> <pre><code>deno run --allow-read main.ts\n</code></pre>"},{"location":"ts/6.Modules%20and%20Namespaces/#legacy-namespaces","title":"Legacy Namespaces","text":"<ul> <li>Namespaces were used in pre-ESModule TypeScript for organizing code.</li> <li>Now considered legacy in favor of ES Modules.</li> <li>Still useful in global script-based projects.</li> <li>Use namespace in older codebases without bundlers or module systems.</li> <li>\u274c Don\u2019t mix <code>namespace</code> with <code>import/export</code> in the same file.</li> </ul> <pre><code>// \u2705 Legacy Namespace\nnamespace MathUtils {\n    export function add(a: number, b: number): number {\n        return a + b\n    }\n    export function sub(a: number, b: number): number {\n        return a - b \n    }\n}\nconsole.log(MathUtils.add(23,27))\nconsole.log(MathUtils.sub(23,8))\n</code></pre>"},{"location":"ts/7.Declaration%20Files/","title":"7.Declaration Files","text":""},{"location":"ts/7.Declaration%20Files/#declaration-files-in-typescript","title":"Declaration Files in TypeScript","text":""},{"location":"ts/7.Declaration%20Files/#what-are-dts-files","title":"What are <code>.d.ts</code> Files?","text":"<ul> <li>Declaration files (<code>.d.ts</code>) contain type definitions for JavaScript code.</li> <li>They allow TypeScript to understand the shape of external libraries or modules without their source code.</li> <li>Think of them as type-only headers.</li> </ul> <pre><code>// math.d.ts\ndeclare function add(a: number, b: number): number;\n</code></pre> <pre><code>// main.ts\n/// &lt;reference path=\"./math.d.ts\" /&gt;\nadd(2, 3); // TypeScript understands the type\n</code></pre>"},{"location":"ts/7.Declaration%20Files/#writing-custom-type-declarations","title":"Writing Custom Type Declarations","text":"<ul> <li>Create your own <code>.d.ts</code> files when using plain JavaScript or third-party libraries without types.</li> </ul> <pre><code>// myLib.d.ts\ndeclare module \"my-lib\" {\n  export function greet(name: string): string;\n}\n</code></pre> <pre><code>// usage.ts\nimport { greet } from \"my-lib\";\ngreet(\"TypeScript\");\n</code></pre> <ul> <li>You can also define types globally by omitting <code>declare module</code>.</li> </ul> <pre><code>// global.d.ts\ninterface Window {\n  myApp: {\n    version: string;\n  };\n}\n</code></pre>"},{"location":"ts/7.Declaration%20Files/#using-definitelytyped-types","title":"Using DefinitelyTyped (<code>@types</code>)","text":"<ul> <li>The DefinitelyTyped project provides type definitions for thousands of libraries.</li> <li>Install types using npm:</li> </ul> <pre><code>npm install --save-dev @types/lodash\n</code></pre> <pre><code>import _ from \"lodash\";\n_.chunk([\"a\", \"b\", \"c\", \"d\"], 2); // Fully typed!\n</code></pre> <ul> <li>Type packages follow the naming convention: <code>@types/&lt;package-name&gt;</code></li> </ul>"},{"location":"ts/7.Declaration%20Files/#ambient-declarations","title":"Ambient Declarations","text":"<ul> <li>Use <code>declare</code> to tell TypeScript about types that exist elsewhere (e.g., globally provided by a script or environment).</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Declare Demo&lt;/title&gt;\n  &lt;script&gt;\n    // This defines a global variable, available at runtime\n    window.APP_VERSION = \"3.5.1\";\n  &lt;/script&gt;\n  &lt;script src=\"dist/app.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Check console for output&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>// TypeScript doesn't know this global exists.\n// We must use `declare` to inform the compiler:\ndeclare const APP_VERSION: string;\nconsole.log(\"App Version is:\", APP_VERSION);\n</code></pre> <pre><code>// Likewise\n// Global function\ndeclare function showToast(msg: string): void;\n// It's assumed this function is defined somewhere else\nshowToast(\"Hello!\"); \n\n// Class From External Script\ndeclare class Logger {\n    log(msg: string): void;\n}\nconst logger = new Logger();\nlogger.log(\"Logging!\");\n\n// Module Declaration\ndeclare module \"my-legacy-lib\" {\n    export function doSomething(): void;\n}\n</code></pre> <pre><code>// ambient.d.ts\ndeclare const API_URL: string;\ndeclare function fetchData(endpoint: string): Promise&lt;any&gt;;\n</code></pre> <ul> <li>Ambient declarations are useful when working with global variables or external JS.</li> </ul> <pre><code>// usage.ts\nconsole.log(API_URL);\nfetchData(\"/users\").then(console.log);\n</code></pre>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/","title":"8.TypeScript and JavaScript Interoperability","text":""},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#typescript-and-javascript-interoperability","title":"TypeScript and JavaScript Interoperability","text":""},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#type-checking-javascript-files","title":"Type Checking JavaScript Files","text":"<ul> <li>TypeScript can perform type checking on <code>.js</code> files.</li> <li>Useful for gradually migrating JavaScript projects to TypeScript.</li> </ul> <pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"checkJs\": true\n  },\n  \"include\": [\"src/**/*.js\"]\n}\n</code></pre> <pre><code>// example.js\nfunction add(a, b) {\n  return a + b;\n}\n\nadd(\"1\", 2); // \u274c TypeScript will warn about type mismatch\n</code></pre>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#allowjs-and-checkjs","title":"<code>allowJs</code> and <code>checkJs</code>","text":"<ul> <li><code>allowJs</code>: lets the compiler include <code>.js</code> files in compilation.</li> <li><code>checkJs</code>: enables type-checking on <code>.js</code> files.</li> </ul> <pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"checkJs\": true\n  }\n}\n</code></pre> <ul> <li>This allows mixed JS and TS projects.</li> </ul>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#using-jsdoc-for-typing-js","title":"Using JSDoc for Typing JS","text":"<ul> <li>You can use JSDoc comments to annotate types in <code>.js</code> files.</li> </ul> <pre><code>// \u2705 JSDoc Typing\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction multiply(a, b) {\n  return a * b;\n}\n</code></pre> <ul> <li>Works great with IDEs and <code>checkJs</code> enabled.</li> </ul> <pre><code>/**\n * @typedef {Object} User\n * @property {string} name\n * @property {number} age\n */\n\n/** @type {User} */\nconst user = { name: \"Alice\", age: 30 };\n</code></pre>"},{"location":"ts/8.TypeScript%20and%20JavaScript%20Interoperability/#migrating-from-js-to-ts","title":"Migrating from JS to TS","text":"<ul> <li>Migrate step-by-step with minimal disruption:</li> </ul> <pre><code># 1. Enable JS support\ntsc --init --allowJs --checkJs\n\n# 2. Rename .js \u2192 .ts/.tsx one file at a time\n\n# 3. Replace JSDoc with native TypeScript types\n\n# 4. Fix type errors gradually and configure strict options\n</code></pre> <pre><code>// JS\nfunction greet(name) {\n  return \"Hello, \" + name;\n}\n\n// TS\nfunction greet(name: string): string {\n  return `Hello, ${name}`;\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/","title":"9.Tooling & Configuration","text":""},{"location":"ts/9.Tooling%20%26%20Configuration/#tooling-configuration-in-typescript","title":"Tooling &amp; Configuration in TypeScript","text":""},{"location":"ts/9.Tooling%20%26%20Configuration/#tsconfigjson-explained","title":"<code>tsconfig.json</code> Explained","text":"<ul> <li><code>tsconfig.json</code> configures how TypeScript compiles your project.</li> <li>Common fields:</li> <li><code>compilerOptions</code>: compiler behavior</li> <li><code>include</code>: files to include</li> <li><code>exclude</code>: files to ignore</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"esnext\",\n    \"strict\": true,\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\"\n  },\n  \"include\": [\"src\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#strict-mode-options","title":"Strict Mode Options","text":"<ul> <li>Enabling <code>strict</code> turns on all strict type-checking options:</li> <li><code>strictNullChecks</code></li> <li><code>noImplicitAny</code></li> <li><code>strictFunctionTypes</code></li> <li><code>alwaysStrict</code>, etc.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n</code></pre> <ul> <li>These catch subtle bugs and make your code safer.</li> </ul>"},{"location":"ts/9.Tooling%20%26%20Configuration/#useful-compiler-options","title":"Useful Compiler Options","text":"<ul> <li><code>noImplicitAny</code>: Warns when TypeScript infers <code>any</code>.</li> <li><code>strictNullChecks</code>: Disallows <code>null</code> and <code>undefined</code> where not explicitly allowed.</li> <li><code>esModuleInterop</code>: Enables compatibility with CommonJS modules.</li> <li><code>resolveJsonModule</code>: Allows importing <code>.json</code> files.</li> <li><code>baseUrl</code> &amp; <code>paths</code>: Configure absolute import paths.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"esModuleInterop\": true,\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"@utils/*\": [\"utils/*\"]\n    }\n  }\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#source-maps-output-targets","title":"Source Maps &amp; Output Targets","text":"<ul> <li><code>sourceMap: true</code> generates <code>.map</code> files for debugging in devtools.</li> <li><code>outDir</code> and <code>rootDir</code> control output and input folder structure.</li> </ul> <pre><code>{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"outDir\": \"./build\",\n    \"rootDir\": \"./src\"\n  }\n}\n</code></pre> <ul> <li>Run the compiler:</li> </ul> <pre><code>tsc --project tsconfig.json\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#integrating-with-babel-webpack-vite","title":"Integrating with Babel, Webpack, Vite","text":""},{"location":"ts/9.Tooling%20%26%20Configuration/#with-babel","title":"With Babel","text":"<ul> <li>Use <code>@babel/preset-typescript</code> to strip types while using Babel.</li> </ul> <pre><code>npm install --save-dev @babel/preset-typescript\n</code></pre> <pre><code>// babel.config.json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]\n}\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#with-webpack","title":"With Webpack","text":"<ul> <li>Use <code>ts-loader</code> or <code>babel-loader</code> with <code>webpack.config.js</code>.</li> </ul> <pre><code>module.exports = {\n  entry: \"./src/index.ts\",\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: \"ts-loader\",\n        exclude: /node_modules/\n      }\n    ]\n  },\n  resolve: {\n    extensions: [\".ts\", \".js\"]\n  },\n  output: {\n    filename: \"bundle.js\",\n    path: __dirname + \"/dist\"\n  }\n};\n</code></pre>"},{"location":"ts/9.Tooling%20%26%20Configuration/#with-vite","title":"With Vite","text":"<ul> <li>Vite has built-in TypeScript support; just use <code>.ts</code> files.</li> </ul> <pre><code>npm create vite@latest\n# Choose framework, then select TypeScript template\n</code></pre> <pre><code>// vite.config.ts (optional enhancements)\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  build: {\n    sourcemap: true\n  }\n});\n</code></pre>"},{"location":"ts/ts-list/","title":"0.List of Content","text":""},{"location":"ts/ts-list/#typescript-comprehensive-guide-table-of-contents","title":"TypeScript Comprehensive Guide \u2013 Table of Contents","text":""},{"location":"ts/ts-list/#1-introduction-to-typescript","title":"1. Introduction to TypeScript","text":"<ul> <li>What is TypeScript?</li> <li>Why TypeScript? Benefits over JavaScript</li> <li>TypeScript vs JavaScript</li> <li>Setting Up a TypeScript Project</li> <li>Running &amp; Compiling TypeScript (<code>tsc</code>)</li> </ul>"},{"location":"ts/ts-list/#2-basic-types-and-type-inference-annotations-assertions","title":"2. Basic Types and Type Inference, Annotations &amp; Assertions","text":""},{"location":"ts/ts-list/#basic-types","title":"Basic Types","text":"<ul> <li><code>string</code>, <code>number</code>, <code>boolean</code></li> <li><code>any</code>, <code>unknown</code>, <code>void</code>, <code>never</code></li> <li>Arrays and Tuples</li> <li>Enums</li> <li>Literal Types</li> <li>Type Aliases</li> </ul>"},{"location":"ts/ts-list/#type-inference-type-assertions","title":"Type Inference &amp; Type Assertions","text":"<ul> <li>Type Inference</li> <li>Type Annotations</li> <li>Type Assertions (Casting)</li> <li>Type Casting <code>as</code> vs angle-bracket syntax</li> </ul>"},{"location":"ts/ts-list/#3-functions-objects-and-classes-in-typescript","title":"3. Functions, Objects and Classes in TypeScript","text":""},{"location":"ts/ts-list/#functions-in-typescript","title":"Functions in TypeScript","text":"<ul> <li>Function Types</li> <li>Optional &amp; Default Parameters</li> <li>Rest Parameters</li> <li>Function Overloads</li> <li><code>this</code> in Functions</li> <li>Arrow Functions</li> <li>Function Return Types</li> <li>Anonymous &amp; Callback Functions</li> </ul>"},{"location":"ts/ts-list/#objects-interfaces","title":"Objects &amp; Interfaces","text":"<ul> <li>Object Type Annotations</li> <li>Creating and Using Interfaces</li> <li>Optional and Readonly Properties</li> <li>Index Signatures</li> <li>Interface vs Type Alias</li> <li>Extending Interfaces</li> <li>Union &amp; Intersection Types</li> <li>Nested Interfaces &amp; Types</li> <li>Interface Merging</li> <li>Type Aliases for Functions &amp; Objects</li> <li>Discriminated Unions</li> </ul>"},{"location":"ts/ts-list/#classes-in-typescript","title":"Classes in TypeScript","text":"<ul> <li>Class Syntax</li> <li>Constructors &amp; Access Modifiers (<code>public</code>, <code>private</code>, <code>protected</code>)</li> <li>Readonly &amp; Static Members</li> <li>Getters and Setters</li> <li>Implementing Interfaces</li> <li>Inheritance and <code>super()</code></li> <li>Abstract Classes</li> <li>Generics in Classes</li> <li>Parameter Properties</li> <li>Mixin in TypeScript</li> </ul>"},{"location":"ts/ts-list/#4-advanced-types","title":"4. Advanced Types","text":"<ul> <li>Union and Intersection Types</li> <li>Discriminated Unions</li> <li>Type Guards</li> <li><code>keyof</code>, <code>typeof</code>, <code>in</code> Operators</li> <li>Mapped Types</li> <li>Conditional Types</li> <li>Template Literal Types</li> </ul>"},{"location":"ts/ts-list/#5-generics","title":"5. Generics","text":"<ul> <li>Generic Functions</li> <li>Generic Interfaces &amp; Types</li> <li>Constraints with Generics (<code>extends</code>)</li> <li>Default Type Parameters</li> <li>Utility Types (<code>Partial</code>, <code>Required</code>, <code>Readonly</code>, <code>Record</code>, etc.)</li> </ul>"},{"location":"ts/ts-list/#6-modules-and-namespaces","title":"6. Modules and Namespaces","text":"<ul> <li>ES Modules in TypeScript</li> <li>Import / Export Syntax</li> <li>Module Resolution</li> <li>Using TypeScript with Node.js / Deno</li> <li>Legacy Namespaces</li> </ul>"},{"location":"ts/ts-list/#7-declaration-files","title":"7. Declaration Files","text":"<ul> <li>What are <code>.d.ts</code> files?</li> <li>Writing Custom Type Declarations</li> <li>Using DefinitelyTyped (<code>@types</code>)</li> <li>Ambient Declarations</li> </ul>"},{"location":"ts/ts-list/#8-typescript-and-javascript-interop","title":"8. TypeScript and JavaScript Interop","text":"<ul> <li>Type Checking JavaScript Files</li> <li><code>allowJs</code> and <code>checkJs</code></li> <li>Using JSDoc for Typing JS</li> <li>Migrating from JS to TS</li> </ul>"},{"location":"ts/ts-list/#9-tooling-configuration","title":"9. Tooling &amp; Configuration","text":"<ul> <li><code>tsconfig.json</code> Explained</li> <li>Strict Mode Options</li> <li>Useful Compiler Options</li> <li>Source Maps &amp; Output Targets</li> <li>Integrating with Babel, Webpack, Vite</li> </ul>"},{"location":"ts/ts-list/#10-working-with-third-party-libraries","title":"10. Working with Third-Party Libraries","text":"<ul> <li>Typing External Libraries</li> <li>Using <code>@types</code> Packages</li> <li>Handling Untyped Modules</li> <li>Type Safety in APIs (like <code>axios</code>, <code>fetch</code>, etc.)</li> </ul>"},{"location":"ts/ts-list/#11-react-typescript","title":"11. React + TypeScript","text":"<ul> <li>Typing Functional Components</li> <li>Typing Props and State</li> <li>React Hooks with TypeScript</li> <li>Custom Hooks with Generics</li> <li>Context API with TypeScript</li> </ul>"},{"location":"ts/ts-list/#12-nodejs-typescript","title":"12. Node.js + TypeScript","text":"<ul> <li>Setting up Node.js with TS</li> <li>Typing Express Apps</li> <li>Typing File System, Path, Process APIs</li> <li>Writing CLI Apps with TS</li> </ul>"},{"location":"ts/ts-list/#13-advanced-topics","title":"13. Advanced Topics","text":"<ul> <li>Decorators in TypeScript</li> <li>TypeScript Compiler API</li> <li>AST Parsing and Transformation</li> <li>Performance Considerations</li> </ul>"},{"location":"ts/ts-list/#14-best-practices","title":"14. Best Practices","text":"<ul> <li>Avoiding <code>any</code></li> <li>Favoring <code>unknown</code> and <code>never</code></li> <li>Structuring TypeScript Projects</li> <li>Consistent Naming Conventions</li> <li>Linting with ESLint + TypeScript</li> </ul>"},{"location":"ts/ts-list/#15-testing-in-typescript","title":"15. Testing in TypeScript","text":"<ul> <li>TypeScript with Jest / Vitest</li> <li>Typing Mocks and Stubs</li> <li>Using <code>ts-jest</code> or other compilers</li> </ul>"},{"location":"ts/ts-list/#16-troubleshooting-and-debugging","title":"16. Troubleshooting and Debugging","text":"<ul> <li>Common Type Errors</li> <li>Debugging with Source Maps</li> <li>Using VSCode IntelliSense</li> <li>Fixing Type Mismatches</li> </ul>"},{"location":"ts/ts-list/#17-appendix","title":"17. Appendix","text":"<ul> <li>Glossary of TypeScript Terms</li> <li>Cheatsheet of Common Types</li> <li>Useful Resources &amp; Docs</li> <li>Community and Support</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2025/#2025","title":"2025","text":""},{"location":"blog/category/documentation/","title":"Documentation","text":""},{"location":"blog/category/documentation/#documentation","title":"Documentation","text":""}]}